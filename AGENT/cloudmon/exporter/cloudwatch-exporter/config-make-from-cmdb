#!/data/Software/mydan/perl/bin/perl  -I/data/Software/mydan/AGENT/lib
use strict;
use warnings;

use MIME::Base64;
use Encode qw(decode encode);
use MYDB;
use FindBin qw( $RealBin );

$| ++;

my    @x = `c3mc-device-data-get curr compute aws-ec2 accountuuid | sort | uniq`;
chomp @x;

my @id;
for( @x )
{
    next unless $_ =~ /aws\.ec2\.(\d+)$/;
    push @id, $1;
}

@id = sort{ $a <=> $b } @id;

my    @cont = `cat /data/Software/mydan/AGENT/device/conf/account/aws.ec2`;
chomp @cont;

my @contx = map{ $cont[$_-1] }@id;

my $template = `cat $RealBin/template.yml`;

my $db = MYDB->new( "/data/Software/mydan/AGENT/conf/conn", delayedconnection => 1 );
sub todb
{
    my %data = @_;

    my $v = eval{ $db->query( "select id from openc3_monitor_cloudmon where name='$data{name}' and type='$data{type}' and `describe`='sys sync by: config-make-from-cmdb'" ); };
    die "get openc3_monitor_cloudmon from database fail: $@" if $@;
    die "v not array" unless defined $v && ref $v eq 'ARRAY';

    if( @$v )
    {
        my @key = sort keys %data;
        eval{ $db->execute( sprintf "update `openc3_monitor_cloudmon` set config='$data{config}' where name='$data{name}' and type='$data{type}' and `describe`='sys sync by: config-make-from-cmdb'" ); };
        die "update project info fail:$@"  if $@;
    }
    else
    {
        my @key = sort keys %data;
        eval{ $db->execute( sprintf "insert into `openc3_monitor_cloudmon` (%s)values(%s)", join( ',', map{"`$_`"}@key ), join( ',', map{ "'$data{$_}'" }@key) ); };
        die "update project info fail:$@"  if $@;
    }
}

my $ctrlfile  = "$RealBin/control.conf";
my $ctrlconf;

if( -f $ctrlfile )
{
    $ctrlconf = eval{ YAML::XS::LoadFile $ctrlfile };
    die "load $ctrlfile fail: $@" if $@;

    die "$ctrlfile error" unless $ctrlconf && ref $ctrlconf && ( $ctrlconf->{include} || $ctrlconf->{exclude} );
}

sub igrep
{
    my ( $name, $region ) = @_;
    return 1 unless $ctrlconf;

    if( $ctrlconf->{include} )
    {
        return 0 unless $ctrlconf->{include}{$name}{$region} || $ctrlconf->{include}{$name}{'*'};
    }

    if( $ctrlconf->{exclude} )
    {
        return 0 if     $ctrlconf->{exclude}{$name}{$region} || $ctrlconf->{exclude}{$name}{'*'};
    }

    return 1;
}

sub sync
{
    my @x = split /\s+/, shift @_;
    my %data = ( name => $x[0], ak => $x[1], sk => $x[2], region => $x[3] );

    return unless igrep( $x[0], $x[3] );

    my $tpl = $template;

    for my $k ( keys %data )
    {
        $tpl =~ s/\$\{$k\}/$data{$k}/g;
    }

    $data{config} = $tpl;
    my $config = encode_base64( encode('UTF-8', $data{config}) );
    todb( name => "cmdb-aws-$data{name}-$data{region}", type => "cloudwatch-exporter", describe => "sys sync by: config-make-from-cmdb", config => $config );
}
map{ sync( $_ ); }@contx;
