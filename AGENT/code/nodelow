#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/AGENT/lib -I/data/Software/mydan/AGENT/private/lib
use strict;
use warnings;
use Logs;
use Util;
use JSON;
use LWP::UserAgent;

$| ++;

=head1 SYNOPSIS

    id => 1,
    logs => 日志对象

=cut

return sub
{
    my ( %param, @list )= @_;
    my ( $db, $id, $logs ) = @param{qw( db id logs)};

    $logs = Logs->new( 'code.nodeinfo' ) unless $logs;

    $logs->die( "id not a number" ) unless $id =~ /^\d+$/;

    my %env = Util::envinfo( qw( appname appkey ) );
    my $ua = LWP::UserAgent->new;
    $ua->default_header( %env );
    my $res = $ua->get( "http://api.job.open-c3.org/nodeinfo/$id" );

    unless( $res->is_success )
    {
#TODO 确认上层调用是否捕获这个die
        die "call nodeinfo fail";
    }

    my $data = eval{ JSON::from_json $res->content, { utf8 => 1 } };
    unless ( $data->{stat} ) {
#TODO 确认上层调用是否捕获这个die
        die "call nodeinfo result". $data->{info} || '';
    }
 
    my @col = qw( ip lowcnt status mem cpu netin netout edit_time date );
    my $x   = $db->query( sprintf( "select %s from openc3_monitor_node_low", join ',', @col ), \@col );
    $logs->die( "get data error from db" ) unless defined $x && ref $x eq 'ARRAY';
    my %map; map{ $map{$_->{ip}} = $_; }@$x;

    push @list, map{ +{ %$_, $map{$_->{inip}} ? %{ $map{$_->{inip}} } : ( status => 'unkown' ) } }@{$data->{data}};

    return @list;
}
