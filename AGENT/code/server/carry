#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/AGENT/lib -I/data/Software/mydan/AGENT/private/lib
use strict;
use warnings;
use FindBin qw( $RealBin );
use Logs;
use POSIX ":sys_wait_h";
use JSON;
use FindBin( qw( $RealBin ) );
use YAML::XS;

$| ++;

=head1 SYNOPSIS

    db => $mysql,

=cut

return sub
{
    my %param = @_;

    my ( $db, $interval, $logs ) = ( $param{db}, 30, Logs->new( 'carry' ) );

    my $cnt = 0;
    while( 1 )
    {
        sleep $interval if $cnt;
        warn "do ...\n";

        $cnt ++;

        my %carry;
        my $x = eval{ $db->query( "select projectid,type,subtype,content1,content2 from `openc3_monitor_config_collector`", [qw( projectid type subtype content1 content2 )] ) };

        for my $row ( @$x )
        {
             $carry{$row->{projectid}} = [] unless $carry{$row->{projectid}};
             push @{$carry{$row->{projectid}}}, $row;
        }

        my $hosts = eval{ YAML::XS::LoadFile "$RealBin/../../prometheus/config/openc3_node_sd.yml" };
        $logs->err( "read openc3_node_sd.yml fail: $@" ) if $@;

        my %res;
        for my $host ( @$hosts )
        {
            my %labels = %{$host->{labels}};
            my $instance = $labels{instance};
            my @ids;
            map{ push @ids, $1, if $_ = /^treeid_(\d+)$/ }keys %labels;
            my %temp;
            
            for my $id ( @ids )
            {
                next unless my $c = $carry{$id};
                for my $tmp ( @$c )
                {
                    if( $tmp->{type} eq 'port' )
                    {
                        map{ $temp{"$tmp->{type}_$tmp->{subtype}_${_}_._$tmp->{content2}"} = +{ %$tmp, content1 => $_ } if $_ =~ /^\d+$/  }split /,/, $tmp->{content1};
                    }
                    else
                    {
                        $temp{"$tmp->{type}_$tmp->{subtype}_$tmp->{content1}_._$tmp->{content2}"} = $tmp;
                    }
                }

            }

            my $res = +{};
            for my $v( values %temp )
            {
                if( $v->{type} eq 'port' )
                {
                    $res->{port} = +{} unless $res->{port};
                    my $subtype = $v->{subtype};
                    next unless $subtype eq 'tcp' || $subtype eq 'udp';
                    $res->{port}{$subtype} = [] unless $res->{port}{$subtype};
                    push @{$res->{port}{$subtype}}, $v->{content1};
                }
                elsif( $v->{type} eq 'process' )
                {
                    $res->{process} = +{} unless $res->{process};
                    my $subtype = $v->{subtype};
                    next unless $subtype eq 'name' || $subtype eq 'exe' || $subtype eq 'cmdline';
                    $res->{process}{$subtype} = [] unless $res->{process}{$subtype};
                    push @{$res->{process}{$subtype}}, $v->{content1};
                }
                elsif( $v->{type} eq 'http' )
                {
                    $res->{http} = [] unless $res->{http};
                    push @{$res->{http}}, "$v->{subtype}|$v->{content1}|$v->{content2}";
                }
            }
            $res{$instance} = $res;
        }

        eval{ YAML::XS::DumpFile "$RealBin/../conf/openc3_carry.yml", \%res };
        $logs->err( "write openc3_carry.yml fail: $@" ) if $@;

        print "done.\n";
    }
}
