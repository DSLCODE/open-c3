#!/data/Software/mydan/perl/bin/perl
use strict;
use warnings;
use FindBin qw( $RealBin );
use YAML::XS;

=head1 SYNOPSIS

 $0
 $0 refresh

=cut

my $config = "$RealBin/../conf/config.yml";
exit unless -f $config;

my $conf = eval{ YAML::XS::LoadFile $config };
die "load confg fail: $@" if $@;

my $runpath = "$RealBin/../run/download";
system "mkdir -p $runpath" unless -d $runpath;

chdir $runpath or die "chdir fail";

my $refresh = @ARGV && $ARGV[0] eq 'refresh' ? 1 : 0;
if( $conf->{cookie} && $conf->{cookie}{cmd} && ! $refresh )
{
    system $conf->{cookie}{cmd};
}

system "rm -rf temp; mkdir temp" unless $refresh;

sub download
{
    my ( $type, $subtype, $url, $outline, $filter, $colmap, $ingestionnode ) = @_;

    my ( $temppath, $distpath ) = ( "temp/$type/$subtype", "/data/open-c3-data/device/curr/$type/$subtype" );

    system "mkdir -p $temppath" unless -d $temppath;
    system "mkdir -p $distpath" unless -d $distpath;

    if( $url =~ /^fileserver:(\d+):(.+)$/ )
    {
        my ( $treeid, $filename ) = ( $1, $2 );
        my $md5 = `c3mc-base-db-get -t openc3_job_fileserver md5 -f 'projectid=$treeid and name="$filename" and status="available"'`;
        chomp $md5;
        die "md5 err" unless $md5 && $md5 =~ /^[a-z0-9]+$/;
        my $file = "/data/open-c3-data/glusterfs/fileserver/$treeid/$md5";
        die "nofile $file" unless -f $file;
        system "cp '$file' $temppath/data.xlsx" unless $refresh;
    }
    else
    {
        system "curl -b cookie '$url' -o            $temppath/data.xlsx" unless $refresh;
    }

    system "xlsx2csv   -o $temppath/temp.tsv $temppath/data.xlsx ";
    system "cat $temppath/temp.tsv | sed '1d' > $temppath/data.tsv ";

    eval{ YAML::XS::DumpFile "temp/$type/$subtype/outline.yml", $outline; };
    eval{ YAML::XS::DumpFile "temp/$type/$subtype/filter.yml", $filter; };
    eval{ YAML::XS::DumpFile "temp/$type/$subtype/colmap.yml", $colmap; };

    system "mv $temppath/data.tsv    $distpath/";
    system "mv $temppath/outline.yml $distpath/";
    system "mv $temppath/filter.yml  $distpath/";
    system "mv $temppath/colmap.yml  $distpath/";

    if( $ingestionnode )
    {
        eval{ YAML::XS::DumpFile "temp/$type/$subtype/ingestion-node.yml", $ingestionnode; };
        system "mv $temppath/ingestion-node.yml  $distpath/";
    }
    else
    {
        system "rm '$distpath/ingestion-node.yml'" if -f "$distpath/ingestion-node.yml";
    }
}

map{
    my $c = $_;
    download( map{ $c->{$_} }qw(type subtype url outline filter colmap ingestion-node ));
}@{ $conf->{download} };
