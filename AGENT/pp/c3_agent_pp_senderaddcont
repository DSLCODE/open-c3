#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/AGENT/lib -I/data/Software/mydan/AGENT/private/lib
use strict;
use warnings;

$|++;

use YAML::XS;
use Carp;

=head1 SYNOPSIS

 $0

=cut

local $/ = undef;
my @data = YAML::XS::Load( <STDIN> );
local $/ = "\n";

$ENV{PATH} = "$ENV{PATH}:/data/Software/mydan/AGENT/pp:/data/Software/mydan/Connector/pp:/data/Software/mydan/JOB/pp";


my $envstr = `c3_job_pp_environment`;
my $environment = eval{YAML::XS::Load $envstr};
confess "load fail: $@" if $@;

my %template =
(
    monitorTemplateEmailTitle => 'monitor: host:${labels.instance} alter: ${labels.alertname} status:${status}',
    monitorTemplateEmailContent => 'monitor: host:${labels.instance} alter: ${labels.alertname} status:${status}',
    monitorTemplateSmsContent => 'monitor: host:${labels.instance} alter: ${labels.alertname} status:${status}',
);

my @out;
sub addcont
{
    my $data = shift @_;

    return unless $data && ref $data eq 'HASH';

    my %senddata;
    $senddata{title} = $environment->{monitorTemplateEmailTitle} || $template{monitorTemplateEmailTitle};
    $senddata{content} = $environment->{monitorTemplateEmailContent} || $template{monitorTemplateEmailContent};
    $senddata{mesg} = $environment->{monitorTemplateSmsContent} || $template{monitorTemplateSmsContent};

    my %replace = %$data;
    for my $key ( keys %senddata )
    {
        for ( keys %replace )
        {
            $senddata{$key} =~ s/\$\{$_\}/$replace{$_}/g;
        }
    }

    if(
        ( $environment->{isMonitorSuccessEmail} && $environment->{isMonitorSuccessEmail} eq 'true' ) &&
        ( $data->{'labels.severity'} && ( $data->{'labels.severity'} eq 'level1' || $data->{'labels.severity'} eq 'level2' || $data->{'labels.severity'} eq 'level3' ) )
    )
    {
        $data->{title} = $senddata{title};
        $data->{content} = $senddata{content};
    }

    if(
        ( $environment->{isMonitorSuccessSms} && $environment->{isMonitorSuccessSms} eq 'true' ) &&
        ( $data->{'labels.severity'} && ( $data->{'labels.severity'} eq 'level1' || $data->{'labels.severity'} eq 'level2' ) ) 
    )
    {

        $data->{mesg} = $senddata{mesg};
    }

    push @out, $data;
}

map{ addcont($_ ) }@data;

print YAML::XS::Dump @out;
