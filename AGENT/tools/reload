#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/AGENT/lib
use strict;
use warnings;
use FindBin qw( $RealBin );
use YAML::XS;
use uuid;

=head1 SYNOPSIS

 $0

=cut

print "reload agent\n";

my $base = $RealBin;
$base =~ s#/[^/]+$##;

my $Config = eval{ YAML::XS::LoadFile "$RealBin/../config/Config";};
die "load Config fail: $!" unless $Config;

my $envname = `cat $RealBin/../conf/envname`;
chomp $envname;
die "envname undef" unless $envname;

die "envname $envname undef in Config" unless $Config = $Config->{$envname};

die "port undef" unless my $port = $Config->{port};

my $tokenfile = "/etc/openc3.reload.token";
unless( -f $tokenfile )
{
    my $uuid = uuid->new()->create_str;
    system "echo $uuid > $tokenfile";
}

my $token = `cat $tokenfile 2>/dev/null`; chomp $token;

for my $type ( qw( api api.event ) )
{

    for my $port ( $port->{$type}{from} .. $port->{$type}{to} )
    {
        my $oldpid = `/usr/sbin/lsof -i:$port|tail -n 1|awk '{print \$2}'`;
        chomp $oldpid;

        system "curl -H 'token:$token' localhost:$port/reload 2>/dev/null";

        my $newpid;
        for my $index ( 1 .. 30 )
        {
            system "$base/tools/restart $port" if $index == 20;
            print "check api ...\n";
            $newpid = `/usr/sbin/lsof -i:$port|tail -n 1|awk '{print \$2}'`;
            if( $newpid )
            {
                chomp $newpid;
                last;
            }
            else
            {
                die "reload port $port fail.\n" if $index == 30;
                sleep 1;
            }
        }

        print "reload $type port: $port old pid: $oldpid new pid: $newpid\n";

        die "same pid.\n" if $oldpid && $newpid && $oldpid eq $newpid;
    }
}

my %nginxdeploying = 
(
    nodequery     => 'nodedeploying',
    node2query    => 'nodedeploying',

    mysqlquery    => 'mysqldeploying',
    mysql2query   => 'mysqldeploying',

    redisquery    => 'redisdeploying',
    redis2query   => 'redisdeploying',

    mongodbquery  => 'mongodbdeploying',
    mongodb2query => 'mongodbdeploying',

    nodeextquery  => 'nodeextdeploying',
    nodeext2query => 'nodeextdeploying',
);

sub nginx_off
{
    my $srv = shift @_;
    return unless my $name = $nginxdeploying{$srv};
    system "sed -i 's/agent_api_${name}_.*;/agent_api_${name}_$srv;/' /etc/nginx/conf.d/api.agent.open-c3.org.conf";
    system "nginx -s reload";
    map{ print "wait nginx reload ... $_\n"; sleep 1; }1..15;
}

sub nginx_on
{
    my $srv = shift @_;
    return unless my $name = $nginxdeploying{$srv};
    map{ print "wait nginx reload ... $_\n"; sleep 1; }1..15; # wait server ready, for example: load proxy or carry done
    system "sed -i 's/agent_api_${name}_.*;/agent_api_${name}_off;/' /etc/nginx/conf.d/api.agent.open-c3.org.conf";
    system "nginx -s reload";
}

for my $server ( qw( 
    bury
    keepalive
    check
    inherit
    promesd
    promesdx
    carry
    rule
    sender
    extend-exporter
    self-healing
    nodequery
    node2query
    mysqlquery
    mysql2query
    redisquery
    redis2query
    mongodbquery
    mongodb2query
    nodeextquery
    nodeext2query
    mailmon
    portcheckok
    cloudmon
    devicesync
    ) )
{
    my $oldpid = `ps -ef|grep [a]gent_server_$server|head -n 1|awk '{print \$2}'`;
    chomp $oldpid;

    nginx_off( $server );
    system "killall agent_server_$server";

    my $newpid;
    for my $index ( 1 .. 30 )
    {
        system "$base/tools/restart $server" if $index == 20;

        print "check server agent_server_$server ...\n";
        $newpid = `ps -ef|grep [a]gent_server_$server|head -n 1|awk '{print \$2}'`;

        if( $newpid )
        {
            chomp $newpid;
            last;
        }
        else
        {
            die "restart server agent_server_$server  fail.\n" if $index == 30;
            sleep 1;
        }
      
    }

    print "restart server agent_server_$server old pid: $oldpid new pid: $newpid\n";

    die "same pid.\n" if $oldpid && $newpid && $oldpid eq $newpid;
    nginx_on( $server );
}
