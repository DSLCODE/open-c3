#!/data/Software/mydan/perl/bin/perl
use strict;
use warnings;
use FindBin qw( $RealBin );
use YAML::XS;
use MYDan;

=head1 SYNOPSIS

 $0

=cut

my $base = $RealBin;
$base =~ s#/[^/]+$##;

print "start agent\n";


my $Config = eval{ YAML::XS::LoadFile "$RealBin/../config/Config";};
die "load Config fail: $!" unless $Config;

my $envname = `cat $RealBin/../conf/envname`;
chomp $envname;
die "envname undef" unless $envname;

die "envname $envname undef in Config" unless $Config = $Config->{$envname};

die "port undef" unless my $port = $Config->{port};

my $supervisor = "$RealBin/../../JOB/bin/supervisor --name agent_supervisor --err /var/log/open-c3.error.log";

map{
    print "start api port: $_\n";

    die "start api fail: $!"
        if system join " ",
            $supervisor,
            "--errname 'agent.api.$_'",
            "--cmd '$base/bin/api -p $_'",
            "--log '$base/logs/server/api.$_'",
            "--http http://127.0.0.1:$_/mon",
            "--check ok";
}$port->{api}{from} .. $port->{api}{to};

map{
    die "start api.event fail: $!"
        if system join " ",
            $supervisor,
            "--errname 'agent.api.event.$_'",
            "--cmd 'AGENT_API_EVENT_PORT=$_ $base/bin/api.event'",
            "--log '$base/logs/server/api.event.$_'",
            "--http http://127.0.0.1:$_/mon",
            "--check ok";
    print "start api.event port: $_\n"
}$port->{'api.event'}{from} .. $port->{'api.event'}{to};

map{
    die "start $_ fail: $!"
        if system "$supervisor --errname 'agent.server.$_' --cmd '$base/server/$_' --log '$base/logs/server/$_'";
}qw(
    bury
    check
    nodequery
    mysqlquery
    redisquery
    mongodbquery
);

map{
    die "start $_ fail: $!"
        if system "$supervisor --errname 'agent.server.$_' --cmd 'c3mc-server-agent $_' --log '$base/logs/server/$_'";
}qw(
    promesd
    promesdx
    rule
    carry
    sender
    extend-exporter
    self-healing
    mailmon
    portcheckok
    inherit
    cloudmon
    keepalive
    devicesync
);
