#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/CI/lib -I/data/Software/mydan/CI/private/lib
use strict;
use warnings;
use FindBin qw( $RealBin );
use MYDB;
use Code;
use YAML::XS;
use api::kubernetes;

my $db = MYDB->new( "$RealBin/../conf/conn" );
my @col = qw( id name describe type  );
my $cluster = $db->query( sprintf( "select %s from openc3_ci_ticket where type ='KubeConfig'", join ',',map{"`$_`"} @col ), \@col );

sub getingress
{
    my ( $db, $id, %ext ) = @_;
    my $kubectl = eval{ api::kubernetes::getKubectlCmd( $db, $id, 'user', 'company',  0 ) };
    my @x = `/data/Software/mydan/dan/tools/alarm 3 $kubectl get ingress -A 2>/dev/null`;
    return ( +{ %ext, error => "get ingress fail" } ) unless @x;
    my @title = split /\s+/, shift @x;
    splice @title,4, 0, splice @title, -2;

    my @table;
    map
    {
         $_ =~ s/, /,/g;
         my @col = split /\s+/, $_, 4; 
        
         my %r = %ext; map{ $r{$title[$_]} = $col[$_] }0..2;
         my @tempcol = split /\s+/, pop @col;
         $r{AGE} = pop @tempcol;
         $r{PORTS} = pop @tempcol if @tempcol && $tempcol[-1] =~ /^[\d\,]+$/;
         ( $r{HOSTS}, $r{ADDRESS} ) = split /\s+/, join( ' ', @tempcol ), 2;
         if( $r{ADDRESS} && $r{ADDRESS} =~ s/^(\+ \d+ more\.\.\.)// )
         {
             $r{HOSTS} .= $1;
         }
         push @table, \%r;
    }@x;

    return @table;
}

print YAML::XS::Dump [ map{ getingress( $db, $_->{id}, clustername => $_->{name}, clusterid => $_->{id} ); }@$cluster ];

