#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/CI/lib -I/data/Software/mydan/CI/private/lib
use strict;
use warnings;
use FindBin qw( $RealBin );
use MYDB;
use Code;
use api::kubernetes;

exit unless my $argv = shift;

my ( $u, $clusterid, $namespace, $name, $type, $grep );

eval{
    if( $argv =~ /^\?u=(.+)&clusterid=(.+)&namespace=(.+)&name=(.+)&type=(sh|bash|log)$/ )
    {
        ( $u, $clusterid, $namespace, $name, $type ) = ( $1, $2, $3, $4, $5 );
    }
    elsif( $argv =~ /^\?u=(.+)&clusterid=(.+)&namespace=(.+)&name=(.+)&type=(sh|bash|log)&grep=(.+)$/ )
    {
        ( $u, $clusterid, $namespace, $name, $type, $grep ) = ( $1, $2, $3, $4, $5, $6 );
    }
 
    else { die "param error\n"; }
    
    my $db = MYDB->new( "$RealBin/../conf/conn" );
    my $sso = Code->new( 'auth/sso' );
    my ( $user, $company ) = $sso->run( cookie => $u );
    print "user:$user, company:$company\n";

    my $x = eval{ $db->query( "select pod_shell_relaxed from openc3_ci_ticket where id='$clusterid'" ) };
    die "get pod_shell_relaxed from db fail: $@" if $@;
    
    my $authtype = $type =~ /sh/ ? 'x' : 0;
    $authtype = 0 if $x && @$x && $x->[0][0];

    my ( $kubectl, @ns ) = eval{ api::kubernetes::getKubectlAuth( $db, $clusterid, $user, $company, $authtype ) };
    die "get kubectl fail: $@" if $@;
    die "no auth\n" if @ns && ! grep{ $_ eq $namespace }@ns;

    if( $type =~ /sh/ )
    {
        system "$kubectl -n '$namespace' exec -it '$name' -- sh";
    }
    else
    {
        if( $name =~ /=/ )
        {
            if( $grep )
            {
                $grep =~ s/'//;
                system "$kubectl -n '$namespace' logs -f -l '$name' --tail=3000 --timestamps=true --prefix=true| grep '$grep' --color";
            }
            else
            {
                system "$kubectl -n '$namespace' logs -f -l '$name' --tail=3000 --timestamps=true --prefix=true";
            }
        }
        else
        {
            system "$kubectl -n '$namespace' logs -f '$name' --tail=3000 --timestamps=true";
        }
    }
};

print $@ if $@;

sleep 1000;
