#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/CI/lib -I/data/Software/mydan/CI/private/lib
use strict;
use warnings;
use Time::HiRes qw/time/;
use POSIX;
use Code;
use Logs;
use Util;
use OPENC3::SysCtl;

$| ++;

=head1 SYNOPSIS

    db => $mysql,
    uuid => uuid,

    logs => 日志对象

=cut

return sub
{
    my %param = @_;

    binmode STDOUT, ":utf8";
    my ( $db, $uuid, $logs ) = @param{qw( db uuid logs )};

    $logs = Logs->new( 'code.build' ) unless $logs;

    $logs->die( "uuid format error" ) unless $uuid =~ /^[a-zA-Z0-9]+$/;

    my ( $stimems, $stime ) = ( time, POSIX::strftime( "%Y-%m-%d %H:%M:%S", localtime ) );
    my $myname = `c3mc-base-hostname`;
    chomp $myname;

    my $queueid = int( 1000 * time );
    my $x = $db->execute( "update openc3_ci_version set pid='$$',starttime='$stime',starttimems='$stimems',status='ready',slave='$myname',queueid='$queueid'
        where uuid='$uuid' and ( slave='' or slave='$myname' ) and pid is null" );
    $logs->die( "build $uuid Already running, or no belong to the slave" ) unless $x && $x eq 1;

    $logs->die( "maintain" ) if -f '/data/Software/mydan/Connector/c3.maintain.flow';

    my $xto = `c3mc-sys-ctl ci.task.open`;
    chomp $xto;
    $logs->die( "The system has been temporarily shut down. Please contact the administrator\n" ) unless $xto && $xto eq '1';

    my $applyResourcesPrintTemp = '';
    my $applyResourcesPrint = sub
    {
        my $info = shift @_;
        return if $applyResourcesPrintTemp eq $info;
        warn "$info\n";
        $applyResourcesPrintTemp = $info;
    };

    my $applyResources = sub
    {
        my $memlimit = OPENC3::SysCtl->new()->getint ( 'ci.default.memlimit', 4,    32768,  2048 );
        my $memtotal = OPENC3::SysCtl->new()->getint ( 'ci.available.mem',    2048, 327680, 8192 );

        my @col  = qw(
            project.name project.groupid project.id project.cpulimit project.memlimit
            version.name version.status version.slave version.queueid version.uuid
        );

        my $r = eval{
            $db->query(
                sprintf( "select %s from openc3_ci_version as version left join openc3_ci_project as project on project.id=version.projectid 
                    where version.slave='$myname' and ( version.status='running' or version.status='ready' )", join( ',', @col)), \@col )};

        $logs->die( "get resources info from db fail:$@" ) if $@;

        my ( @ready, @running );
        for( @$r )
        {
            push @ready,   $_ if $_->{'version.status'} eq 'ready';
            push @running, $_ if $_->{'version.status'} eq 'running';
        }

        @ready = sort{ $a->{'version.queueid'} <=> $b->{'version.queueid'} }@ready;

        my ( $myposition, $mymem ) = ( 0 );
        for my $x ( @ready )
        {
            if( $x->{'version.uuid'} eq $uuid )
            {
                $mymem = ( $x->{'project.memlimit'} && $x->{'project.memlimit'} =~ /^\d+$/ )
                         ? $x->{'project.memlimit'}
                         : $memlimit;
                last;
            }
            $myposition ++;
        }

        if( $myposition )
        {
           &$applyResourcesPrint( "in line... $myposition" );
           return;
        }

        my $memused = 0;
        for ( @running )
        {
            my $mem = $_->{'project.memlimit'} || $memlimit;
            $memused += $mem;
        }
        my $memfree = $memtotal - $memused;

        if( $mymem > $memtotal )
        {
            &$applyResourcesPrint( "mem out of resources， need ${mymem}m ，memtotal ${memfree}m" );
            die "The system does not have enough resources.\n";
        }
 
        if( $mymem > $memfree )
        {
            &$applyResourcesPrint( "mem out of resources， need ${mymem}m ，free ${memfree}m" );
            return;
        }

        return 1;
    };

    warn "ready ...\n";
    while(1)
    {
        last if &$applyResources();
        sleep 3;
    }
    warn "go ...\n";

    $x = $db->execute( "update openc3_ci_version set status='running' where uuid='$uuid' and slave='$myname' and status='ready'" );
    $logs->die( "build $uuid Already running, or no belong to the slave" ) unless $x && $x eq 1;

    $x = $db->query( "select `projectid`,`name` from openc3_ci_version where uuid='$uuid'" );
    $logs->die( "get data error from db" ) unless defined $x && ref $x eq 'ARRAY';
    $logs->die( "build uuid null: $uuid" ) unless @$x;

    my ( $projectid, $name ) = @{$x->[0]};

    my ( $status, $errormsg ) = ( 'success', '' );
    for my $job ( qw( dump merge send ) )
    {
        eval{

            my $tagsname = Code->new( "build.plugin/$job" )->run( 
                db => $db, 
                uuid => $uuid,
            );
        };
        if( $@ )
        {
            warn "build fail($job): $@";
            $errormsg .= "build fail($job): $@";
            $status = 'fail';
            last;
        }

    }

    eval{
        Code->new( "build.plugin/notify" )->run(
            db => $db,
            uuid => $uuid,
            status => $status,
            errormsg => $errormsg,
        );
    };

    print "notify fail: $@" if $@;

    my ( $ftimems, $ftime ) = ( time, POSIX::strftime( "%Y-%m-%d %H:%M:%S", localtime ) );
    my $runtime = sprintf "%0.3f", $ftimems - $stimems;

    print "\nstatus: $status\n";
    eval{ $db->execute( "update openc3_ci_version set finishtime='$ftime',finishtimems='$ftimems',
        status='$status',runtime='$runtime' where uuid='$uuid'" ); };
    $logs->die( "update build status fail:$@" ) if $@;
    print "done.\n";
}
