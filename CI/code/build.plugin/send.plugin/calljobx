#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/CI/lib -I/data/Software/mydan/CI/private/lib
use strict;
use warnings;
use JSON;
use Logs;
use LWP::UserAgent;
use Encode;
use Util;

$| ++;

=head1 SYNOPSIS

    db => $mysql,
    logs => æ—¥å¿—å¯¹è±¡
=cut

return sub
{
    my %param = @_;
    my ( $logs, $projectid, $calljobx, $version, $taginfo ) = @param{qw( logs projectid calljobx version taginfo )};
    print '=' x 75, "\n";
    print "calljobx($param{calljobx})...\n";

    $logs = Logs->new( 'code.build.send.calljobx' ) unless $logs;

    my $ua = LWP::UserAgent->new();
    $ua->agent('Mozilla/9 [en] (Centos; Linux)');

    #HTTP::Message content must be bytes at
    my ( $jobname, $jobgroup ) = split /:/, $calljobx;
    my $bytes = encode_utf8($jobname); 
    $jobname = $bytes;
    $bytes = encode_utf8($jobgroup);
    $jobgroup = $bytes;
    $bytes = encode_utf8($taginfo);
    $taginfo = $bytes;

    my %env = eval{ Util::envinfo( qw( appkey appname envname envname.jobx ) )};
    $logs->die( "fromat error $@" ) if $@;

    $ua->default_header( map{ $_ => $env{$_} }qw( appname appkey ) );
 
    $ua->timeout( 10 );
    $ua->default_header ( 'Cache-control' => 'no-cache', 'Pragma' => 'no-cache' );

    my $url = "http://api.jobx.open-c3.org/task/$projectid/job/byname";
    my $res = $ua->post( $url, 
        Content => JSON::to_json( +{ jobname => $jobname, group => $jobgroup, variable => +{ version => $version, taginfo => $taginfo, ci => "n-$env{envname}" } } ), 
        'Content-Type' => 'application/json' 
    );

    my $cont = $res->content;
    $logs->die( "calljobx fail: $cont" ) unless $res->is_success;

    my $data = eval{JSON::from_json $cont};
    $logs->die( "calljobx fail: $cont : no json $@" ) if $@;

    $logs->die( "calljobx fail: $cont : stat fail" )  unless $data->{stat};

    printf "call jobx ok: jobxuuid:%s\n", $data->{uuid};
}
