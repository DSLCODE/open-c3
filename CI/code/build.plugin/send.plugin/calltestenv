#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/CI/lib -I/data/Software/mydan/CI/private/lib
use strict;
use warnings;
use JSON;
use Logs;
use Encode;
use Util;

$| ++;

=head1 SYNOPSIS

    db => $mysql,
    logs => 日志对象
=cut

return sub
{
    my %param = @_;
    my ( $logs, $projectid, $groupid, $version, $tagger ) = @param{qw( logs projectid groupid version tagger )};
    print '=' x 75, "\n";
    print "calltestenv...\n";

    $logs = Logs->new( 'code.build.send.calltestenv' ) unless $logs;

    my $xto = `c3mc-sys-ctl cd.task.open.to.ci.test`;
    chomp $xto;
    $logs->die( "The system has been temporarily shut down. Please contact the administrator\n" ) unless $xto && $xto eq '1';

    #HTTP::Message content must be bytes at
    my ( $jobname, $jobgroup ) = ( '_ci_' . $projectid . '_', '_ci_test_' . $projectid . '_');

    unless( $tagger && $tagger =~ /^[a-zA-Z0-9][a-zA-Z0-9\-\._@]*[a-zA-Z0-9]$/ )
    {
        print "Warn: error tagger format: $tagger\n";
        $tagger = 'unkown';
    }

    my $uuid = `c3mc-jobx-task-run $groupid $jobname $jobgroup --user ci\@app --variablekv version=$version,_jobtype_=test,_exit_=1,tagger=$tagger`;
    chomp $uuid;
    $logs->die( "deploy test env fail" ) unless $uuid && $uuid =~ /^[a-zA-Z0-9]{12}$/;

    printf "call jobx ok: jobxuuid:%s\n", $uuid;

    print "wait test env finish...\n";

    while(1)
    {

        my $status = `c3mc-jobx-task-stat $uuid`;
        chomp $status;
        return if $status eq 'success';

        if( $status eq 'fail' )
        {
            printf "%s\n", Encode::decode("utf8", '测试环境的发布任务失败');
            $logs->die( "jobx status fail" );
        }

        sleep 3;
    }
    print "\n";
    
    return;
}
