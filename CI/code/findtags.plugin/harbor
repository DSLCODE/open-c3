#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/CI/lib -I/data/Software/mydan/CI/private/lib
use strict;
use warnings;
use JSON;
use Logs;
use MIME::Base64;

$| ++;

=head1 SYNOPSIS

    db => $mysql,
    id => id,

    logs => 日志对象

    addr => ''
    ticketid => ''

=cut

return sub
{
    my %param = @_;

    my ( $db, $id, $logs, $addr, $ticketid )
        = @param{qw( db id logs addr ticketid )};

    $logs = Logs->new( 'code.findtags.harbor' ) unless $logs;

    $logs->die( "id format error" ) unless $id =~ /^\d+$/;


    my ( $username, $pass );

    if( $ticketid )
    {
        my $x = eval{ $db->query( "select ticket from openc3_ci_ticket where id='$ticketid' and type='UsernamePassword'" )};  
        $logs->die( "get data from ticket fail:$@" ) if $@;
        ( $username, $pass ) = split /_:separator:_/, $x->[0][0] if @$x;

        $logs->die( "username format error" ) unless $username =~ /^[a-zA-Z0-9\.;=\-_]+$/;
        $logs->die( "password format error" ) unless $pass =~ /^[a-zA-Z0-9\.;=\-_\+\/,]+$/;
    }

    $logs->die( "addr format error" ) unless $addr =~ /^[a-zA-Z0-9\.;=\-_\+\/,:]+$/;

    my $ctrl = $pass ? "curl -u '$username:$pass'" : 'curl';

    my @list;
    eval{
        alarm 10;
        my $str = `$ctrl '$addr' 2>/dev/null`;
        my $data = eval{JSON::from_json $str};
        map{ push @list, $_->{name} }@$data;
        alarm 0; 
    };

    return @list;
}
