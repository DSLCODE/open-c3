#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib -I/data/Software/mydan/Connector/private/lib
use strict;
use warnings;
use utf8;
use YAML::XS;
use Logs;
use LWP::UserAgent;

$| ++;

=head1 SYNOPSIS

    db => $db,
    to => [ 'foo@open-c3.org', '123@open-c3.org' ],
    content => '',

=cut

my ( $usermesg, %env, $debug );
BEGIN{
    use Configini;
    $usermesg = Configini::get( 'usermesg' );
    %env = Configini::env( 'usermesgenv' );

    $debug = Configini::get( 'debug' );
};

return sub
{
    my %param = @_;

    my $logs = $param{logs};
    $logs = Logs->new( 'code.notify.sms' ) unless $logs;

    my $ua = LWP::UserAgent->new;
    $ua->default_header( %env ) if %env;

    my @to = grep{ $_ =~ /^[0-9a-zA-Z_\-\.\@]+$/ }@{$param{to}};
    return unless @to;

    my %to = map{ $_ => $_ }@to;

    my $x = $param{db}->query( sprintf "select `user`,`phone` from openc3_connector_useraddr where user in ( %s )", join ',', map{"'$_'"}@to );
    die( "get data error from db" ) unless defined $x && ref $x eq 'ARRAY';
    map{ $to{$_->[0]} = $_->[1] }@$x;

    my %t = map{ $_ => 1 } values %to;
    for my $to ( keys %t )
    {
        my $cont = JSON::to_json( +{ user => $to, mesg => $param{mesg} } );
        utf8::encode($cont);

        my $res = $ua->post(
            $usermesg,
            Content => $cont,
            'Content-Type' => 'application/json' 
        );

        $logs->say( YAML::XS::Dump $res ) if $debug;

        if($res->is_success)
        {
            my $v = eval{JSON::decode_json $res->decoded_content};
            next if $v->{stat};
        }
        #TODO
        die "die" . YAML::XS::Dump $res;

    }
    return 1;
}
