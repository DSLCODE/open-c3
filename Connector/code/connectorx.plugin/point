#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib -I/data/Software/mydan/Connector/private/lib
use strict;
use warnings;
use Logs;
use YAML::XS;
use LWP::UserAgent;
use Digest::MD5;
use JSON qw();
use OPENC3::SysCtl;
use Code;

$| ++;

=head1 SYNOPSIS

    cookie => 'cookiestring',
    treeid =>
    point =>

=cut

my ( $pmspoint, @eid, %env, $ssocode );
BEGIN{
    use Configini;
    $pmspoint = Configini::get( 'pmspoint'    );
    %env      = Configini::env( 'pmspointenv' );

    my $eid   = Configini::get( 'pmspointeid' );
    @eid = @$eid if $eid && ref $eid eq 'ARRAY' && @$eid == 3;

    $ssocode = Code->new( "connectorx.plugin/sso" );
};

return sub
{
    my ( %param )= @_;
    my ( $cookie, $point, $treeid, $db ) = @param{qw( cookie point treeid db )};

    $treeid ||= 0;

    return 1 if $treeid && $treeid == 4000000000;

    if( $treeid && $treeid >= 4000000000 )
    {
        my $user = eval{ $ssocode->run( cookie => $param{cookie} ) };
        die "get user from cookie fail: $@" if $@;

        return 0 unless defined $user;
        $user =~ s/\./_/;
        my $match = eval{
            $db->query( "select id from openc3_connector_private where id='$treeid' and user='$user'" )
        };
        die "get data from db fail: $@" if $@;

        return $match && @$match > 0 ? 1 : 0;
    }

    my $treestr = '';
    if( defined $treeid )
    {
        if( $treeid )
        {
            if( @eid )
            {
                $treeid = $eid[2] unless $eid[0] <= $treeid && $treeid <= $eid[1];
            }

            $treestr = "&treeid=$treeid";
        }
        else
        {
            if( $point =~ /_read$/ )
            {
                return 1;
            }
            else
            {
                $point =~ s/_write$/_root/;
                $point =~ s/_delete$/_root/;
            }
        }
    }

    my $md5       = Digest::MD5->new->add( "$pmspoint?point=$point$treestr&cookie=$cookie" )->hexdigest;
    my $cache     = "/data/open-c3-data/cache/point/point-$md5";
    my $cachetime =  OPENC3::SysCtl->new()->getint( 'sys.cache.point.timeout', 0, 86400 * 365, 60 );

    $cachetime = 604800 if -f '/var/openc3_connector_api_fail';

    if( $cachetime && -f $cache )
    {
        my $ctime = ( stat $cache )[9]; #mtime
        if( $ctime + $cachetime > time )
        {
            my $v;
            eval{
                $v = eval{ YAML::XS::LoadFile $cache };
                die "get cache fail: $@" if $@;
                die "stat no true"   unless $v->{stat};
            };
            if( $@ )
            {
                warn "get cache fail: $@";
            }
            else
            {
                return $v->{data};
            }
        }
    }

    my $ua = LWP::UserAgent->new;
    $ua->default_header( %env ) if %env;
    $ua->timeout( 15 );

    my ( $res, $err );
    for my $i ( reverse 1 .. 3 )
    {
        $res = $ua->get( "$pmspoint?point=$point$treestr&cookie=$cookie" );

        $err = sprintf "get point fail: $pmspoint?point=$point$treestr&cookie=$cookie: %s", YAML::XS::Dump $res;
        $err =~ s/appkey:\s+['"]?[a-zA-Z0-9]{32}['"]?\b/appkey: ******/g;

        last if $res->is_success;
        if( $i > 1 )
        {
            warn sprintf( "$err code %s", $res->code );
            sleep 3;
        }
    }

    my $v;
    eval{
        die sprintf( "code %s", $res->code ) unless $res->is_success;
        $v = eval{JSON::decode_json $res->decoded_content};

        die "data no JSON: $@" if $@;
        die "stat no true" unless $v->{stat};
    };

    if( $@ )
    {
        warn "$err $@";
        #TODO if cache too old ?
        $v = eval{ YAML::XS::LoadFile $cache };
        die "get cache fail: $@" if $@;
        die "stat no true"   unless $v->{stat};
    }
    else
    {
        if( $cachetime )
        {
            eval{
                YAML::XS::DumpFile "$cache.tmp.$$", $v;
                die "rename fail" unless rename "$cache.tmp.$$", $cache;
            };
            warn "set cache fail: $@" if $@;
        }
    }

    return $v->{data};
};
1
