#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib -I/data/Software/mydan/Connector/private/lib
use strict;
use warnings;
use JSON;
use YAML::XS;
use LWP::UserAgent;
use Logs;
use Digest::MD5;
use OPENC3::SysCtl;

my ( $ssousername, %env, %app );
BEGIN{
    for my $file ( glob "/data/Software/mydan/*/conf/appname" )
    {
        my $name = `cat $file`;
        chomp $name;
        $file =~ s/appname/appkey/;
        my $key = `cat $file`;
        chomp $key;
        $app{$name} = $key eq 'c3random' && $ENV{OPEN_C3_RANDOM} ? $ENV{OPEN_C3_RANDOM} : $key;
    }

    use Configini;
    $ssousername = Configini::get( 'ssousername'    );
    %env         = Configini::env( 'ssousernameenv' );

    die "ssousername undef on config.ini" unless $ssousername;
};

$| ++;

=head1 SYNOPSIS

#第一种
    cookie => 'MTUxNTAzMzg1NnxEdi1CQkFFQ180SUFBUXdCRUFBQU5mLUNBQUVGZEc5clpXNEdjM1J5YVc1bkRDSUFJREk0T1Rsa1l6aG1ZMk5tWWpRMk16TmtaV1kzTlRSbE1XWmtNVFpsTW1JeHyVJcLDk8iEGWlwsv8le0WzgNxhZ6JIYRFMOYzE8fKecA==',

#第二种
    appkey =>
    appname => 

=cut

return sub
{
    my %param = @_;

    return 'debug@api' if $ENV{MYDan_DEBUG};
    if( $param{appkey} && $param{appname} )
    {
         return undef unless $app{$param{appname}} && $app{$param{appname}} eq $param{appkey};
         return wantarray ? ( "$param{appname}\@app", '@app' ) : "$param{appname}\@app";
    }

    my $return = sub{
        my $v = shift @_;
        my @return = ( ref $v->{data} eq 'HASH' && $v->{data}{user} && $v->{data}{company} )
            ?
                (
                    $v->{data}{ user          },
                    $v->{data}{ company       },
                    $v->{data}{ admin         },
                    $v->{data}{ showconnector }
                 )
            : ref $v->{data} eq 'HASH'
                ? () #Error
                : ( $v->{data}, $v->{data} =~ /(@.+)$/ ? $1 : 'default' );

        map{ s/'/_/g }@return;

        if( @return >= 2 && $return[0] && $return[0] =~ /^[a-zA-Z0-9\@\-\.-]+$/ )
        {
            my $x = `c3mc-base-db-get -t openc3_connector_userdepartment department -f "user='$return[0]'"`;
            chomp $x;
            $return[1] = $x if $x =~ /^[a-zA-Z0-9\@\-\.-]+$/;
        }
        return @return;
    };

    my $md5       = Digest::MD5->new->add( "$ssousername$param{cookie}" )->hexdigest;
    my $cache     = "/data/open-c3-data/cache/userinfo/userinfo-$md5";
    my $cachetime =  OPENC3::SysCtl->new()->getint( 'sys.cache.userinfo.timeout', 0, 86400 * 365, 60 );

    $cachetime = 604800 if -f '/var/openc3_connector_api_fail';

    if( $cachetime && -f $cache )
    {
        my $ctime = ( stat $cache )[9]; #mtime
        if( $ctime + $cachetime > time )
        {
            my $v;
            eval{
                $v = eval{ YAML::XS::LoadFile $cache };
                die "get cache fail: $@" if $@;
                die "stat no true"   unless $v->{stat};
                die "data no HASH"   unless $v->{data} && ref $v->{data} eq 'HASH';
            };
            if( $@ )
            {
                warn "get cache fail: $@";
            }
            else
            {
                my @return = &$return( $v );
                return wantarray ? @return : $return[0];
            }
        }
    }

    my $ua = LWP::UserAgent->new;
    $ua->timeout( 15 );
    $ua->default_header( %env ) if %env;

    my ( $res, $err );
    for my $i ( reverse 1 .. 3 )
    {
        $res = $ua->get( "$ssousername$param{cookie}" );
        $err = sprintf "get nodeinfo fail: $ssousername$param{cookie}: %s", YAML::XS::Dump $res;
        $err =~ s/appkey:\s+['"]?[a-zA-Z0-9]{32}['"]?\b/appkey: ******/g;
        last if $res->is_success;
        if( $i > 1 )
        {
            warn sprintf( "$err code %s", $res->code );
            sleep 3;
        }
    }

    my $v;
    eval{
        die sprintf( "code %s", $res->code ) unless $res->is_success;
        $v = eval{JSON::decode_json $res->decoded_content};

        die "data no JSON: $@" if $@;
        die "stat no true" unless $v->{stat};
        die "data no HASH" unless $v->{data} && ref $v->{data} eq 'HASH';
    };

    if( $@ )
    {
        warn "$err $@";
        #TODO if cache too old ?
        if( -f $cache )
        {
            $v = eval{ YAML::XS::LoadFile $cache };
            die "get cache fail: $@" if $@;
            die "stat no true"   unless $v->{stat};
            die "data no HASH"   unless $v->{data} && ref $v->{data} eq 'HASH';
        }
        else
        {
            $v = +{ stat => 1, data => +{} };
        }
    }
    else
    {
        if( $cachetime )
        {
            eval{
                YAML::XS::DumpFile "$cache.tmp.$$", $v;
                die "rename fail" unless rename "$cache.tmp.$$", $cache;
            };
            warn "set cache fail: $@" if $@;
        }
    }

    my @return = &$return( $v );
    return wantarray ? @return : $return[0];
}
