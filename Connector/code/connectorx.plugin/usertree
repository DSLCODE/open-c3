#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib -I/data/Software/mydan/Connector/private/lib
use strict;
use warnings;
use Logs;
use LWP::UserAgent;
use Digest::MD5;
use JSON qw();
use Code;
use OPENC3::SysCtl;
use TreeMap;

$| ++;

=head1 SYNOPSIS

    cookie => 'cookiestring',

=cut

my ( $usertree, %env, $treemapcode );
BEGIN{
    use Configini;
    $usertree = Configini::get( 'usertree'    );
    %env      = Configini::env( 'usertreeenv' );

    $treemapcode = Code->new( "connectorx.plugin/treemap" );
};

return sub
{
    my ( %param  ) = @_;
    my ( $cookie ) = @param{qw(cookie)};

    unless( $usertree )
    {
        my $treemap = eval{ $treemapcode->run( cookie => $cookie ) };
        die "get treemap fail: $@" if $@;
        return TreeMap::map2tree( $treemap );
    }

    my $md5       = Digest::MD5->new->add( "$usertree?cookie=$cookie" )->hexdigest;
    my $cache     = "/data/open-c3-data/cache/usertree/usertree-$md5";
    my $cachetime =  OPENC3::SysCtl->new()->getint( 'sys.cache.usertree.timeout', 0, 86400 * 365, 60 );

    $cachetime = 604800 if -f '/var/openc3_connector_api_fail';

    if( $cachetime && -f $cache )
    {
        my $ctime = ( stat $cache )[9]; #mtime
        if( $ctime + $cachetime > time )
        {
            my $v;
            eval{
                $v = eval{ YAML::XS::LoadFile $cache };
                die "get cache fail: $@" if $@;
                die "stat no true"   unless $v->{stat};
            };
            if( $@ )
            {
                warn "get cache fail: $@";
            }
            else
            {
                return $v->{data};
            }
        }
    }

    my $ua = LWP::UserAgent->new;
    $ua->default_header( %env ) if %env;
    $ua->timeout( 15 );

    my ( $res, $err );
    for my $i ( reverse 1 .. 3 )
    {
       $res = $ua->get( "$usertree?cookie=$cookie" );

        $err = sprintf "get usertree fail: $usertree?cookie=$cookie: %s", YAML::XS::Dump $res;
        $err =~ s/appkey:\s+['"]?[a-zA-Z0-9]{32}['"]?\b/appkey: ******/g;

        last if $res->is_success;
        if( $i > 1 )
        {
            warn sprintf( "$err code %s", $res->code );
            sleep 3;
        }
    }

    my $v;
    eval{
        die sprintf( "code %s", $res->code ) unless $res->is_success;
        $v = eval{JSON::decode_json $res->decoded_content};

        die "data no JSON: $@" if $@;
        die "stat no true" unless $v->{stat};
    };

    if( $@ )
    {
        warn "$err $@";
        die  "$err $@" unless -f $cache;
        #TODO if cache too old ?
        $v = eval{ YAML::XS::LoadFile $cache };
        die "get cache fail: $@" if $@;
        die "stat no true"   unless $v->{stat};
    }
    else
    {
        if( $cachetime )
        {
            eval{
                YAML::XS::DumpFile "$cache.tmp.$$", $v;
                die "rename fail" unless rename "$cache.tmp.$$", $cache;
            };
            warn "set cache fail: $@" if $@;
        }
    }

    return $v->{data};
}
