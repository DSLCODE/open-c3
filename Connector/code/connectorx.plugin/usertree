#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib -I/data/Software/mydan/Connector/private/lib
use strict;
use warnings;
use Logs;
use LWP::UserAgent;
use Digest::MD5;

$| ++;

=head1 SYNOPSIS

    cookie => 'cookiestring',
    logs => 日志对象

=cut

my ( $usertree, %env, $debug, $apicache );
BEGIN{
    use Configini;
    $usertree = Configini::get( 'usertree' );
    %env = Configini::env( 'usertreeenv' );

    $debug = Configini::get( 'debug' );
    $apicache = Configini::get( 'apicache' );
    $apicache = 0 unless $apicache && $apicache =~ /^\d+$/;
};

return sub
{
    my ( %param )= @_;
    my ( $cookie, $logs ) = @param{qw(cookie logs)};

    $logs = Logs->new( 'code.usertree' ) unless $logs;

    my $file;
    if( $apicache )
    {
        my $md5 = Digest::MD5->new->add( "$usertree?cookie=$cookie" )->hexdigest;
        $file = "/tmp/openc3-cache-api-usertree-$md5";

        if( -f $file )
        {
            my $mtime = ( stat $file )[9];
            if( $mtime  && ( $mtime + $apicache > time ) )
            {
                my $filecont = eval{ YAML::XS::LoadFile $file };
                if( $filecont && ! $@ )
                {
                    $logs->say( "usertree api usetime: cache" );
                    return $filecont;
                }
            }
         }
    }


    my $ua = LWP::UserAgent->new;
    $ua->default_header( %env ) if %env;
    my $t = time;
    my $res = $ua->get( "$usertree?cookie=$cookie" );

    $logs->say( YAML::XS::Dump $res ) if $debug;
    my $utime = time - $t;
    $logs->say( "usertree api usetime: $utime" );# if $debug;

    if($res->is_success)
    {
        my $v = eval{decode_json $res->decoded_content};
        eval{ YAML::XS::DumpFile $file, $v->{data} } if $apicache && $v->{stat};
        return $v->{data} if $v->{stat};
    }
    die $res->content;
}
