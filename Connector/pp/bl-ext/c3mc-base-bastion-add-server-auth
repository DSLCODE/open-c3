#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import re
import subprocess
import threading
import time


sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_utils import safe_run_command



# 添加权限时最大的并发线程数
MAX_CONCURRENT_NUMBER = 50


class ThreadSafeSet:
    def __init__(self):
        self.data = set()
        self._lock = threading.Lock()

    def update(self, value):
        with self._lock:
            self.data.add(value)

def is_valid_email(email):
    """
    检查邮箱格式是否合法
    """
    email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(email_regex, email))


def extract_ips(text):
    pattern = r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b'

    matches = re.findall(pattern, text)

    valid_ips = []
    for ip in matches:
        octets = ip.split('.')
        if len(octets) == 4 and all(0 <= int(octet) <= 255 for octet in octets):
            valid_ips.append(ip)

    return valid_ips

def send_new_user_email(email, password):
    safe_run_command([
        "c3mc-base-bastion-send-new-user-email",
        email,
        password,
    ])

def create_user_if_need(email):
    """
    创建堡垒机用户
    """
    account = email.split("@")[0]
    cmd_parts = [
        "c3mc-base-bastion",
        "--operate_type", "adduser",
        "--username", account, 
        "--email", email, 
    ]
    output = subprocess.run(cmd_parts, capture_output=True, text=True)
    if output.returncode != 0:
        print(output.stderr, file=sys.stderr)
        exit(1)
    
    create_user_resp = json.loads(output.stdout)
    if create_user_resp["stat"] == 0:
        print(
            f'堡垒机用户创建失败. info: "{create_user_resp["info"].strip()}"', file=sys.stderr)
        exit(1)

    if create_user_resp["stat"] == 1 and create_user_resp["data"].strip() != "":
        return create_user_resp["data"].strip()
    return ""


# 专门针对单个ip添加权限的线程处理函数
def process_element(thread_safe_set, ip_info, grant_auth_type, account, email, grant_sudo_hours, is_audit):
    def add_auth_for_ip(ip):
        safe_run_command([
            "c3mc-base-bastion",
            "--operate_type", "addauth",
            "--auth_add_type", str(grant_auth_type),
            "--username", account,
            "--email", email,
            "--ip", ip,
            "--sudo_hours", str(grant_sudo_hours),
            "--is_audit", is_audit,
        ])

        thread_safe_set.update(ip)

    done = False
    for ip in [ip_info["inIP"], ip_info["exIP"]]:
        try:
            add_auth_for_ip(ip)
            # 尝试对内网ip和公网ip添加权限
            # 如果执行成功则退出
            done = True
            break
        except Exception as e:
            continue
    
    if not done:
        print(f"资源 {ip_info['instanceId']} 的权限未添加成功, 内网ip: {ip_info['inIP']}, 公网ip: {ip_info['exIP']}", file=sys.stderr)

def grant_server_auth(email, ip_list, grant_auth_type, grant_sudo_hours, is_audit):
    account = email.split("@")[0]
    cmd_parts = ["c3mc-device-api-jumpserver",
                 "--json", "--ips", ",".join(ip_list)]
    output = subprocess.run(cmd_parts, capture_output=True, text=True)
    if output.returncode != 0:
        print(output.stderr, file=sys.stderr)
        exit(1)

    data_list = json.loads(output.stdout)

    # 暂时不检查数量了
    # if len(data_list) > len(ip_list):
    #     print(f"通过命令c3mc-device-api-jumpserver查询到的结果条目数为: {len(data_list)}, len(ip_list): {len(ip_list)}", file=sys.stderr)
    #     print("补充信息, data_list = ", json.dumps(data_list), file=sys.stderr)
    #     print("补充信息, ip_list = ", json.dumps(ip_list), file=sys.stderr)
    #     exit(1)

    # 线程池
    thread_pool = []

    # 结果数组, 里面存放成功添加权限的ip
    thread_safe_set = ThreadSafeSet()

    for ip_info in data_list:
        while threading.active_count() > MAX_CONCURRENT_NUMBER:
            time.sleep(0.3)

        t = threading.Thread(target=process_element, args=(
            thread_safe_set, ip_info, grant_auth_type, account, email, grant_sudo_hours, is_audit
        ))
        thread_pool.append(t)
        t.start()

    # 等待所有线程运行完毕
    for t in thread_pool:
        t.join()


    has_not_found_error = False
    # 判断是否有ip从c3中无法查到
    for ip in ip_list:
        found = any(
            ip_info["inIP"] == ip or ip_info["exIP"] == ip
            for ip_info in data_list
        )
        if not found:
            if not has_not_found_error:
                has_not_found_error = True
            print(f"LOG. 服务器 {ip} 权限申请失败。原因: ip在c3中无法找到", file=sys.stderr)

    for ip in thread_safe_set.data:
        data_list = [ip_info for ip_info in data_list if ip_info["inIP"] != ip and ip_info["exIP"] != ip]

    for ip_info in data_list:
        print(f"LOG. 服务器权限申请失败, 内网ip: {ip_info['inIP']}, 外网ip: {ip_info['exIP']}", file=sys.stderr)

    if data_list:
        exit(1)
    
    if has_not_found_error:
        exit(1)
    

def main(email, auth_type, ip_str, is_audit='0'):
    """添加服务器权限

    Args:
        email (str): 邮箱 
        auth_type (str): 权限处理类型。1: 添加普通权限; 2: 删除权限; 3: 添加sudo权限; 4: 删除sudo权限(保留账户)
        ip_str (str): 使用逗号分隔的ip地址列表
    """
    ip_list = extract_ips(ip_str)
    sudo_hours = int(auth_type.split("_")[1])

    if len(ip_list) == 0:
        print(f"没有查询到有效的ip, ip_list为空, ip_list原始参数为: {ip_str}", file=sys.stderr)
        exit(1)
    
    # add_type 参数取值说明
    # 1: 添加普通权限; 2: 删除权限; 3: 添加sudo权限; 4: 删除sudo权限(保留账户)
    add_type = 3 if sudo_hours > 0 else 1

    if not is_valid_email(email):
        print("账号不是合法邮箱格式", file=sys.stderr)
        exit(1)

    # 创建堡垒机用户
    new_user_pass = create_user_if_need(email)
    if isinstance(new_user_pass, str) and len(new_user_pass) > 0:
        # 发送邮件
        send_new_user_email(email, new_user_pass)

    # 添加服务器权限
    grant_server_auth(email, ip_list, add_type, sudo_hours, is_audit)

    print("LOG. 权限添加结束")


if __name__ == '__main__':
    main(sys.argv[1], sys.argv[2], sys.argv[3])
