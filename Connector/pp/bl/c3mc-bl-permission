#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import subprocess
import argparse
import json
import sys
import requests
import random
import string
from urllib.parse import urljoin
import socket
from urllib.parse import urlparse

MAX_LENGTH_OF_PASSWORD = 15


def test_connection(ip, port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(3)
        sock.connect((ip, port))
        return True
    except socket.error as e:
        return False
    finally:
        sock.close()

def extract_ip_port(url_str):
    if not url_str.startswith("http://") and not url_str.startswith("https://"):
        url_str = f"http://{url_str}"

    url = urlparse(url_str)

    if not url.hostname or not url.port:
        raise ValueError("Invalid URL format")

    return url.hostname, url.port


def generate_password():
    """使用大写字母、小写字母、数字，创建指定长度的密码
    """
    char_types = string.ascii_uppercase + string.ascii_lowercase + string.digits
    return ''.join(random.choice(char_types) for _ in range(MAX_LENGTH_OF_PASSWORD))

def main():
    bl_mode = subprocess.getoutput("c3mc-sys-ctl sys.bl.mode").strip()
    if bl_mode in ['']:
        print("堡垒机配置未启用", file=sys.stderr)
        exit(1)

    parser = argparse.ArgumentParser(description="堡垒机服务器权限处理")
    # 权限处理类型。1: 添加普通权限; 2: 删除权限; 3: 添加sudo权限; 4: 删除sudo权限(保留账户)
    parser.add_argument('--add_type', type=str, required=True,
                        help='权限处理类型。1: 添加普通权限; 2: 删除权限; 3: 添加sudo权限; 4: 删除sudo权限(保留账户)')
    parser.add_argument('--username', type=str, required=True, help='用户账户名')
    parser.add_argument('--email', type=str, required=True, help='用户邮箱')
    parser.add_argument('--ip', type=str, required=True, help='目标IP')
    parser.add_argument('--instance_id', type=str, required=True, help='目标IP对应的实例Id')
    parser.add_argument('--sudo_hours', type=int,
                        required=True, help='sudo权限小时数, 申请普通权限时该参数传0')
    args = parser.parse_args()

    proxy_addr_list = subprocess.getoutput(f"c3mc-sys-ctl sys.bl.sync.{bl_mode}.proxy_addr_list").strip().split(",")
    app_name = subprocess.getoutput("c3mc-sys-ctl sys.bl.sync.app_name").strip()
    app_key = subprocess.getoutput("c3mc-sys-ctl sys.bl.sync.app_key").strip()

    random_password = generate_password()

    request_data = {
        "command": f"{bl_mode}-bastion",
        "arguments": json.dumps({
            "add_type": args.add_type,
            "username": args.username,
            "email": args.email,
            "ip": args.ip,
            "instance_id": args.instance_id,
            "sudo_hours": args.sudo_hours,
            "password": random_password,
        }),
    }

    headers = {
        'Content-Type': 'application/json'
    }
    if app_name != "":
        headers["app_name"] = app_name
    if app_key != "":
        headers["app_key"] = app_key

    ok = False
    for proxy_addr in proxy_addr_list:
        ip, port = extract_ip_port(proxy_addr)
        connection_ok = test_connection(ip, port)

        print(f"测试代理服务连通性 {proxy_addr}, 结果 {'成功' if connection_ok else '失败'}")
        
        api_addr = urljoin(proxy_addr.strip(), "/run")
        res = requests.request(
            "POST", api_addr, headers=headers, data=json.dumps(request_data))
        
        print(f"处理ip {args.ip}")
        print(f"请求代理地址 {proxy_addr}")
        print(f"请求代理时, 调用的参数为: {json.dumps(request_data)}")
        print(f"响应: {res.text}")

        data = json.loads(res.text)
        # 通过一个代理执行成功后直接退出
        if data["stat"] == 1:
            ok = True
            break
    if not ok:
        exit(1)


if __name__ == '__main__':
    main()
