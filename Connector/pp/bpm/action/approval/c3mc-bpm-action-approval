#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/JOB/lib -I/data/Software/mydan/JOB/private/lib
use strict;
use warnings;

use YAML::XS;
use POSIX;
use uuid;
use Encode;
use JSON;
use MYDB;
use utf8;

$| ++;

local $/ = undef;
my $data = JSON::from_json( Encode::encode('utf8', <STDIN> ) );
local $/ = "\n";

die "node data" unless $data;
map { $data->{$_} = Encode::decode( 'utf8', $data->{$_} ) }keys %$data;
my ( $submitter, $approver, $approvalname, $cont, $timeout, $everyone, $relaxed )
  = @$data{qw( submitter approver title content timeout everyone relaxed )};

die "approver undef" unless $approver;
die "title undef"    unless $approvalname;
die "content undef"  unless $cont;

$submitter ||= 'sys@app';
$timeout   ||= '86400';

my $puuid = uuid->new()->create_str;
my @approver;

my %approvelip;

sub getapprover
{
    my ( $str, %res ) = shift @_;
    if( $str =~ /leader\(\s*(.+)\s*\)/ )
    {
        my $users = $1;
        map{
            my    @x = `c3mc-base-userleader --user '$_'`;
            chomp @x;
            die "not find $_ leader" unless @x;
            $res{ $x[0] } = 1;
            print "LOG.$_ leader = $x[0]\n";
        }split /,/, $users;
        return keys %res;
    }
    if( $str =~ /sudoer\(\s*sudo_(\d+)\s*,\s*(.+)\s*\)/ )
    {
        my ( $sudo, $users ) = ( $1, $2 );
        my $sudoer = $sudo ? 1 : 0;
        my $file = "/data/open-c3-data/bpm/sudoer$sudoer.conf";
        return unless -f $file;
        my $leader = eval{ YAML::XS::LoadFile $file };
        die "load $file fail: $@" if $@;
        map{
            if( $leader->{$_} )
            {
                $res{ $leader->{$_} } = 1;
                print "LOG.sudo $sudoer, $_ leader = $leader->{$_}\n";
            }
        }split /,/, $users;
        return keys %res;
    }
    if ( $str =~ /ipowner\(\s*(.+)\s*\)/ )
    {
        for my $ip ( grep{ $_ } split /,/, $1 )
        {
            my $x = `c3mc-device-api-jumpserver --ips '$ip' --cache`;
            die "get $ip owner fail: $!" if $?;
            my $d = eval{ YAML::XS::Load $x };
            die "load fail: $@" if $@;
            unless( @$d )
            {
                warn "[Warn] nofind $ip in jumpserver\n";
                delete $approvelip{$ip};
                next;
            }
            map{
                $res{ $_->{product_owner} } ++;
                print "LOG.$ip product_owner = $_->{product_owner}\n";
            }@$d;
        }
        return keys %res;
    }

    if ( $str =~ /k8sowner\(\s*(.+)\s*\)/ )
    {
        for my $id ( grep{ $_ } split /,/, $1 )
        {
            my @x = `c3mc-base-db-get  create_user -t openc3_ci_ticket -f 'id=$id'`;
            die "get cluster $id owner fail: $!" if $?;
            die "nofind owner in kubernetes\n" unless @x;
            chomp @x;
            map{
                $res{ $_ } ++;
                print "LOG.kubernetes $id owner = $_\n";
            }@x;
        }
        return keys %res;
    }

    return split /,/, $str;
}

my $approvelip;
if( $approver =~ /ipowner\(\s*(.+)\s*\)/ )
{
    map{ $approvelip{$_} = 1 }split /,/, $1;
    $approvelip = 1;
}

if( $approver =~ /\s+or\s+/ )
{
    my @x = split /\s+or\s+/, $approver;
    for( @x )
    {
        my @xx = getapprover( $_ );
        next unless @xx;
        @approver = @xx;
        last;
    }
    die "nofind any approver" unless @approver;
}

else
{
    @approver = getapprover( $approver );
}

if( $approvelip )
{
    $approvelip = %approvelip ? join ',', keys %approvelip : 'NULL';
    print "LOG. approvelip:$approvelip\n";
    print "VAR. approvelip:$approvelip\n";
}

my $db = MYDB->new( "/data/Software/mydan/JOB/conf/conn", delayedconnection => 1 );

for my $user ( @approver )
{
    my $time = POSIX::strftime( "%Y-%m-%d %H:%M:%S", localtime );
    my $muuid = uuid->new()->create_str;
    print "LOG. Send mesg to $user, wait for his confirmation\n";
    my $tempeo = $everyone ? 'YES' :'NO';
    if( $relaxed && $user eq $submitter )
    {
        eval{ $db->execute( 
            Encode::decode('utf8',
                "insert into openc3_job_approval (`taskuuid`,`uuid`,`user`,`submitter`,`cont`,`opinion`,`remarks`,`create_time`,`finishtime`,`notifystatus`,`oauuid`,`name`,`everyone`)values('$puuid','$muuid','$user','$submitter','$cont','agree', 'sys.handle.auto','$time','$time', 'skip', '0','$approvalname', '$tempeo' )"
            )
        ) };
    }
    else
    {
        eval{ $db->execute( 
            Encode::decode('utf8',
                "insert into openc3_job_approval (`taskuuid`,`uuid`,`user`,`submitter`,`cont`,`opinion`,`remarks`,`create_time`,`notifystatus`,`oauuid`,`name`,`everyone`)values('$puuid','$muuid','$user','$submitter','$cont','unconfirmed', '','$time', 'null', '0','$approvalname', '$tempeo' )"
            )
        ) };

    }
    die "insert to mysql fail: $@" if $@;
}

my %approver = map{ $_ => 1 }@approver;

my $rtime = int ( $timeout / 3 ) + 1;
my $subtaskstatus = 'success'; #runnigs,fail,success,decision,ignore,refuse
for( 1 .. $rtime )
{
    my $stat = eval{ $db->query( "select opinion,user,remarks from openc3_job_approval where taskuuid='$puuid'" );};
    if( $@ )
    {
        die "get approval stat err: $@";
        $stat = [];
    }
    for( @$stat )
    {
        my ( $opinion, $user, $remarks ) = @$_;
        next if $opinion eq 'unconfirmed';
        if( $opinion eq 'refuse' )
        {
            print "LOG. refuse by user $user , reason: $remarks\n";
            $subtaskstatus = 'refuse';
            last;
        }elsif( $opinion eq 'agree' )
        {
            next unless $approver{$user};
            print "LOG. $user: agree\n";
            delete $approver{$user};
            %approver = () unless $everyone;
        }
        else { die "unkown opinion: $opinion"; }
    }
    if( $subtaskstatus eq 'fail' || $subtaskstatus eq 'refuse' ){
        last;
    }
    unless( %approver )
    {
        print "LOG. OK\n";
        $subtaskstatus = 'success';
        last;
    }

    if( $_ >= $rtime )
    {
        print "LOG. timeout.\n";
        $subtaskstatus = 'fail';
    }
    sleep 3;
}
 
print "substatus = $subtaskstatus\n";
print "_openc3_sys_pluginstatus_sys_openc3_:$subtaskstatus\n"

