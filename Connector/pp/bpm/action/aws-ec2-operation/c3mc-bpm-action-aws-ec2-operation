#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import random
import subprocess
import time

sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_cloud_aws_ec2 import LIB_EC2
from c3mc_utils import retry_network_request


def exponential_backoff(attempt, max_delay):
    delay = min(max_delay, (2**attempt) + random.uniform(0, 1))
    time.sleep(delay)


class OperateEc2:
    def __init__(self, access_id, access_key, region):
        self.lib_client = LIB_EC2(access_id, access_key, region)

    def run(self, operation_type, instance_id):
        instance_info = self.lib_client.describe_instances([instance_id])["Reservations"][0]["Instances"][0]

        if operation_type == "start":
            if instance_info["State"]["Name"] == "running":
                print(f"LOG. ec2实例: {instance_id} 已经处于 running 状态, 跳过操作")
                return

            retry_network_request(self.lib_client.start_instances, ([instance_id],))
            if not self.lib_client.wait_until_status(instance_id, "running"):
                print(f"LOG. 等待机器启动超时: {instance_id}")
                exit(1)
            print(f"LOG. 成功启动ec2实例: {instance_id}")

        elif operation_type == "stop":
            if instance_info["State"]["Name"] == "stopped":
                print(f"LOG. ec2实例: {instance_id} 已经处于 stopped 状态, 跳过操作")
                return
            retry_network_request(self.lib_client.stop_instances, ([instance_id],))
            if not self.lib_client.wait_until_status(instance_id, "stopped"):
                print(f"LOG. 等待机器关机超时: {instance_id}")
                exit(1)
            print(f"LOG. 成功停止ec2实例: {instance_id}")

        else: 
            print(f"LOG. 不支持的操作类型: {operation_type}")
            exit(1)


def get_instance_uuid(instance_maybe_identifier):
    command = f"c3mc-device-find-uuid {instance_maybe_identifier}"
    result = subprocess.check_output(command, shell=True)
    parts = result.decode("utf-8").strip().split()
    if len(parts) > 1:
        print(f"通过命令 {command} 查询到了多个uuid {parts}", file=sys.stderr)
        exit(1)
    return parts[0]


def main(params):
    print("params = ", json.dumps(params))

    field_name_list = subprocess.getoutput(
        "c3mc-cloud-get-real-field compute aws-ec2 InstanceId account RegionId"
    ).split()

    operation_type = params["operation_type"]
    instance_identifier_list = [
        item.strip()
        for item in params["instance_ids"].split(",") if item.strip() != ""
    ]

    record_err = {}
    for instance_identifier in instance_identifier_list:
        try:
            instance_uuid = get_instance_uuid(instance_identifier)
            data = json.loads(
                subprocess.getoutput(
                    f"c3mc-device-cat curr compute aws-ec2 {instance_uuid} | c3mc-base-tab2json"
                )
            )

            key_info = json.loads(
                subprocess.getoutput(
                    f"c3mc-get-account-info aws {data[field_name_list[1]]}"
                )
            )

            OperateEc2(
                key_info["access_id"],
                key_info["access_key"],
                data[field_name_list[2]],
            ).run(operation_type, instance_uuid)

        except Exception as e:
            record_err = {
                "instance_identifier": instance_identifier,
                "error": str(e)
            }
    
    if len(record_err):
        print(f"操作过程出现错误, 实例标识: {record_err['instance_identifier']}, 错误信息: {record_err['error']}")
        exit(1)


if __name__ == "__main__":
    input_list = list(sys.stdin)
    if not input_list or len(input_list) > 1:
        raise type("WrongInputData", (Exception,), {})('数据格式不对, 需要一行json字符串"')

    main(json.loads(input_list[0]))
