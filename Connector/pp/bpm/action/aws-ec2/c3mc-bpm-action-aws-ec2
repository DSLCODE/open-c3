#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import contextlib
import sys
import json
import subprocess
import json


sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_cloud_aws_ec2 import LIB_EC2
from c3mc_utils import bpm_merge_user_input_tags


must_set_iops_for_volume_types = ["io1", "io2"]


class Ec2:
    def __init__(self, access_id, access_key, region, params):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.instance_params = params
        self.lib_ec2 = LIB_EC2(self.access_id, self.access_key, self.region)

    def run_cmd(self, cmd, arg):
        cmd_parts = [
            cmd,
            self.access_id,
            self.access_key,
            self.region,
            arg,
        ]
        result = subprocess.run(cmd_parts, capture_output=True, text=True)
        if result.returncode != 0:
            raise RuntimeError(f"执行命令 {cmd} 出错. err: {result.stderr}")
        return result.stdout

    def get_image_info(self, image_id):
        data = self.run_cmd("c3mc-ec2create-describe-image-get", image_id)
        return json.loads(data)

    def get_bool_value(self, arg):
        return arg == "是"

    def get_request(self, hostname):
        """
        组装创建ec2的参数
        """

        image_info = self.get_image_info(self.instance_params["image_id"])

        return {
            "BlockDeviceMappings": self._get_block_device_mappings(image_info),
            "NetworkInterfaces": [self._get_network_interface_config()],
            "InstanceInitiatedShutdownBehavior": "stop",
            "DisableApiTermination": False,
            "ImageId": self.instance_params["image_id"],
            "EbsOptimized": False,
            "InstanceType": self.instance_params["instance_type"],
            "Monitoring": {
                "Enabled": self.get_bool_value(self.instance_params["enable_monitor"])
            },
            "Placement": {
                "AvailabilityZone": self.instance_params["availability_zone"]
            },
            "MinCount": 1,
            "MaxCount": 1,
            "TagSpecifications": self._get_tag_specifications(),
            "UserData": f"#!/bin/bash\nhostname {hostname}\necho {hostname} > /etc/hostname\n"
        }

    def _get_block_device_mappings(self, image_info):
        # 配置根分区和数据盘
        mappings = [self._get_root_volume(image_info)]
        if self.instance_params["if_need_data_volume"] == "是":
            mappings.append(self._get_data_volume())
        return mappings

    def _get_root_volume(self, image_info):
        root_volume = {
            "DeviceName": image_info["RootDeviceName"],
            "Ebs": {
                "VolumeType": self.instance_params["root_volume_type"],
                "VolumeSize": int(self.instance_params["root_volume_size"]),
            },
        }
        if self.instance_params["root_volume_type"] in must_set_iops_for_volume_types:
            root_volume["Ebs"]["Iops"] = int(
                self.instance_params["root_volume_max_iops"]
            )
        return root_volume

    def _get_data_volume(self):
        data_volume_type = self.instance_params["data_volume_type"]
        data_volume = {
            "DeviceName": "/dev/sdb",
            "Ebs": {
                "DeleteOnTermination": True,
                "VolumeSize": int(self.instance_params["data_volume_size"]),
                "VolumeType": data_volume_type,
            },
        }
        if data_volume_type in must_set_iops_for_volume_types:
            data_volume["Ebs"]["Iops"] = int(
                self.instance_params["data_volume_max_iops"]
            )
        return data_volume

    def _get_network_interface_config(self):
        return {
            "AssociatePublicIpAddress": self.get_bool_value(
                self.instance_params["if_need_public_ip"]
            ),
            "DeleteOnTermination": True,
            "DeviceIndex": 0,
            "Groups": self.instance_params["security_group_ids"].split(","),
            "SubnetId": self.instance_params["subnet_id"],
        }

    def _get_tag_specifications(self):
        user_tag_list = []
        with contextlib.suppress(json.JSONDecodeError):
            user_tag_list = json.loads(self.instance_params["tag"])
        tags = [
            {"Key": params_tag["key"], "Value": params_tag["value"]}
            for params_tag in user_tag_list
        ]
        return [
            {"ResourceType": "instance", "Tags": tags},
            {"ResourceType": "volume", "Tags": tags},
        ]

    def run_instance(self):
        """创建一个或多个ec2实例"""
        all_instance_ids = []
        all_allocation_ids = []

        try:
            for i in range(int(self.instance_params["count"])):
                hostname = f"{self.instance_params['name_prefix'].lower()}{str(int(self.instance_params['name_suffix_start_number']) + i)}" 
                self.instance_params["hostname_tag"] = hostname
                # 将命名标签合并到标签数组中
                self.instance_params = bpm_merge_user_input_tags(
                    instance_params=self.instance_params,
                    product_owner_key_name="product_owner_tag",
                    owners_key_name="owners_tag",
                    ops_owner_key_name="ops_owner_tag",
                    department_key_name="department_tag",
                    product_key_name="product_tag",
                    hostname_key_name="hostname_tag",
                    name_key_name="name_tag",
                    tree_key_name="tree_tag",
                )
                request = self.get_request(hostname)

                print("DEBUG1, create ec2 create_ec2_params: ", json.dumps(request))

                response = self.lib_ec2.run_instances(request)
                print(f"创建aws ec2, 响应为: {json.dumps(response, default=str)}")

                instance_ids = list(map(lambda x: x["InstanceId"], response["Instances"]))
                all_instance_ids.extend(instance_ids)

                if self.instance_params["public_ip_type"] == "弹性公网ip":
                    allocation_ids = self.lib_ec2.allocate_address(len(instance_ids), request["TagSpecifications"][0]["Tags"])
                    all_allocation_ids.extend(allocation_ids)
                    # 绑定eip
                    self.lib_ec2.bind_eip_to_ec2(instance_ids, allocation_ids)

                # 对每个ec2关联的volume添加标签
                self.lib_ec2.copy_tags_of_instance_to_volume(instance_ids)

                for instance_id in instance_ids:
                    print(f"LOG. instance_id:{instance_id}")
                    print(f"VAR. instance_id:{instance_id}")
                    print(f'VAR. extinstance_id:{self.instance_params["account"]}.{self.instance_params["region"]}.{instance_id}')
        except Exception as e:
            # 假如上面创建出错，需要清理可能已经创建的资源
            try:
                # 数据盘不需要显式删除，因为在创建数据盘的时候指定了参数DeleteOnTermination为True
                if all_instance_ids:
                    self.lib_ec2.terminate_instances(all_instance_ids)
                if all_allocation_ids:
                    for allocation_id in all_allocation_ids:
                        self.disassociate_address(allocation_id)
                        self.release_address(allocation_id)
            except Exception as ee:
                print(
                    f"在创建资源出错后，删除已经创建的相关资源出错，请检查资源是否被删除. instance_ids: {all_instance_ids}, allocation_ids: {all_allocation_ids}",
                    file=sys.stderr,
                )
            raise e


def main(params):
    print("params = ", json.dumps(params), file=sys.stderr)

    if subprocess.getoutput("c3mc-sys-ctl sys.bpm.fake.run") == "1":
        # bpm虚假运行
        print("创建cvm, 响应为: xxxxxx")
        print("LOG. instance_id:xxxxxx")
        print("VAR. instance_id:xxxxxx")
        print(f'VAR. extinstance_id:{params["account"]}.{params["region"]}.xxxxx')
    else:
        account = params["account"]
        region = params["region"]
        key_info = json.loads(
            subprocess.getoutput(f"c3mc-get-account-info aws {account}")
        )

        Ec2(
            key_info["access_id"], key_info["access_key"], region, params
        ).run_instance()


if __name__ == "__main__":
    l = list(sys.stdin)
    if not l or len(l) > 1:
        raise type("WrongInputData", (Exception,), {})('数据格式不对, 需要一行json字符串"')

    main(json.loads(l[0]))
