#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess

import boto3


class Ec2Recycle:
    def __init__(self, access_id, access_key, region):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.client = self.create_client()

    def create_client(self):
        client = boto3.client(
            "ec2",
            aws_access_key_id=self.access_id,
            aws_secret_access_key=self.access_key,
            region_name=self.region,
        )
        return client
    
    def describe_ec2(self, instance_id):
        response = self.client.describe_instances(InstanceIds=[instance_id])
        return response["Reservations"]["Instances"][0]

    def describe_network_interfaces(self, interface_ids):
        response = self.client.describe_network_interfaces(NetworkInterfaceIds=interface_ids, MaxResults=123)
        data = response["NetworkInterfaces"]
        while "NextToken" in response:
            response = self.client.describe_network_interfaces(
                NetworkInterfaceIds=interface_ids, MaxResults=123, NextToken=response["NextToken"])
            data.extend(response["NetworkInterfaces"])
        return data
    
    def release_eip_of_ec2(self, instance_id):
        ec2_info = self.describe_ec2(instance_id)

        if len(ec2_info.NetworkInterfaces) == 0:
            return
        
        interface_ids = []
        for item in ec2_info["NetworkInterfaces"]:
            interface_ids.append(item[0]["NetworkInterfaceId"])
        
        response = self.client.describe_network_interfaces(
            NetworkInterfaceIds=[ interface_ids ],
        )
        for interface_info in response["NetworkInterfaces"]:
            association_id = interface_info["Association"]["AssociationId"]
            allocation_id = interface_info["Association"]["AllocationId"] 
            public_ip = interface_info["Association"]["PublicIp"] 

            if association_id == "" or allocation_id == "" or public_ip == "": 
                continue

            self.client.disassociate_address(
                AssociationId=association_id,
                PublicIp=public_ip,
            )
            self.client.release_address(
                AllocationId=allocation_id,
                PublicIp=public_ip,
            )


    def recycle(self, recycle_type, instance_id):
        if recycle_type.lower() == "stop":
            self.client.stop_instances(
                InstanceIds=[instance_id]
            )
        elif recycle_type.lower() == "terminate":
            self.release_eip_of_ec2(instance_id)                
            self.client.terminate_instances(
                InstanceIds=[instance_id]
            )
        else:
            raise Exception("不支持该回收类型: {}".format(recycle_type))


def main(params):
    params = json.loads(params)
    recycle_type = params["RecycleType"]
    uuids = params["UUIDs"].split(",")

    for uuid in uuids:
        resource_info = json.loads(
            subprocess.getoutput("c3mc-cloud-control --uuid {} --ctrl get none".format(uuid))
        )
        field_name_list = subprocess.getoutput(
            "c3mc-cloud-get-real-field compute aws-ec2 InstanceId accountuuid RegionId"
        ).split()

        key_info = json.loads(subprocess.getoutput(
            "c3mc-device-account-uuid {}".format(field_name_list[1])))

        Ec2Recycle(key_info["access_id"], key_info["access_key"], resource_info[field_name_list[2]]) \
            .recycle(recycle_type, resource_info[field_name_list[0]])


if __name__ == '__main__':
    main(sys.argv[1], sys.argv[2])
