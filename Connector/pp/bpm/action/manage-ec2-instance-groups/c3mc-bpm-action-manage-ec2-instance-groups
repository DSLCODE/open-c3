#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess
import os
import shutil

GROUP_FILE_PATH = "/data/open-c3-data/bpm/group_ec2_full.txt"


def read_file_lines_to_set(file_path):
    file_set = set()

    if os.path.exists(file_path):
        with open(file_path, 'r') as file:
            for line in file:
                file_set.add(line.strip())

    return file_set


def write_set_to_file(set_data, file_path):
    backup_file_path = ""

    # 创建备份文件
    if os.path.exists(file_path):
        backup_file_path = f"{file_path}.bak"
        shutil.copyfile(file_path, backup_file_path)

    try:
        # 确保目录存在
        os.makedirs(os.path.dirname(file_path), exist_ok=True)

        # 清空原文件内容
        with open(file_path, 'w') as file:
            pass

        # 将set的键写入文件
        with open(file_path, 'a') as file:
            for item in set_data:
                file.write(str(item) + '\n')

        # 写入成功，删除备份文件
        if backup_file_path != "":
            os.remove(backup_file_path)
    except Exception as e:
        # 写入出错，恢复备份文件
        if backup_file_path != "":
            shutil.move(backup_file_path, file_path)
        raise RuntimeError("写入文件时发生错误") from e


def get_instance_uuid(instance_maybe_identifier):
    command = f"c3mc-device-find-uuid {instance_maybe_identifier}"
    result = subprocess.check_output(command, shell=True)
    parts = result.decode("utf-8").strip().split()
    if len(parts) > 1:
        print(f"通过命令 {command} 查询到了多个uuid {parts}", file=sys.stderr)
        exit(1)
    return parts[0]


def main(params):
    print("params = ", json.dumps(params))

    operation_type = params["operation_type"]

    instance_identifier_list = [
        item.strip()
        for item in params["instance_ids"].split(",") if item.strip() != ""
    ]

    current_data = read_file_lines_to_set(GROUP_FILE_PATH)

    for instance_identifier in instance_identifier_list:
        instance_uuid = get_instance_uuid(instance_identifier)

        if operation_type == "新增":
            current_data.add(instance_uuid)
        elif operation_type == "移除":
            current_data = {
                item for item in current_data
                if instance_uuid not in item
            }

    write_set_to_file(current_data, GROUP_FILE_PATH)


if __name__ == "__main__":
    input_list = list(sys.stdin)
    if not input_list or len(input_list) > 1:
        raise type("WrongInputData", (Exception,), {})('数据格式不对, 需要一行json字符串"')

    main(json.loads(input_list[0]))
