#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess
import time

from tencentcloud.common import credential
from tencentcloud.common.profile.client_profile import ClientProfile
from tencentcloud.common.profile.http_profile import HttpProfile
from tencentcloud.clb.v20180317 import clb_client, models

sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_cloud_qcloud_clb import QcloudClb

class Listener:
    def __init__(self, access_id, access_key, region, params):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.params = params
        self.client = self.create_client()
        self.lib_client = QcloudClb(access_id, access_key, region)

    def create_client(self):
        cred = credential.Credential(self.access_id, self.access_key)
        httpProfile = HttpProfile()
        httpProfile.endpoint = "clb.tencentcloudapi.com"
        clientProfile = ClientProfile()
        clientProfile.httpProfile = httpProfile
        return clb_client.ClbClient(cred, self.region, clientProfile)

    def get_health_check(self):
        health_switch = 1 if self.params["enable_health_check"] == "是" else 0
        health_check = {"HealthSwitch": health_switch}
        if health_switch:
            health_check["CheckType"] = self.params["health_check_type"]
            if self.params["health_check_type"] == "HTTP":
                health_check |= {
                    "HttpCode": sum(
                        map(int, self.params["health_check_http_codes"].split(","))
                    ),
                    "HttpCheckPath": self.params["http_check_path"],
                    "HttpCheckDomain": self.params["http_check_domain"],
                    "HttpCheckMethod": self.params["http_check_method"],
                }
        return health_check

    def get_request(self):
        req = models.CreateListenerRequest()

        api_params = {
            "LoadBalancerId": self.params["clb_id"],
            "Ports": [int(self.params["listener_port"])],
            "Protocol": self.params["protocol"],
            "ListenerNames": [self.params["listener_name"]],
            "SniSwitch": 1 if self.params.get("enable_sni") == "是" else 0,
        }
        if self.params["protocol"] in ["HTTPS", "TCP_SSL", "QUIC"]:
            api_params["Certificate"] = {
                "SSLMode": "UNIDIRECTIONAL",
                "CertId": self.params["cert_id"]
            }
        if self.params["balancer_type"] in ["UDP", "TCP", "TCP_SSL"]:
            api_params["Scheduler"] = {
                "按权重轮询": "WRR",
                "最小连接数": "LEAST_CONN"
            }[self.params["balancer_type"]]
        api_params["HealthCheck"] = self.get_health_check()

        print(f"api_params = {json.dumps(api_params)}")

        req.from_json_string(json.dumps(api_params))
        return req

    def create_listener(self, req):
        resp = self.client.CreateListener(req)
        return json.loads(resp.to_json_string())

def main(params):
    print("输入的参数为: ", json.dumps(params))

    account = params["account"]
    region = params["region"]
    clb_id = params["clb_id"]
    key_info = json.loads(subprocess.getoutput(f"c3mc-get-account-info qcloud {account}"))

    listener = Listener(key_info["access_id"], key_info["access_key"], region, params)
    req = listener.get_request()
    print(f"创建listener, 请求参数为: {req}")

    if subprocess.getoutput("c3mc-sys-ctl sys.bpm.fake.run") == "1":
        # bpm虚假运行
        print("创建listener, 响应为: xxxxxx")
        print("LOG. listener_id_sssss:vvvvv")
        print("LOG. protocol_sssss:vvvvv")
        print("VAR. listener_id_sssss:vvvvv")
        print("VAR. protocol_sssss:vvvvv")
    else:
        while True:
            try:
                resp = listener.create_listener(req)
                print(f"创建listener, 响应为: {json.dumps(resp)}")

                listener_id = resp["ListenerIds"][0]
                listener_name = params["listener_name"]

                print(f'LOG. listener_id_{listener_name}:{listener_id}')
                print(f'LOG. protocol_{listener_name}:{params["protocol"]}')
                print(f'VAR. listener_id_{listener_name}:{listener_id}')
                print(f'VAR. protocol_{listener_name}:{params["protocol"]}')
                break

            except Exception as e:
                if any(word in str(e) for word in ["Loadbalancer is not in normal status", "maybe some tasks are being processed", "wait for the task to complete and try again"]):
                    time.sleep(5)
                    continue

                if listener_id:
                    r = listener.lib_client.delete_listeners(clb_id, [ listener_id ])
                    print(f"监听器创建成功了, 但是在后续处理时出错。这里会清理创建的监听器, 响应为: {json.dumps(r)}", file=sys.stderr)
                raise RuntimeError("处理出错") from e


if __name__ == '__main__':
    l = list(sys.stdin)
    if not l or len(l) > 1:
        raise type('WrongInputData', (Exception,), {})('数据格式不对, 需要一行json字符串"')
    main(json.loads(l[0].strip()))
