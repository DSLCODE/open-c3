#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess
import time

from tencentcloud.common import credential
from tencentcloud.common.profile.client_profile import ClientProfile
from tencentcloud.common.profile.http_profile import HttpProfile
from tencentcloud.clb.v20180317 import clb_client, models

sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_cloud_qcloud_clb import QcloudClb

# 全局配置
RULE_HASH = {
    "按权重轮询": "WRR",
    "最小连接数": "LEAST_CONN",
    "按IP哈希": "IP_HASH",
}

SUPPORTED_FORWARD_TYPE_LIST = [
    "HTTP",
    "HTTPS"
]


class Rule:
    def __init__(self, access_id, access_key, region, params):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.params = params
        self.client = self.create_client()
        self.lib_client = QcloudClb(access_id, access_key, region)

    def create_client(self):
        cred = credential.Credential(self.access_id, self.access_key)
        httpProfile = HttpProfile()
        httpProfile.endpoint = "clb.tencentcloudapi.com"

        clientProfile = ClientProfile()
        clientProfile.httpProfile = httpProfile
        return clb_client.ClbClient(cred, self.region, clientProfile)

    def get_request(self, api_params, model):
        req = model()
        req.from_json_string(json.dumps(api_params))
        return req

    def execute_request(self, req, method):
        while True:
            try:
                resp = getattr(self.client, method)(req)
                return json.loads(resp.to_json_string())
            except Exception as e:
                if "maybe some tasks are being processed" in str(e) or "wait for the task to complete" in str(e):
                    time.sleep(5)
                    continue
                self.lib_client.delete_load_balancer(load_balancer_id_list=[self.params["clb_id"]])
                print(f"执行请求出错, err: {e}", file=sys.stderr)
                exit(1)

    def create_rule(self):
        rule = self.construct_rule()
        api_params = {
            "LoadBalancerId": self.params["clb_id"],
            "ListenerId": self.params["listener_id"],
            "Rules": [rule],
        }
        req = self.get_request(api_params, models.CreateRuleRequest)
        return self.execute_request(req, 'CreateRule')

    def construct_rule(self):
        rule = {
            "Domain": self.params["domain"],
            "Url": self.params["url"],
            "Scheduler": RULE_HASH[self.params["scheduler"]]
        }
        if self.params["forward_type"] in SUPPORTED_FORWARD_TYPE_LIST:
            rule["ForwardType"] = self.params["forward_type"]

        if self.params["enable_sni"] in ["是"]:
            rule["Certificate"] = {
                "SSLMode": "UNIDIRECTIONAL",
                "CertId": self.params["cert_id"],
            }

        # 配置健康检查
        rule["HealthCheck"] = self.construct_health_check()

        return rule

    def construct_health_check(self):
        if self.params["enable_health_check"] != "是":
            return {
                "HealthSwitch": 0,
            }
        if self.params["health_check_type"] == "TCP":
            return {
                "HealthSwitch": 1,
                "CheckType": self.params["health_check_type"]
            }
        if self.params["health_check_type"] in ["HTTP", "HTTPS"]:
            return {
                "HealthSwitch": 1,
                "HttpCode": sum(map(int, self.params["health_check_http_codes"].split(","))),
                "HttpCheckPath": self.params["http_check_path"],
                "HttpCheckDomain": self.params["http_check_domain"],
                "HttpCheckMethod": self.params["http_check_method"],
                "CheckType": self.params["health_check_type"]
            }

    def register_targets(self, location_id):
        api_params = {
            "LoadBalancerId": self.params["clb_id"],
            "ListenerId": self.params["listener_id"],
            "Targets": self.construct_targets()
        }
        if location_id is not None:
            api_params["LocationId"] = location_id
        
        print(f"api_params = {api_params}")

        req = self.get_request(api_params, models.RegisterTargetsRequest)
        return self.execute_request(req, 'RegisterTargets')

    def construct_targets(self):
        return [
            {
                "Type": "CVM",
                "InstanceId": instance_id,
                "Port": int(self.params["port"]),
            }
            for instance_id in self.params["instance_ids"].split(",")
        ]


def main(params):
    print("输入的参数为: ", json.dumps(params))

    account = params["account"]
    region = params["region"]
    clb_id = params["clb_id"]

    key_info = json.loads(
        subprocess.getoutput(f"c3mc-get-account-info qcloud {account}")
    )

    rule = Rule(key_info["access_id"],
                key_info["access_key"], region, params)

    # 监听器使用的协议
    listener_protocol = params["protocol"]

    location_id = None
    if listener_protocol in ["HTTP", "HTTPS"]:
        resp = rule.create_rule()
        print(f"创建clb转发规则, 响应为: {json.dumps(resp)}")

        location_id = resp["LocationIds"][0]
        print(f"LOG. location_id:{location_id}")
        print(f"VAR. location_id:{location_id}")

    resp = rule.register_targets(location_id)
    print(f"绑定后端机器到监听器, 响应为: {json.dumps(resp)}")


if __name__ == '__main__':
    l = list(sys.stdin)
    if not l:
        raise RuntimeError("数据格式不对")

    main(json.loads(l[0].strip()))
