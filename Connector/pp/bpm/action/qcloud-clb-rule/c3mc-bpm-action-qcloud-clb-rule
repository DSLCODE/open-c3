#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess
import time

from tencentcloud.common import credential
from tencentcloud.common.profile.client_profile import ClientProfile
from tencentcloud.common.profile.http_profile import HttpProfile
from tencentcloud.clb.v20180317 import clb_client, models


# 规则的请求转发方式
rule_hash = {
    "按权重轮询": "WRR",
    "最小连接数": "LEAST_CONN",
    "按IP哈希": "IP_HASH",
}

suppored_forward_type_list = [
    "HTTP",
    "HTTPS"
]


class Rule:
    def __init__(self, access_id, access_key, region, params):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.params = params
        self.client = self.create_client()

    def create_client(self):
        cred = credential.Credential(
            self.access_id, self.access_key)
        httpProfile = HttpProfile()
        httpProfile.endpoint = "clb.tencentcloudapi.com"

        clientProfile = ClientProfile()
        clientProfile.httpProfile = httpProfile
        return clb_client.ClbClient(cred, self.region, clientProfile)

    def get_request_for_create_rule(self):
        req = models.CreateRuleRequest()

        rule = {
            "Domain": self.params["domain"],
            "Url": self.params["url"],
            "Scheduler": rule_hash[self.params["scheduler"]]
        }
        if self.params["forward_type"] in suppored_forward_type_list:
            rule["ForwardType"] = self.params["forward_type"]

        if self.params["enable_sni"] in ["是"]:
            rule["Certificate"] = {
                "SSLMode": "UNIDIRECTIONAL",
                "CertId": self.params["cert_id"],
            }

        # 配置健康检查
        if self.params["enable_health_check"] == "是":
            if self.params["health_check_type"] == "TCP":
                rule["HealthCheck"] = {
                    "HealthSwitch": 1,
                    "CheckType": self.params["health_check_type"]
                }
            if self.params["health_check_type"] in ["HTTP", "HTTPS"]:
                rule["HealthCheck"] = {
                    "HealthSwitch": 1,
                    "HttpCode": sum(map(int, self.params["health_check_http_codes"].split(","))),
                    "HttpCheckPath": self.params["http_check_path"],
                    "HttpCheckDomain": self.params["http_check_domain"],
                    "HttpCheckMethod": self.params["http_check_method"],
                    "CheckType": self.params["health_check_type"]
                }
        else:
            rule["HealthCheck"] = {
                "HealthSwitch": 0,
            }

        api_params = {
            "LoadBalancerId": self.params["clb_id"],
            "ListenerId": self.params["listener_id"],
            "Rules": [rule],
        }

        req.from_json_string(json.dumps(api_params))
        return req

    def create_rule(self, req):
        resp = self.client.CreateRule(req)
        return json.loads(resp.to_json_string())

    def get_request_for_register_target(self, location_id):
        req = models.RegisterTargetsRequest()

        api_params = {
            "LoadBalancerId": self.params["clb_id"],
            "ListenerId": self.params["listener_id"],
            "Targets": []
        }
        if location_id is not None:
            api_params["LocationId"] = location_id
        for instance_id in self.params["instance_ids"].split(","):
            api_params["Targets"].append({
                "Type": "CVM",
                "InstanceId": instance_id,
                "Port": int(self.params["port"]),
            })

        req.from_json_string(json.dumps(api_params))
        return req

    def register_targets(self, req):
        resp = self.client.RegisterTargets(req)
        return json.loads(resp.to_json_string())


def main(params):
    print("输入的参数为: ", json.dumps(params))

    account = params["account"]
    region = params["region"]

    key_info = json.loads(
        subprocess.getoutput(f"c3mc-get-account-info qcloud {account}")
    )

    rule = Rule(key_info["access_id"],
                key_info["access_key"], region, params)

    # 监听器使用的协议
    # udp和tcp协议时，不需要创建转发规则
    listener_protocol = params["protocol"]

    location_id = None

    if listener_protocol in ["HTTP", "HTTPS"]:
        req_for_create_rule = rule.get_request_for_create_rule()
        print(f"创建clb转发规则, 请求参数为: {req_for_create_rule}")
        if subprocess.getoutput("c3mc-sys-ctl sys.bpm.fake.run") == "1":
            # bpm虚假运行
            print("创建clb转发规则, 响应为: xxxxxx")
            print("LOG. location_id:xxxxxx")
            print("VAR. location_id:xxxxxx")
        else:
            while True:
                try:
                    resp = rule.create_rule(req_for_create_rule)
                    print(f"创建clb转发规则, 响应为: {json.dumps(resp)}")

                    location_id = resp["LocationIds"][0]

                    print(f"LOG. location_id:{location_id}")
                    print(f"VAR. location_id:{location_id}")

                    break
                except Exception as e:
                    if "maybe some tasks are being processed" in str(e) or "Pls wait for the task to complete and try again" in str(e):
                        time.sleep(5)
                        continue
                    print(f"创建clb转发规则出错, err: {e}", file=sys.stderr)
                    exit(1)

    req_for_register_target = rule.get_request_for_register_target(location_id)
    print(f"绑定后端机器到监听器, 请求参数为: {req_for_register_target}")
    if subprocess.getoutput("c3mc-sys-ctl sys.bpm.fake.run") == "1":
        # bpm虚假运行
        print("绑定后端机器到监听器, 响应为: xxxxxx")
    else:
        while True:
            try:
                resp = rule.register_targets(req_for_register_target)
                print(f"绑定后端机器到监听器, 响应为: {json.dumps(resp)}")

                break
            except Exception as e:
                if "maybe some tasks are being processed" in str(e) or "wait for the task to complete" in str(e):
                    time.sleep(5)
                    continue
                print(f"绑定后端机器到监听器, err: {e}", file=sys.stderr)
                exit(1)


if __name__ == '__main__':
    l = list(sys.stdin)
    if len(l) == 0:
        raise Exception("数据格式不对")

    main(json.loads(l[0].strip()))
