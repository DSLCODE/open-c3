#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess

from tencentcloud.common import credential
from tencentcloud.common.profile.client_profile import ClientProfile
from tencentcloud.common.profile.http_profile import HttpProfile
from tencentcloud.clb.v20180317 import clb_client, models

sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_utils import bpm_merge_user_input_tags
from c3mc_cloud_qcloud_clb import QcloudClb
from c3mc_cloud_qcloud_cvm import QcloudCvm


class Clb:
    def __init__(self, access_id, access_key, region, params):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.params = params
        self.client = self.create_client()
        self.lib_client = QcloudClb(access_id, access_key, region)
        self.lib_cvm_client = QcloudCvm(access_id, access_key, region)

    def create_client(self):
        cred = credential.Credential(self.access_id, self.access_key)
        httpProfile = HttpProfile()
        httpProfile.endpoint = "clb.tencentcloudapi.com"
        clientProfile = ClientProfile()
        clientProfile.httpProfile = httpProfile
        return clb_client.ClbClient(cred, self.region, clientProfile)

    def get_cvm_info(self):
        return self.lib_cvm_client.show_cvm(self.params["instance_ids"].split(",")[0])

    def create_clb(self):
        cvmInfo = self.get_cvm_info()
        network_type = "INTERNAL" if self.params["network_type"] == "内网" else "OPEN"
        api_params = {
            "LoadBalancerType": network_type,
            "Forward": 1,
            "ProjectId": int(self.params["project_id"]),
            "LoadBalancerName": self.params["clb_name"],
            "VpcId": cvmInfo["VirtualPrivateCloud"]["VpcId"],
            "Number": 1
        }
        if network_type == "INTERNAL":
            api_params["SubnetId"] = cvmInfo["VirtualPrivateCloud"]["SubnetId"]
        if "tag" in self.params and len(json.loads(self.params["tag"])) > 0:
            api_params["Tags"] = [{"TagKey": tag['key'], "TagValue": tag['value']} for tag in json.loads(self.params["tag"])]

        req = models.CreateLoadBalancerRequest()
        req.from_json_string(json.dumps(api_params))

        print(f"创建clb, 接口请求参数为: {json.dumps(api_params)}")

        resp = self.client.CreateLoadBalancer(req)

        print(f"创建clb, 响应为: {resp.to_json_string()}")

        return json.loads(resp.to_json_string())

def main(params):
    account = params["account"]
    region = params["region"]
    key_info = json.loads(subprocess.getoutput(f"c3mc-get-account-info qcloud {account}"))
    params = bpm_merge_user_input_tags(
        instance_params=params,
        product_owner_key_name="product_owner_tag",
        owners_key_name="owners_tag",
        ops_owner_key_name="ops_owner_tag",
        department_key_name="department_tag",
        product_key_name="product_tag",
    )
    print(f"创建clb, 工单请求参数为: {json.dumps(params)}")

    clb = Clb(key_info["access_id"], key_info["access_key"], region, params)
    if subprocess.getoutput("c3mc-sys-ctl sys.bpm.fake.run") == "1":
        print("创建clb, 响应为: xxxxxx")
        print("LOG. clb_id:xxxxxx")
        print("VAR. clb_id:xxxxxx")
        print("VAR. extinstance_id:xx.cc.vv")
    else:
        try:
            resp = clb.create_clb()
            clb_id = resp["LoadBalancerIds"][0]
            vip_list = clb.lib_client.get_vip_of_load_balancer(clb_id)
            vip_str = ",".join(vip_list)

            print(f"LOG. clb_id:{clb_id}")
            print(f"LOG. clb_vip:{vip_str}")
            print(f"VAR. clb_id:{clb_id}")
            print(f'VAR. extinstance_id:{params["account"]}.{params["region"]}.{clb_id}')
        except Exception as e:
            if 'clb_id' in locals():
                clb.lib_client.delete_load_balancer(load_balancer_id_list=[clb_id])
            print(f"创建腾讯云clb出错, err: {e}", file=sys.stderr)
            exit(1)

if __name__ == '__main__':
    l = list(sys.stdin)
    if not l or len(l) > 1:
        raise type('WrongInputData', (Exception,), {})('数据格式不对, 需要一行json字符串"')
    main(json.loads(l[0]))
