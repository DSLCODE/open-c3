#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import json
import sys
import subprocess


sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_cloud_qcloud_vpc import QcloudVpc


def list_network_charge_types(instance_charge_type, access_id, access_key, region):
    bandwith_package_charge_type = {
        "value": "BANDWIDTH_PACKAGE",
        "name": "共享带宽包"
    }
    if region.endswith("-ec"):
        return [ bandwith_package_charge_type ]

    lib_client = QcloudVpc(access_id, access_key, region)
    if_bandwidth_package_user = lib_client.check_if_bandwidth_package_user()
    if_standard_network_account = lib_client.check_if_standard_network_account()

    network_charge_type_list = []
    if instance_charge_type == "PREPAID":
        network_charge_type_list = [
                {"value": "BANDWIDTH_PREPAID", "name": "包月带宽"},
                {"value": "TRAFFIC_POSTPAID_BY_HOUR", "name": "按流量计费"},
            ]

    elif instance_charge_type == "POSTPAID_BY_HOUR":
        network_charge_type_list = [
            {"value": "BANDWIDTH_POSTPAID_BY_HOUR", "name": "按小时带宽"},
            {"value": "TRAFFIC_POSTPAID_BY_HOUR", "name": "按流量计费"},
        ]

    else:
        raise RuntimeError("实例付费类型错误")
    
    if if_bandwidth_package_user:
        if if_standard_network_account:
            network_charge_type_list.append(bandwith_package_charge_type)
        else:
            network_charge_type_list = [ bandwith_package_charge_type ]
    
    return network_charge_type_list


def main(params):
    account = params["account"]
    region = params["region"]
    charge_type = params["charge_type"]
    key_info = json.loads(
        subprocess.getoutput(f"c3mc-get-account-info qcloud {account}")
    )
    network_charge_type_list = list_network_charge_types(charge_type, key_info["access_id"], key_info["access_key"], region)
    for network_charge_type in network_charge_type_list:
        print(json.dumps(network_charge_type))


if __name__ == '__main__':
    l = list(sys.stdin)
    if not l or len(l) > 1:
        raise type('WrongInputData', (Exception,), {})('数据格式不对, 需要一行json字符串"')

    main(json.loads(l[0]))
