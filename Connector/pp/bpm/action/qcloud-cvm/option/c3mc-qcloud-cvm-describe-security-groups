#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import json
import sys
import subprocess

from tencentcloud.common import credential
from tencentcloud.common.profile.client_profile import ClientProfile
from tencentcloud.common.profile.http_profile import HttpProfile
from tencentcloud.vpc.v20170312 import vpc_client, models


class SecurityGroups:
    def __init__(self, access_id, access_key, region, project_id):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.client = self.create_client()
        self.page_number = 1
        self.page_size = 100
        self.project_id = project_id

    def create_client(self):
        cred = credential.Credential(self.access_id, self.access_key)
        httpProfile = HttpProfile()
        httpProfile.endpoint = "vpc.tencentcloudapi.com"

        clientProfile = ClientProfile()
        clientProfile.httpProfile = httpProfile
        return vpc_client.VpcClient(cred, self.region, clientProfile)
    
    def describe_security_groups(self):
        req = models.DescribeSecurityGroupsRequest()
        params = {
            "Filters": [
                {
                    "Name": "project-id",
                    "Values": [ str(self.project_id) ]
                }
            ],
            "Limit": str(self.page_size),
            "Offset": str((self.page_number - 1) * self.page_size)
        }
        req.from_json_string(json.dumps(params))
        return self.client.DescribeSecurityGroups(req).SecurityGroupSet
    
    def show(self):
        result = []
        for i in range(1, sys.maxsize):
            self.page_number = i
            data = self.describe_security_groups()
            if len(data) == 0:
                break
            result.extend(data)

        for item in result:
            print(item)


def main(params):
    account = params["account"]
    region = params["region"]
    project_id = params["project_id"]

    key_info = json.loads(
        subprocess.getoutput(f"c3mc-get-account-info qcloud {account}")
    )
    SecurityGroups(key_info["access_id"], key_info["access_key"], region, project_id).show()


if __name__ == '__main__':
    l = list(sys.stdin)
    if not l or len(l) > 1:
        raise type('WrongInputData', (Exception,), {})('数据格式不对, 需要一行json字符串"')

    main(json.loads(l[0]))

