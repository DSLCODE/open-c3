#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess


sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_utils import check_if_params_safe_in_recycle
from c3mc_cloud_qcloud_cdb import QcloudCdb

supported_operate_types = [
    "isolate",
    "release_isolate",
    "terminate"
]


class OperateCdb:
    def __init__(self, access_id, access_key, region):
        self.lib_client = QcloudCdb(access_id, access_key, region)

    def run(self, operate_type, instance_identifier, if_delete_backup):
        if operate_type == "isolate":
            self.lib_client.isolate_db_instance(instance_identifier)

            try:
                self.lib_client.wait_cdb_until_status(instance_identifier, 5, 900)
            except Exception as e:
                raise RuntimeError(f"隔离实例 {instance_identifier} 出现错误") from e

            print(f"成功隔离实例: {instance_identifier}")
        elif operate_type == "release_isolate":
            self.lib_client.release_isolate_db_instance([instance_identifier])

            try:
                self.lib_client.wait_cdb_until_status(instance_identifier, 1, 900)
            except Exception as e:
                raise RuntimeError(f"解除隔离实例 {instance_identifier} 出现错误") from e

            print(f"成功解除隔离实例: {instance_identifier}")
        elif operate_type == "terminate":
            try:
                # 判断资源是否存在
                self.lib_client.describe_db_instances(instance_identifier)

                self.lib_client.delete_cdb_instance([instance_identifier], if_delete_backup)

                # 如果资源已删除则查询出错
                self.lib_client.describe_db_instances(instance_identifier)
            except Exception as e:
                # 如果上面成功下线了数据库实例，这里查询的使用应该报 list index out of range 错误
                if "list index out of range" not in str(e):
                    raise RuntimeError(f"下线实例 {instance_identifier} 出现错误") from e

            print(f"成功下线实例: {instance_identifier}, 是否删除手动备份: {if_delete_backup}")
        else:
            raise RuntimeError(f"不支持的操作类型: {operate_type}")


def get_instance_uuid(instance_maybe_identifier):
    command = f"c3mc-device-find-uuid {instance_maybe_identifier}"
    result = subprocess.check_output(command, shell=True)
    parts = result.decode("utf-8").strip().split()
    if len(parts) > 1:
        print(f"通过命令 {command} 查询到了多个uuid {parts}", file=sys.stderr)
        exit(1)
    return parts[0]


def main(params):
    print("params = ", json.dumps(params))

    operate_type = params["operate_type"]

    if operate_type not in supported_operate_types:
        raise RuntimeError(f"不支持的操作类型: {operate_type}")

    field_name_list = subprocess.getoutput(
        "c3mc-cloud-get-real-field database qcloud-cdb InstanceId account Region"
    ).split()

    instance_identifier_list = params["cdb_instance_ids"].split(",")
    if operate_type in ["release_isolate", "terminate"]:
        check_if_params_safe_in_recycle(instance_identifier_list, params["bpm_uuid"], "qcloud-cdb-recycle")

    for instance_identifier in instance_identifier_list:
        instance_identifier = instance_identifier.strip()
        if instance_identifier == "":
            continue

        instance_real_uuid = get_instance_uuid(instance_identifier)

        query_cmd = f"c3mc-device-cat curr database qcloud-cdb {instance_real_uuid} | c3mc-base-tab2json"
        print(f"实例信息, uuid: {instance_real_uuid}, 查询命令: {query_cmd}")
        resource_info_str = subprocess.getoutput(query_cmd)
        if operate_type == "terminate" and resource_info_str.strip() == "":
            # 可能工单中途有错误，某些资源在云端已被删除，并且本地经过同步后也删除了相关实例
            continue

        resource_info = json.loads(resource_info_str.split("\n")[0])

        key_info = json.loads(subprocess.getoutput(
            f"c3mc-get-account-info qcloud {resource_info[field_name_list[1]]}"))

        cdb = OperateCdb(key_info["access_id"], key_info["access_key"], resource_info[field_name_list[2]])
        if_delete_backup = False
        if operate_type == "terminate" and params["if_delete_backup"] == "是":
            if_delete_backup = True

        cdb.run(operate_type, instance_real_uuid, if_delete_backup)


if __name__ == '__main__':
    l = list(sys.stdin)
    if not l or len(l) > 1:
        raise RuntimeError("数据格式不对, 需要一行json字符串")

    main(json.loads(l[0]))
