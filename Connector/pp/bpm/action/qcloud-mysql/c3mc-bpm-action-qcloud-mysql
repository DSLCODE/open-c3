#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess
import os
import time
import yaml

from tencentcloud.common import credential
from tencentcloud.common.profile.client_profile import ClientProfile
from tencentcloud.common.profile.http_profile import HttpProfile
from tencentcloud.cdb.v20170320 import cdb_client, models

sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_cloud_qcloud_cdb import QcloudCdb
from c3mc_utils import bpm_merge_user_input_tags, generate_password, safe_run_pipe_command



class Mysql:
    def __init__(self, access_id, access_key, region, params):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.params = params
        self.client = self.create_client()
        self.lib_qcloud_cdb = QcloudCdb(self.access_id, self.access_key, self.region)

    def create_client(self):
        cred = credential.Credential(
            self.access_id, self.access_key)
        httpProfile = HttpProfile()
        httpProfile.endpoint = "cdb.tencentcloudapi.com"

        clientProfile = ClientProfile()
        clientProfile.httpProfile = httpProfile
        return cdb_client.CdbClient(cred, self.region, clientProfile)

    def get_bool_value(self, text_bool):
        return text_bool == "是"

    def get_request(self, root_password):
        req = models.CreateDBInstanceHourRequest()
        if self.params["charge_type"] == "包年包月":
            req = models.CreateDBInstanceRequest()

        api_params = {
            # MySQL 版本
            "EngineVersion": self.params["engine_version"],
            # 私有网络 ID
            "UniqVpcId": self.params["vpc_id"],
            # 私有网络下的子网 ID
            "UniqSubnetId": self.params["subnet_id"],
            # 项目 ID
            "ProjectId": int(self.params["project_id"]),
            # 实例数量
            "GoodsNum": int(self.params["count"]),
            # 内存
            "Memory": int(self.params["instance_config"]),
            # 硬盘
            "Volume": int(self.params["disk_size"]),
            # 可用区
            "Zone": self.params["zone"],
            # 实例类型
            # "InstanceRole": self.params["instance_role"],
            # 购买灾备实例和只读实例会导致参数过于复杂，目前只支持创建主实例，后需有需求在考虑增加只读或者灾备实例
            "InstanceRole": "master",
            # 自定义端口
            "Port": int(self.params["port"]),
            # 设置 root 帐号密码
            "Password": root_password,
            # "ParamList": [
            #     {
            #         # 字符集
            #         "Name": "character_set_server",
            #         "Value": self.params["charset_type"]
            #     },
            #     {
            #         # 排序规则
            #         "Name": "collation_server",
            #         "Value": self.params["charset_sort_type"]
            #     },
            #     {
            #         # 表名大小写敏感
            #         "Name": "lower_case_table_names",
            #         "Value": self.params["lower_case_table_names"]
            #     }
            # ],
            # 实例引擎类型
            "EngineType": self.params["engine_type"],
            # 参数模板
            "ParamTemplateId": int(self.params["param_template_id"]),
        }

        # 配置安全组
        if self.get_bool_value(self.params["if_set_security_group"]):
            api_params["SecurityGroup"] = self.params["security_group_ids"].split(",")

        # 配置告警策略名数组
        if self.get_bool_value(self.params["if_set_alarm_policies"]):
            api_params["AlarmPolicyIdList"] = self.params["alarm_policies"].split(",")


        if "tag" in self.params:
            tag_list = json.loads(self.params["tag"])
            if len(tag_list) > 0:
                api_params["ResourceTags"] =  [
                    {"TagKey": tag['key'], "TagValue": [tag['value']]} for tag in tag_list
                ]

        # 实例节点数
        api_params["InstanceNodes"] = int(self.params["instance_nodes"])
        # 设置备库
        if api_params["InstanceNodes"] == 2:
            api_params["SlaveZone"] = self.params["backup_zone1"]
        if api_params["InstanceNodes"] == 3:
            api_params["SlaveZone"] = self.params["backup_zone1"]
            api_params["BackupZone"] = self.params["backup_zone2"]
        
        instance_name_prefix = self.params["instance_name"]
        if api_params["InstanceNodes"] > 1:
            # 数据复制方式
            api_params["ProtectMode"] = int(self.params["protect_mode"])
            # 如果多实例时并且可用区不一致，需要加上多可用区参数
            s = {
                self.params["zone"],
                self.params["backup_zone1"],
                self.params["backup_zone2"],
            }
            if len(s) > 1:
                api_params["DeployMode"] = 1

        # 实例名称前缀
        api_params["InstanceName"] = instance_name_prefix

        if self.params["charge_type"] == "包年包月":
            # 购买时长
            # api_params["Period"] = int(self.params["instance_charge_count"])
            api_params["Period"] = 1
            # 自动续费标记
            # api_params["AutoRenewFlag"] = int(self.params["auto_renew_flag"])
            api_params["AutoRenewFlag"] = 1

        req.from_json_string(json.dumps(api_params))
        return req
    

    def wait_for_cdb_running(self, instance_id, timeout=1800):
        """
        等待cdb变为运行状态

        等待变为运行状态时间较长, 超时时间设置为半小时
        """
        start_time = time.time()
        while True:
            cdb_info = self.lib_qcloud_cdb.describe_db_instances(instance_id)
            if cdb_info["Status"] == 1:
                return True
            elif time.time() - start_time > timeout:
                return False
            else:
                time.sleep(5)


    def open_wan_service(self, instance_id):
        if not self.wait_for_cdb_running(instance_id):
            raise RuntimeError(f"开通外网访问失败. instance_id: {instance_id}, 原因: 等待实例变为运行状态超时, 超时时间30分钟")

        cdb_info = self.lib_qcloud_cdb.describe_db_instances(instance_id)
        # 假如工单中途出错，可能部分实例已经成功开通了外网访问
        if cdb_info["WanStatus"] == 1:
            return 
        res = self.lib_qcloud_cdb.open_wan_service(instance_id)
        print(f"开通外网访问成功. instance_id: {instance_id}, 结果: {json.dumps(res, default=str)}")
    
    def get_root_account_password(self):
        root_password = ""
        root_password_source_type = self.params["root_password_source_type"]

        if root_password_source_type == "default":
            root_password = subprocess.getoutput("c3mc-sys-ctl sys.resource.create.qcloud_cdb.root_account_password")
        elif root_password_source_type == "random": 
            root_password = generate_password(16)
        else:
            root_password = self.params["root_password"]
        
        root_password = root_password.strip()
        if root_password == "":
            raise RuntimeError("root密码不允许为空")
        
        return root_password
    
    def get_monitor_account_and_password(self):
        monitor_account = subprocess.getoutput("c3mc-sys-ctl sys.resource.create.qcloud_cdb.monitor_account_name").strip()
        if not monitor_account:
            raise RuntimeError("监控账号不允许为空")
    
        monitor_password = ""

        monitor_password_source_type = self.params["monitor_password_source_type"]
        if monitor_password_source_type == "default":
            monitor_password = subprocess.getoutput("c3mc-sys-ctl sys.resource.create.qcloud_cdb.monitor_account_password")
        elif monitor_password_source_type == "random": 
            monitor_password = generate_password(16)
        else:
            monitor_password = self.params["monitor_password"]
    
        monitor_password = monitor_password.strip()
        if monitor_password == "":
            raise RuntimeError("监控账号密码不允许为空")
        
        return monitor_account, monitor_password

    def loadpasswd(self, password_str, command):
        """将数据库的账号密码信息写入到cmdb

        Args:
            password_str (str): 拼接起来的数据库地址账号密码字符串
            command (str): 保存密码的命令
        """
        args = [password_str]
        proc = subprocess.Popen([command], stdin=subprocess.PIPE, stdout=subprocess.PIPE)

        for arg in args:
            proc.stdin.write(arg.encode())
            proc.stdin.write(b"\n")
            proc.stdin.flush()

        _, errors = proc.communicate()
        if proc.returncode != 0:
            print(f"Command failed with error: {errors.decode()}")
            exit(1)

    def create_monitor_account(self, instance_id, monitor_account, monitor_password):
        """创建监控账号

        Args:
            instance_id (str): 数据库实例id
            monitor_account (str): 数据库监控账号
            monitor_password (str): 数据库监控账号密码
        """
        self.lib_qcloud_cdb.create_accounts(instance_id, monitor_account, "%", monitor_password)

        data = subprocess.getoutput("c3mc-sys-ctl sys.resource.create.qcloud_cdb.monitor_account_global_privileges").strip()
        if not data:
            raise RuntimeError("监控账号的权限不允许为空")
        self.lib_qcloud_cdb.modify_account_privileges(instance_id, monitor_account, "%", data.split(","))

    def get_template_ingestion_addr(self):
        """获取cmdb同步配置文件里的摄取地址配置
        """
        cdb_template_file = "/data/Software/mydan/AGENT/device/conf/template/sync-qcloud-cdb.yml"
        with open(cdb_template_file, 'r') as file:
            data = yaml.safe_load(file)
            addr = data["download"][0]["ingestion-mysql"]["addr"]
            if len(addr) != 2:
                raise RuntimeError("从cmdb配置文件提取字段出错")

            return addr[0], addr[1]
    
    def save_account_and_pass_to_cmdb(self, instance_id, addr_field, port_field, account, password, command):
        """将数据库实例的账号密码保存到cmdb

        Args:
            instance_id (str): 数据库实例的id
            addr_field (str): 摄取地址字段的名称(cdb详情中的某个地址字段)
            port_field (str): 摄取端口字段的名称(cdb详情中的某个端口字段)
            account (str): 账号
            password (str): 密码
            command (str): 保存密码的命令
        """
        cdb_info = self.lib_qcloud_cdb.describe_db_instances(instance_id)
        self.loadpasswd(f"{cdb_info[addr_field]}:{cdb_info[port_field]};{account};{password}", command)

    
    def create(self):
        self.params = bpm_merge_user_input_tags(
            instance_params=self.params,
            product_owner_key_name="product_owner_tag",
            ops_owner_key_name="ops_owner_tag",
            department_key_name="department_tag",
            product_key_name="product_tag",
            tree_key_name="tree_tag",
        )

        root_password = self.get_root_account_password()
        req = self.get_request(root_password)
        print(f"创建cdb, 请求参数为: {req}")

        if subprocess.getoutput("c3mc-sys-ctl sys.bpm.fake.run") == "1":
            # bpm虚假运行
            print("创建cdb, 响应为: xxxxxx")
            print("LOG. instance_id:xxxxxx")
            print("VAR. instance_id:xxxxxx")
            print(f'VAR. extinstance_id:{self.params["account"]}.{self.params["region"]}.xxxxx')
            return 

        try: 
            if self.params["charge_type"] == "按量计费":
                # 创建按量计费实例
                resp = self.client.CreateDBInstanceHour(req)
            else:
                # 创建包年包月实例
                resp = self.client.CreateDBInstance(req)
        except Exception as e:
            print(f"创建cdb实例出错, err: {e}", file=sys.stderr)
            exit(1)

        print(f"创建cdb, 响应为: {resp.to_json_string()}")

        try: 
            cdb_addr_field, cdb_pord_field = self.get_template_ingestion_addr()

            for instance_id in resp.InstanceIds:
                print(f"对 {instance_id} 进行密码存储...")
                password_data = {
                    "root": root_password,
                }
                if self.get_bool_value(self.params["if_create_monitor_account"]):
                    # 等待实例从创建中变为运行中状态
                    self.lib_qcloud_cdb.wait_cdb_until_status(instance_id, 1, 900)
                    monitor_account, monitor_password = self.get_monitor_account_and_password()
                    self.create_monitor_account(instance_id, monitor_account, monitor_password)
                    # 保存监控账号密码
                    password_data[monitor_account] = monitor_password
                    self.save_account_and_pass_to_cmdb(instance_id, cdb_addr_field, cdb_pord_field, monitor_account, monitor_password, "/usr/bin/c3mc-device-loadpasswd-mysql")

                # 将root账号密码保存到类似如下示例的目录中，这样资源详情里可以加载到账号密码
                # /data/open-c3-data/device/curr/auth/database-qcloud-cdb
                safe_run_pipe_command(
                    [
                        [
                            "echo",
                            f"database;qcloud-cdb;{instance_id};root/{root_password}"
                        ],
                        ["c3mc-device-loadpasswd-auth-v2"],
                    ]
                )

                if self.params["if_need_open_wan"] == "是":
                    self.open_wan_service(instance_id)
                
                print(f"LOG. instance_id:{instance_id}")
                print(f"VAR. instance_id:{instance_id}")
                print(f'VAR. extinstance_id:{self.params["account"]}.{self.params["region"]}.{instance_id}')
        except Exception as e:
            # 如果出现任何异常，则立即删除所有已创建的cdb实例
            self.lib_qcloud_cdb.delete_cdb_instance(resp.InstanceIds, False)
            raise RuntimeError("处理cdb实例出错") from e


def main(params):
    print(f"params = {json.dumps(params)}")

    account = params["account"]
    region = params["region"]

    key_info = json.loads(
        subprocess.getoutput(f"c3mc-get-account-info qcloud {account}")
    )
    Mysql(key_info["access_id"], key_info["access_key"], region, params).create()


if __name__ == '__main__':
    l = list(sys.stdin)
    if not l or len(l) > 1:
        raise type('WrongInputData', (Exception,), {})('数据格式不对, 需要一行json字符串"')

    main(json.loads(l[0]))
