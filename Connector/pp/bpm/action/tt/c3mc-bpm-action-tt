#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess
import re
import base64
import os
import time


sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_utils import safe_run_command, duplicate_file, safe_run_command_v2


def replace_base64_substring(long_string):
    base64_regex = r'base64__\s*([\s\S]*?)__base64'
    matches = re.findall(base64_regex, long_string)

    for match in matches:
        base64_string = match
        decoded_bytes = base64.b64decode(base64_string)
        decoded_string = decoded_bytes.decode('utf-8')
        string_with_colon = f': {decoded_string}'
        long_string = long_string.replace(f'base64__{match}__base64', string_with_colon)

    return long_string


def upload_attach(tt_number, target_file_path):
    output = safe_run_command([
        "c3mc-upload-attach-for-ticket",
        "--tt_id", tt_number.lstrip("T").lstrip("0"),
        "--file_path", target_file_path,
    ])


def get_tt_content(params):
    """不同工单的内容可能不一样，这里在发起tt工单之前对content字段做必要的修改
    """
    content = params["content"]
    return (
        '\n'.join(
            [
                line
                for line in content.split('\n')
                if not line.startswith("SQL语句")
            ]
        )
        if "SQL操作" in params["title"] and params["sql_input_type"] == "上传附件"
        else replace_base64_substring(content)
    )


def upload_attach_if_need(tt_number, params):
    if "SQL操作" in params["title"] and params["sql_input_type"] == "上传附件":

        # params['sql_file'] 值格式示例 3d5102051bc97b129de27f0895e35973:test_sql.sql
        parts = params['sql_file'].split(':')

        if len(parts) < 2:
            # 出现这种情况是因为用户选择了上传附件，但是并没有上传附件
            return
            
        target_file_path, clean_file = duplicate_file(
            f"/data/open-c3-data/bpm/attachments/{parts[0]}", 
            f"/data/open-c3-data/bpm/attachments/{parts[1]}"
        )
        upload_attach(tt_number, target_file_path)
        clean_file()


def create_tt_ticket(apply_user, submit_user, title, content, ext_tt):
    try:
        resp_bytes = subprocess.check_output(
            [
                "c3mc-create-ticket", 
                "--submit_user", submit_user, 
                "--apply_user", apply_user, 
                "--title", title, 
                "--ext_tt", ext_tt,
            ], 
            input=content.encode(), 
            stderr=subprocess.STDOUT  # 将标准错误输出合并到标准输出
        )

        tt_number = resp_bytes.decode('utf-8').rstrip()
        print(f"创建tt命令输出: {tt_number}")
        return tt_number

    except subprocess.CalledProcessError as e:
        print(f"创建tt命令出错, 返回码: {e.returncode}")
        print(f"错误输出: {e.output.decode('utf-8').rstrip()}", file=sys.stderr)
        raise RuntimeError("创建tt出错") from e


def wait_tt_finish(tt_number, ext_tt):
    while True:
        code, output, err = safe_run_command_v2([
            "c3mc-wait-ticket-status-change",
            "--number", tt_number,
            "--ext_tt", ext_tt,
        ])
        print(f"LOG. tt结束, 单号: {tt_number}, 状态: {output}")
        if code == 0:
            break
        else:
            time.sleep(5)


def run(params):
    print("params = ", json.dumps(params))

    content = get_tt_content(params)

    submit_user = params['submit_user'] if 'submit_user' in params else "sys@app"
    ext_tt = subprocess.getoutput("c3mc-sys-ctl sys.bpm.tt.type")

    tt_number = create_tt_ticket(params["apply_user"], submit_user, params["title"], content, ext_tt)

    print(f"LOG. tt单号: {tt_number}")

    upload_attach_if_need(tt_number, params)

    notify = params.get("notify")
    if not notify:
        notify = "@bpm_notify"

    os.system( "echo 有工单需要处理, [ " + params["title"]  + " ] $(c3mc-sys-ctl sys.c3webaddr)/tt/#/tt/show/" + tt_number + "|c3mc-base-sendmesg $(c3mc-app-usrext bpm_notify @bpm_notify " + notify + "|xargs -n 10000)" )

    print(flush=True)

    wait_tt_finish(tt_number, ext_tt)


def main(params):
    run(params)
    

if __name__ == '__main__':
    l = list(sys.stdin)
    if not l or len(l) > 1:
        raise type('WrongInputData', (Exception,), {})('数据格式不对, 需要一行json字符串"')
    
    main(json.loads(l[0]))
