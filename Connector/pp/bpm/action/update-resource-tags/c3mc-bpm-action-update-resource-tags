#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess
import threading
import time


# 批量修改资源标签工单中，设置最大并发线程数
#
# 腾讯云修改标签接口允许每秒最大请求次数20
# 假如下面设置的并发数超过了其他云资源的最大请求次数
# 该数值还要继续调低
MAX_CONCURRENT = 18

# 如果标签 key 以如下数组中任意元素开头，就直接被跳过处理
ignored_key_prefix = [
    "acs:",   # 这是阿里云打在资源上的系统标签，更新或者删除系统标签都会报错
]

# 如果标签 value 以如下数组中任意元素开头，就直接被跳过处理
ignored_value_prefix = [
    "空",
]


def is_prefix_match(prefix, string_list):
    return any(s.startswith(prefix) for s in string_list)


def update_instance_tag(instance_id, tags_str):
    cmd_parts = []
    cmd_parts = [
        "c3mc-cloud-control",
        "--uuid", instance_id,
        "--ctrl", "tag-add", tags_str
    ]

    output = subprocess.run(cmd_parts, capture_output=True, text=True)
    if output.returncode != 0:
        print(f"运行的命令是: {' '.join(cmd_parts)}")
        print(f"标签更新失败, 实例ID: {instance_id}",
                output.stderr, file=sys.stderr)
        exit(1)
        return

    print(f"成功更新实例 {instance_id} 的标签, 标签字符串: {tags_str}\n")


def update_tags(filepath):
    try:
        result = subprocess.run(
            # f"tail -n +2 {filepath} |c3mc-parse-tsv-tag-file --idindex 0 --tagindex 1",
            f"cat {filepath} | c3mc-parse-tsv-tag-file --idindex 0 --tagindex 1",
            shell=True,
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
    except subprocess.CalledProcessError as error:
        raise type('ExceptionForCallParseTsv', (Exception,), {})(
            "获取标签列表出错.") from error

    data_list = result.stdout.decode().split("\n")
    threads = []

    m = {}
    for item in data_list:
        if item == "":
            continue
        parts = item.split("\t")
        if len(parts) != 3:
            print(f"格式不对, 每一行需要包含 实例id key value 三部分, 原始数据为: {item}", file=sys.stderr)
            continue

        instance_id = parts[0]
        key = parts[1]
        value = parts[2]

        if is_prefix_match(key, ignored_key_prefix):
            continue
        if is_prefix_match(value, ignored_value_prefix):
            continue

        if instance_id not in m:
            m[instance_id] = f"{key}={value}"
        else:
            m[instance_id] += f",{key}={value}"

    for instance_id, tags_str in m.items():
        while threading.active_count() >= MAX_CONCURRENT:
            time.sleep(0.1)

        t = threading.Thread(target=update_instance_tag,
                             args=(instance_id, tags_str))
        t.daemon = True
        t.start()
        threads.append(t)

    # 等待所有线程结束
    for t in threads:
        t.join()


def main(params):
    filepath = params["filepath"]
    update_tags(filepath)


if __name__ == '__main__':
    l = list(sys.stdin)
    if not l or len(l) > 1:
        raise type('WrongInputData', (Exception,), {})('数据格式不对, 需要一行json字符串"')

    main(json.loads(l[0]))
