#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import fnmatch
import os


def find_files_with_pattern(path_pattern):
    result = []
    for root, dirs, files in os.walk(os.path.dirname(path_pattern)):
        result.extend(
            os.path.abspath(os.path.join(root, name))
            for name in files
            if fnmatch.fnmatchcase(name, f'{os.path.basename(path_pattern)}.*')
        )
    return result


def get_account_from_file(account_file, account):
    with open(account_file) as fp:
        for line in fp:
            parts = line.split()
            if len(parts) == 0:
                continue
            if parts[0].strip() == account:
                return {
                    "access_id": parts[1].strip(),
                    "access_key": parts[2].strip(),
                }
        return None


def describe_account_info(cloud, account):
    """
        查询指定账号的信息
    """

    default_account_file = (
        f"/data/Software/mydan/AGENT/device/conf/account/{cloud.lower()}")

    account_info = None
    if os.path.exists(default_account_file):
        account_info = get_account_from_file(default_account_file, account)

    if account_info is None:
        ext_account_file_list = find_files_with_pattern(default_account_file)
        if len(ext_account_file_list) > 0:
            account_info = get_account_from_file(ext_account_file_list[0], account)
    if account_info is not None:
        return account_info
    raise Exception(f"无法找到指定账号的信息. cloud: {cloud}, account: {account}")


def main(cloud, account):
    data = describe_account_info(cloud, account)
    print(json.dumps(data, default=str))


if __name__ == '__main__':
    main(sys.argv[1], sys.argv[2])
