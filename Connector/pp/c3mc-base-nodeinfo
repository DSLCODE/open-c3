#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib
use strict;
use warnings;

binmode STDIN, ':utf8';
binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';

$|++;

use MYDB;
use MYDan::Util::OptConf;
use LWP::UserAgent;
use JSON;
use Configini;

=head1 SYNOPSIS

 $0 col1 col2 .. col2 [ --col name,inip [id|name|type|inip|exip|projectid] ]

=cut

my $option = MYDan::Util::OptConf->load();
my %o = $option->set( col => 'name,inip' )->get( qw( col=s ) )->dump();

my @col = split /,/, $o{col};

my ( $nodeinfo, %env );
$nodeinfo = Configini::get( 'nodeinfo' );
%env = Configini::env( 'nodeinfoenv' );

sub nodeinfo
{
    my $id = shift @_;
    die unless $id =~ /^\d+$/;

    if( $nodeinfo =~ /api.connector.open-c3.org/ )
    {
        my $db = MYDB->new( "/data/Software/mydan/Connector/conf/conn" );
        my $x = eval{ $db->query( sprintf "select $o{col} from openc3_connector_nodelist where projectid=$id and status='available'" ); };
        die $@ if $@;
        map{ printf "%s\n", join ';', @$_ }@$x;
        return;
    }

    my $ua = LWP::UserAgent->new;
    $ua->timeout( 5 );
    $ua->default_header( %env ) if %env;

    my $res = $ua->get( "${nodeinfo}$id" );

    my $err = "get nodeinfo fail: ${nodeinfo}$id";
    die sprintf( "$err: code %s", $res->code ) unless $res->is_success;

    my $v = eval{JSON::decode_json $res->decoded_content};
    die "$err: data no JSON: $@" if $@;
    die sprintf( "$err: info: %s", $v->{info}|'' ) unless $v->{stat};
    die "$err: data no ARRAY" unless $v->{data} && ref $v->{data} eq 'ARRAY';

    for my $t ( @{$v->{data}} )
    {
        $t->{projectid} = $id;
        printf "%s\n", join ';', map{ $t->{$_} || '' }@col;
    }
}

if( @ARGV ) { map{ nodeinfo( $_ ) }@ARGV; } else { while(<STDIN>){ chomp; nodeinfo($_); } }
