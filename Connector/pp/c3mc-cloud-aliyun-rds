#!/usr/bin/env python
# -*- coding: utf-8 -*-

import json
import sys
from aliyunsdkcore.client import AcsClient
from aliyunsdkrds.request.v20140815.DescribeDBInstancesRequest         import DescribeDBInstancesRequest
from aliyunsdkrds.request.v20140815.DescribeDBInstanceAttributeRequest import DescribeDBInstanceAttributeRequest

class RDS():
    def __init__(self, access_id, access_key, region):
        self.region = region
        self.access_id = access_id
        self.access_key = access_key
        self.page_number = 1
        self.page_size   = 5 
        self.client = self.create_client()

    def create_client(self):
        client = AcsClient(self.access_id, self.access_key, self.region)
        return client

    def set_desc_request(self):
        request = DescribeDBInstancesRequest()
        request.set_accept_format('json')
        request.set_PageNumber(self.page_number)
        request.set_PageSize(self.page_size)
        return request

    def get_desc_response(self):
        response_data = {}
        err = None
        request = self.set_desc_request()
        try:
            response = self.client.do_action_with_exception(request)
            response_data = json.loads(response)
        except Exception as e:
            err = e

        return response_data, err

    def get_rds_count(self):
        response_data, err = self.get_desc_response()
        if err != None:
            sys.stdout.write('error', err )
            return False
        count = response_data['TotalRecordCount']
        return count

    def get_db_instance_id(self):
        response_data, err = self.get_desc_response()
        if err != None: return False
        rds_data = response_data['Items']['DBInstance']
        if not rds_data: return False
        db_instanceid_list = []
        for i in rds_data:
            db_instanceid_list.append(i.get('DBInstanceId'))

        return db_instanceid_list

    def get_attribute_response(self):
        instance_id_list = self.get_db_instance_id()
        if not isinstance(instance_id_list, list):
            raise TypeError

        rds_attribute_data_list = []
        try:
            request = DescribeDBInstanceAttributeRequest()
            request.set_accept_format('json')
            for instance_id in instance_id_list:
                request.set_DBInstanceId(instance_id)
                response = self.client.do_action_with_exception(request)
                response_data = json.loads(response)
                rds_attribute_data = response_data['Items']['DBInstanceAttribute'][0]
                rds_attribute_data_list.append(rds_attribute_data)

            return rds_attribute_data_list
        except Exception as e:
            print(e)
            return False

    def show(self):
        rds_attribute_data_list = self.get_attribute_response()

        if not rds_attribute_data_list:
            sys.stdout.write('nofind rds')
            return False

        for i in rds_attribute_data_list:
            print json.dumps(i)

    def page(self):
        count = self.get_rds_count()
        self.page_size = 100
        mod = count % self.page_size
        if mod:
            total_page_number = int( count / self.page_size ) + 1
        else:
            total_page_number = int( count / self.page_size )
        for cur_page_number in range( 1, total_page_number + 1 ):
            self.page_number = cur_page_number
            self.show()

def main( access_id, access_key, region ):
    obj = RDS(access_id, access_key, region)
    obj.page()


if __name__ == '__main__':
    main( sys.argv[1], sys.argv[2], sys.argv[3] )
