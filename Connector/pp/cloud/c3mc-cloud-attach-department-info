#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-


import sys
import json
import yaml
import time


sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_utils import safe_run_command


def get_cmdb_sync_interval():
    interval_str = safe_run_command(["c3mc-sys-ctl", "sys.device.sync.interval"])

    if interval_str.isdigit():
        return int(interval_str)  # The string represents an integer

    try:
        return float(interval_str)  # The string represents a float
    except Exception as e:
        raise RuntimeError(f"参数类型错误，无法转换为数字类型: {interval_str}") from e


def get_department_info(user_email):
    sync_interval = get_cmdb_sync_interval()

    data = None

    now = time.time()
    while True:
        if time.time() - now > sync_interval:
            exit(1)
        try:
            output = safe_run_command(["c3mc-base-userinfo", "-u", user_email])
            data = yaml.safe_load(output)
            break
        except Exception as e:
            print(f"无法获取账号 {user_email} 的部门信息, err: {str(e)}", file=sys.stderr)
            # 如果获取用户部门信息时出现错误，在cmdb本次同步周期内持续查询
            time.sleep(5)
            continue
    
    if "oneDeptName" not in data or not data["oneDeptName"] or not data["oneDeptName"].strip():
        data["oneDeptName"] = "unknow"

    if "twoDeptName" not in data or not data["twoDeptName"] or not data["twoDeptName"].strip():
        data["twoDeptName"] = "unknow"

    if "sybDeptName" not in data or not data["sybDeptName"] or not data["sybDeptName"].strip():
        data["sybDeptName"] = "unknow"
    
    return data


def run(data_list):
    m = {}
    for index, item in enumerate(data_list):
        if "_product_owner_" not in item:
            data_list[index]["_oneDeptName_"] = "unknow"
            data_list[index]["_twoDeptName_"] = "unknow"
            data_list[index]["_sybDeptName_"] = "unknow"
        
        else:
            product_owner = item["_product_owner_"]

            if product_owner not in m:
                m[product_owner] = get_department_info(product_owner)

            data_list[index]["_oneDeptName_"] = m[product_owner]["oneDeptName"]
            data_list[index]["_twoDeptName_"] = m[product_owner]["twoDeptName"]
            data_list[index]["_sybDeptName_"] = m[product_owner]["sybDeptName"]

    return data_list

def display(data_list):
    data_list = run(data_list)
    for item in data_list:
        print(json.dumps(item, default=str))
    

def main(data_list):
    display(data_list)


if __name__ == '__main__':
    """往data_list中插入业务负责人的一级部门和二级部门信息

    注意: 查找业务负责人时依赖 _product_owner_ 字段。而 c3mc-cloud-tag-v2 脚本负责往数据中插入 _product_owner_ 字段
    所在在管道调用中, 该脚本应该放在 c3mc-cloud-tag-v2 的后面执行
    """
    data_list = [json.loads(line) for line in sys.stdin]
    main(data_list)
