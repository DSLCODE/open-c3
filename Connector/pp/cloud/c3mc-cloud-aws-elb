#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import json

import boto3


class Elb:
    def __init__(self, access_id, access_key, region):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.client = self.create_client()
        self.page_size = 20

    def create_client(self):
        client = boto3.client(
            "elb",
            aws_access_key_id=self.access_id,
            aws_secret_access_key=self.access_key,
            region_name=self.region,
        )
        return client

    def get_instances_from_response(self, response_data):
        return response_data["LoadBalancerDescriptions"]

    def list_instances(self):
        name_tag_dict = {}
        next_marker = ""
        result = []

        res = self.get_data("")
        if res["name_tag_dict"] is not None:
            name_tag_dict = dict(list(name_tag_dict.items()) +
                                 list(res["name_tag_dict"].items()))
        result.extend(res["data_list"])
        next_marker = res["next_marker"]

        while next_marker != "":
            res = self.get_data(next_marker)
            if res["name_tag_dict"] is not None:
                name_tag_dict = dict(list(name_tag_dict.items()) +
                                     list(res["name_tag_dict"].items()))
            result.extend(res["data_list"])
            next_marker = res["next_marker"]

        for i, s in enumerate(result):
            if s["LoadBalancerName"] in name_tag_dict:
                result[i]["Tag"] = name_tag_dict[s["LoadBalancerName"]]
        return result

    def get_data(self, next_marker=""):
        response = None
        if next_marker == "":
            response = self.client.describe_load_balancers(
                PageSize=self.page_size)
        else:
            response = self.client.describe_load_balancers(
                PageSize=self.page_size, Marker=next_marker)
        loadBalancerNames = []
        data_list = self.get_instances_from_response(response)
        for instance in data_list:
            loadBalancerNames.append(instance["LoadBalancerName"])

        d = self.list_tag(
            self.access_id, self.access_key, self.region, loadBalancerNames)

        res = {
            "next_marker": "",
            "data_list": data_list,
            "name_tag_dict": d
        }
        if "NextMarker" in response:
            res["next_marker"] = response["NextMarker"]
        return res

    def list_tag(self, access_id, access_key, region, loadBalancerNames):
        sys.path.append("/data/Software/mydan/Connector/lib/pp")
        from c3mc_cloud_aws_elb_get_tag import GetTag
        return GetTag(access_id, access_key, region).list_tag(loadBalancerNames)

    def show(self):
        instance_list = self.list_instances()
        for instance in instance_list:
            print(json.dumps(instance, default=str))


def main(access_id, access_key, region):
    Elb(access_id, access_key, region).show()


if __name__ == '__main__':
    main(sys.argv[1], sys.argv[2], sys.argv[3])
