#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import json

import boto3


class S3:
    def __init__(self, access_id, access_key, region):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.bucket_list = []
        self.client = self.create_client()

    def create_client(self):
        client = boto3.client(
            "s3",
            aws_access_key_id=self.access_id,
            aws_secret_access_key=self.access_key,
            region_name=self.region,
        )
        return client

    def list_tags_of_bucket(self, bucket_name):
        try:
            response = self.client.get_bucket_tagging(
                Bucket=bucket_name,
            )
        except Exception as e:
            return None
        return response["TagSet"]

    def list_buckets(self):
        response = self.client.list_buckets()
        bucket_list = []
        for bucket_info in response["Buckets"]:
            bucket = {
                "BucketName": bucket_info["Name"],
                "CreationDate": bucket_info["CreationDate"],
                "RegionId": self.region,
            }

            tags = self.list_tags_of_bucket(bucket_info["Name"])
            if tags is not None:
                for tag in tags:
                    if tag["Key"].lower() == "name":
                        bucket["Name"] = tag["Value"]
                    if tag["Key"].lower() == "productowner":
                        bucket["ProductOwner"] = tag["Value"]
                    if tag["Key"].lower() == "department":
                        bucket["Department"] = tag["Value"]
                    if tag["Key"].lower() == "opsowner":
                        bucket["OpsOwner"] = tag["Value"]
            bucket_list.append(bucket)

        return bucket_list

    def show(self):
        bucket_list = self.list_buckets()
        for bucket in bucket_list:
            print(json.dumps(bucket, default=str))


def main(access_id, access_key, region):
    S3(access_id, access_key, region).show()


if __name__ == '__main__':
    main(sys.argv[1], sys.argv[2], sys.argv[3])
