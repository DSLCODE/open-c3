#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import json

from tencentcloud.common import credential
from tencentcloud.common.profile.client_profile import ClientProfile
from tencentcloud.common.profile.http_profile import HttpProfile
from tencentcloud.cvm.v20170312 import cvm_client, models


class Cvm:
    def __init__(self, access_id, access_key, region):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.page_number = 1
        self.page_size = 25
        self.client = self.create_client()

    def create_client(self):
        cred = credential.Credential(
            self.access_id, self.access_key)
        httpProfile = HttpProfile()
        httpProfile.endpoint = "cvm.tencentcloudapi.com"

        clientProfile = ClientProfile()
        clientProfile.httpProfile = httpProfile
        client = cvm_client.CvmClient(cred, self.region, clientProfile)
        return client

    def set_request(self):
        req = models.DescribeInstancesRequest()
        req.Limit = self.page_size
        req.Offset = (self.page_number - 1) * self.page_size
        return req

    def get_response(self):
        request = self.set_request()
        response_data = self.client.DescribeInstances(request)
        return response_data

    def get_server_count(self):
        response_data = self.get_response()
        return response_data.TotalCount

    def show(self):
        response_data = self.get_response()
        servers = response_data.InstanceSet
        for server in servers:
            d = json.loads(server.to_json_string())

            public_ip = None
            private_ip = None
            if d["PrivateIpAddresses"] is not None and len(d["PrivateIpAddresses"]) > 0:
                private_ip = d["PrivateIpAddresses"][0]
            if d["PublicIpAddresses"] is not None and len(d["PublicIpAddresses"]) > 0:
                public_ip = d["PublicIpAddresses"][0]
            d["PrivateIP"] = private_ip
            d["PublicIP"] = public_ip
            d["RegionId"] = d["Placement"]["Zone"][:-2]

            print(json.dumps(d))

    def page(self):
        count = self.get_server_count()
        mod = count % self.page_size
        if mod:
            total_page_number = int(count / self.page_size) + 1
        else:
            total_page_number = int(count / self.page_size)

        for cur_page_number in range(1, total_page_number + 1):
            self.page_number = cur_page_number
            self.show()


def main(access_id, access_key, region):
    cvm = Cvm(access_id, access_key, region)
    cvm.page()


if __name__ == '__main__':
    main(sys.argv[1], sys.argv[2], sys.argv[3])
