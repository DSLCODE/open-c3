#!/usr/bin/env python3
# -*- coding: utf-8 -*-


import sys
import json
import subprocess


class HandleTag:
    def __init__(self, data_list, tag_field_name, key_field_name, value_field_name, delimiter):
        self.data_list = data_list
        # 标签字段的名称
        self.tag_field_name = tag_field_name
        self.key_field_name = key_field_name
        self.value_field_name = value_field_name
        # 标签字段为字符串数组时，字符串中kv的分隔符
        # 如果标签字段为对象列表，该字段传None
        self.delimiter = delimiter
        self.product_owner_tag = self.get_product_owner_tag()
        self.ops_owner_tag = self.get_ops_owner_tag()
        self.department_tag = self.get_department_tag()

    def handle_str_tag(self, data, tag_list):
        tag_dict = dict()
        for tag in tag_list:
            if tag.strip() == "":
                continue

            item_list = tag.split(self.delimiter)
            if len(item_list) == 0:
                continue

            if len(item_list) == 1:
                key = item_list[0]
                tag_dict[key] = key

                if "tags" in data:
                    data["tags"] += " {}:{},".format(key, key)
                else:
                    data["tags"] = " {}:{},".format(key, key)
            else:
                key = item_list[0].strip()
                value = ";".join(item_list[1:]).strip()

                if key.lower() == self.product_owner_tag.lower():
                    data["product_owner"] = value
                    tag_dict[self.product_owner_tag] = value
                elif key.lower() == self.ops_owner_tag.lower():
                    data["ops_owner"] = value
                    tag_dict[self.ops_owner_tag] = value
                elif key.lower() == self.department_tag.lower():
                    data["department"] = value
                    tag_dict[self.department_tag] = value
                else:
                    tag_dict[key] = value

                if "tags" in data:
                    data["tags"] += " {}:{},".format(key, value)
                else:
                    data["tags"] = "{}:{},".format(key, value)
        if len(tag_dict) > 0:
            data["tag"] = tag_dict
        if "tags" in data:
            data["tags"] = data["tags"][: -1]
        return data

    def handle_obj_tag(self, data, tag_list):
        tag_dict = dict()
        for tag in tag_list:
            key = tag[self.key_field_name].strip()
            value = tag[self.value_field_name].strip()

            if key.lower() == self.product_owner_tag.lower():
                data["product_owner"] = value
                tag_dict[self.product_owner_tag] = value
            elif key.lower() == self.ops_owner_tag.lower():
                data["ops_owner"] = value
                tag_dict[self.ops_owner_tag] = value
            elif key.lower() == self.department_tag.lower():
                data["department"] = value
                tag_dict[self.department_tag] = value
            else:
                tag_dict[key] = value

            if "tags" in data:
                data["tags"] += " {}:{},".format(key, value)
            else:
                data["tags"] = "{}:{},".format(key, value)

        if len(tag_dict) > 0:
            data["tag"] = tag_dict
        if "tags" in data:
            data["tags"] = data["tags"][: -1]
        return data

    def get_product_owner_tag(self):
        output = subprocess.getoutput("c3mc-sys-ctl cmdb.tags.ProductOwner")
        return output

    def get_ops_owner_tag(self):
        output = subprocess.getoutput("c3mc-sys-ctl cmdb.tags.OpsOwner")
        return output

    def get_department_tag(self):
        output = subprocess.getoutput("c3mc-sys-ctl cmdb.tags.Department")
        return output

    def handle(self):
        for d in self.data_list:
            data = json.loads(d)
            if self.tag_field_name in d:
                tags = data[self.tag_field_name]
                if tags is not None:
                    data.pop(self.tag_field_name, None)
                    if len(tags) > 0:
                        if isinstance(tags[0], dict):
                            data = self.handle_obj_tag(data, tags)
                        elif isinstance(tags[0], str):
                            data = self.handle_str_tag(data, tags)
                        else:
                            raise Exception("未识别的标签字段")

            print(json.dumps(data))

        return


# data_list         json字符串列表
# tag_field_name    标签字段名称
# key_field_name    标签列表元素为字典时，key字段的名称
# value_field_name  标签列表元素为字典时，value字段的名称
# delimiter         标签列表元素为字符串时，字符串中分隔kv的分隔符
#
# 例子
# some_command | c3mc-cloud-tag tags key value None
# some_command | c3mc-cloud-tag tags None None =
def main(data_list, tag_field_name, key_field_name, value_field_name, delimiter):
    HandleTag(data_list, tag_field_name, key_field_name,
              value_field_name, delimiter).handle()


if __name__ == '__main__':
    data_list = []
    for line in sys.stdin:
        data_list.append(line)
    main(data_list, sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4])
