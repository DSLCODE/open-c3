#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess

import boto3

sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_cloud_aws_vpc import Vpc


def get(data, access_id, access_key, region):
    """
    输出 aws ec2 的详情(json格式)
    """
    client = boto3.client(
        "ec2",
        aws_access_key_id=access_id,
        aws_secret_access_key=access_key,
        region_name=region,
    )

    field_name = subprocess.getoutput(
        "c3mc-cloud-get-real-field compute aws-ec2 InstanceId"
    )

    response = client.describe_instances(
        InstanceIds=[data[field_name]],
    )

    vpc_client = Vpc(access_id, access_key, region)

    for instance in response["Reservations"][0]["Instances"]:
        if instance["InstanceId"] == data[field_name]:
            instance["RegionId"] = region

            if "PublicIpAddress" not in instance or not instance["PublicIpAddress"]:
                for network_interface in instance["NetworkInterfaces"]:
                    if "Association" in network_interface:
                        # 如果实例没有公网IP，但是有弹性IP，则使用弹性IP作为公网IP
                        instance["PublicIpAddress"] = network_interface["Association"]["CarrierIp"]
                        break

            if "window" in instance["PlatformDetails"].lower():
                instance["os"] = "Windows"
            else:
                instance["os"] = "Linux"

            if "VpcId" in instance:
                vpc_info = vpc_client.show_vpc(instance["VpcId"])

                if "Tags" in vpc_info:
                    for tag in vpc_info["Tags"]:
                        if tag["Key"].lower() == "name":
                            instance["VpcName"] = tag["Value"]
            return instance
    raise RuntimeError(f"根据 InstanceId {data[field_name]} 未找到 aws ec2")


def main(data, access_id, access_key, region):
    data = get(data, access_id, access_key, region)
    print(json.dumps(data, default=str))


if __name__ == "__main__":
    l = list(sys.stdin)
    if not l or len(l) > 1:
        raise RuntimeError("数据格式不对, 需要一行json字符串")

    main(json.loads(l[0]), sys.argv[2], sys.argv[3], sys.argv[4])
