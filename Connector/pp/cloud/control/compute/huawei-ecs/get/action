#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess

from huaweicloudsdkcore.auth.credentials import BasicCredentials
from huaweicloudsdkecs.v2.region.ecs_region import EcsRegion
from huaweicloudsdkecs.v2 import *

sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_cloud_huawei_vpc import Vpc


def get(data, access_id, access_key, project_id, region):
    """
    输出huawei ecs的详情(json格式)
    """
    if project_id == "None":
        project_id = None
    credentials = BasicCredentials(access_id, access_key, project_id)
    client = (
        EcsClient.new_builder()
        .with_credentials(credentials)
        .with_region(EcsRegion.value_of(region))
        .build()
    )

    field_name = subprocess.getoutput("c3mc-cloud-get-real-field compute huawei-ecs id")

    request = ShowServerRequest()
    request.server_id = data[field_name]
    response = client.show_server(request)
    response = json.loads(str(response))

    instance = response["server"]

    for key in instance["addresses"]:
        for item in instance["addresses"][key]:
            if item["OS-EXT-IPS:type"] == "fixed":
                instance["private_ip"] = item["addr"]
            else:
                instance["public_ip"] = item["addr"]

    instance["os"] = instance["metadata"]["os_type"]
    instance["flaver_id"] = instance["flavor"]["id"]
    instance["zone_id"] = instance["OS-EXT-AZ:availability_zone"]
    instance["region_id"] = region
    instance.pop("metadata", None)
    instance.pop("OS-EXT-SRV-ATTR:user_data", None)

    huawei_vpc = Vpc(access_id, access_key, project_id, region)
    if len(list(instance["addresses"])) > 0:
        vpc_id = list(instance["addresses"])[0]
        vpc_info = huawei_vpc.show_vpc(vpc_id)
        instance["vpc_id"] = vpc_id
        instance["vpc_name"] = vpc_info["name"]

    return instance


def main(data, access_id, access_key, project_id, region):
    data = get(data, access_id, access_key, project_id, region)
    print(json.dumps(data, default=str))


if __name__ == "__main__":
    l = list(sys.stdin)
    if not l or len(l) > 1:
        raise RuntimeError("数据格式不对, 需要一行json字符串")

    main(json.loads(l[0]), sys.argv[2], sys.argv[3], sys.argv[4], sys.argv[5])
