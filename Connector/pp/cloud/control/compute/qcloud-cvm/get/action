#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess

from tencentcloud.common import credential
from tencentcloud.common.profile.client_profile import ClientProfile
from tencentcloud.common.profile.http_profile import HttpProfile
from tencentcloud.cvm.v20170312 import cvm_client, models


sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_cloud_qcloud_vpc import QcloudVpc
from c3mc_cloud_qcloud_project import Project


def get_project_dict(access_id, access_key, region):
    project_list = Project(
        access_id, access_key, region
    ).show_projects()
    return {project["ProjectId"]: project for project in project_list}


def get(data, access_id, access_key, region):
    """
    输出 qcloud cvm 的详情(json格式)
    """
    cred = credential.Credential(access_id, access_key)
    httpProfile = HttpProfile()
    httpProfile.endpoint = "cvm.tencentcloudapi.com"

    clientProfile = ClientProfile()
    clientProfile.httpProfile = httpProfile
    client = cvm_client.CvmClient(cred, region, clientProfile)

    field_name = subprocess.getoutput(
        "c3mc-cloud-get-real-field compute qcloud-cvm InstanceId"
    )

    vpc_client = QcloudVpc(access_id, access_key, region)

    req = models.DescribeInstancesRequest()
    params = {"InstanceIds": [data[field_name]]}
    req.from_json_string(json.dumps(params))

    project_dict = get_project_dict(access_id, access_key, region)

    resp = client.DescribeInstances(req)
    for instance in resp.InstanceSet:
        if instance.InstanceId == data[field_name]:
            item = json.loads(str(instance))

            item["RegionId"] = region
            if (
                item["PrivateIpAddresses"] is not None
                and len(item["PrivateIpAddresses"]) > 0
            ):
                item["PrivateIP"] = item["PrivateIpAddresses"][0]
            if (
                item["PublicIpAddresses"] is not None
                and len(item["PublicIpAddresses"]) > 0
            ):
                item["PublicIP"] = item["PublicIpAddresses"][0]
            item["ProjectName"] = project_dict[item["Placement"]["ProjectId"]]["Name"]

            if "OsName" in item:
                item["os"] = (
                    "Windows"
                    if item["OsName"].lower().find("window") != -1
                    else "Linux"
                )
            else:
                item["os"] = "Other"

            if item["VirtualPrivateCloud"]["VpcId"] is not None:
                item["VpcId"] = item["VirtualPrivateCloud"]["VpcId"]
                item["VpcName"] = vpc_client.show_vpc(item["VpcId"])["VpcName"]

            return item
    raise RuntimeError(f"根据 InstanceId {data[field_name]} 未找到 qcloud cvm")


def main(data, access_id, access_key, region):
    data = get(data, access_id, access_key, region)
    print(json.dumps(data, default=str))


if __name__ == "__main__":
    l = list(sys.stdin)
    if not l or len(l) > 1:
        raise RuntimeError("数据格式不对, 需要一行json字符串")

    main(json.loads(l[0]), sys.argv[2], sys.argv[3], sys.argv[4])
