#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess

from aliyunsdkcore.client import AcsClient
from aliyunsdkslb.request.v20140515.DescribeHealthStatusRequest import DescribeHealthStatusRequest


class SlbBackendServers:
    """
        输出aliyun slb的后端服务器列表信息
    """

    def __init__(self, access_id, access_key, region, load_balancer_id):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.load_balancer_id = load_balancer_id
        self.client = self.create_client()

    def create_client(self):
        client = AcsClient(self.access_id, self.access_key, self.region)
        return client

    def describe_health_status_request(self):
        request = DescribeHealthStatusRequest()
        request.set_accept_format('json')
        request.set_LoadBalancerId(self.load_balancer_id)
        return request

    def get_response(self, request):
        response = self.client.do_action_with_exception(request)
        response_data = json.loads(response)
        return response_data

    def get_ecs_info(self, ecs_id):
        output = subprocess.getoutput(
            "c3mc-cloud-aliyun-ecs-by-id {} {} {} {}".format(self.access_id, self.access_key, self.region, ecs_id))
        return output

    def get_server_public_ip(self, instance_id):
        response = self.get_ecs_info(instance_id)
        instance = json.loads(response)
        if len(instance["PublicIpAddress"]["IpAddress"]) == 0:
            return None
        return instance["PublicIpAddress"]["IpAddress"][0]

    def get_backend_server_info(self):
        response = self.get_response(
            self.describe_health_status_request())
        results = []
        m = {}
        for item in response["BackendServers"]["BackendServer"]:
            if item["ServerIp"] in m:
                continue
            m[item["ServerIp"]] = {}

            public_ip = self.get_server_public_ip(item["ServerId"])
            if public_ip is not None:
                item["PublicIp"] = public_ip
            results.append(item)
        return results

    def show(self):
        result = self.get_backend_server_info()
        print(json.dumps(result))


def main(access_id, access_key, region, load_balancer_id):
    SlbBackendServers(access_id, access_key, region, load_balancer_id).show()


if __name__ == '__main__':
    l = []
    for line in sys.stdin:
        l.append(line)
    if len(l) == 0 or len(l) > 1:
        raise Exception("数据格式错误, 需要一行json数据")

    field_name = subprocess.getoutput(
        "c3mc-cloud-get-real-field networking aliyun-slb LoadBalancerId")

    data = json.loads(l[0])
    main(sys.argv[2], sys.argv[3], sys.argv[4], data[field_name])
