#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import boto3
import warnings
from botocore.exceptions import ClientError

warnings.filterwarnings("ignore", message="Boto3 will no longer support Python 3.7")

class AwsElbBackendServers:
    """
    输出AWS ELB的后端服务器列表信息，包括监听器端口和后端实例端口
    """

    def __init__(self, access_id, access_key, region, load_balancer_arn):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.load_balancer_arn = load_balancer_arn
        self.elbv2_client = self.create_client('elbv2')
        self.ec2_client = self.create_client('ec2')

    def create_client(self, service_name):
        return boto3.client(service_name,
                            region_name=self.region,
                            aws_access_key_id=self.access_id,
                            aws_secret_access_key=self.access_key)

    def get_listeners(self):
        try:
            response = self.elbv2_client.describe_listeners(LoadBalancerArn=self.load_balancer_arn)
            return response['Listeners']
        except ClientError as e:
            print(f"Error getting listeners: {e}")
            return []

    def get_target_groups(self):
        try:
            response = self.elbv2_client.describe_target_groups(LoadBalancerArn=self.load_balancer_arn)
            return response['TargetGroups']
        except ClientError as e:
            print(f"Error getting target groups: {e}")
            return []

    def get_target_health(self, target_group_arn):
        try:
            response = self.elbv2_client.describe_target_health(TargetGroupArn=target_group_arn)
            return response['TargetHealthDescriptions']
        except ClientError as e:
            print(f"Error getting target health: {e}")
            return []

    def get_instance_details(self, instance_ids):
        try:
            response = self.ec2_client.describe_instances(InstanceIds=instance_ids)
            instances = {}
            for reservation in response['Reservations']:
                for instance in reservation['Instances']:
                    instances[instance['InstanceId']] = {
                        'PrivateIpAddress': instance.get('PrivateIpAddress', 'N/A'),
                        'PublicIpAddress': instance.get('PublicIpAddress', 'N/A'),
                        'State': instance['State']['Name']
                    }
            return instances
        except ClientError as e:
            print(f"Error getting instance details: {e}")
            return {}

    def get_backend_server_info(self):
        result = []
        listeners = self.get_listeners()
        target_groups = self.get_target_groups()
        
        tg_port_map = {tg['TargetGroupArn']: tg['Port'] for tg in target_groups}

        for listener in listeners:
            listener_port = listener['Port']
            protocol = listener['Protocol']
            
            for action in listener['DefaultActions']:
                if action['Type'] == 'forward':
                    tg_arn = action['TargetGroupArn']
                    targets = self.get_target_health(tg_arn)
                    
                    instance_ids = [t['Target']['Id'] for t in targets if t['Target']['Id'].startswith('i-')]
                    instance_details = self.get_instance_details(instance_ids) if instance_ids else {}
                    
                    for target in targets:
                        target_id = target['Target']['Id']
                        target_info = {
                            'ListenerPort': listener_port,
                            'Protocol': protocol,
                            'TargetId': target_id,
                            'TargetType': 'instance' if target_id.startswith('i-') else 'ip',
                            'TargetHealth': target['TargetHealth']['State'],
                            'InstancePort': tg_port_map.get(tg_arn, 'N/A'),
                        }
                        
                        if target_id.startswith('i-'):
                            if target_id in instance_details:
                                info = instance_details[target_id]
                                target_info.update({
                                    'PrivateIpAddress': info['PrivateIpAddress'],
                                    'PublicIpAddress': info['PublicIpAddress'],
                                    'InstanceState': info['State'],
                                })
                        else:
                            target_info['IpAddress'] = target_id
                        
                        result.append(target_info)
        
        return result

    def show(self):
        result = self.get_backend_server_info()
        print(json.dumps(result, indent=2))

def main():
    if len(sys.argv) < 4:
        print(json.dumps({"error": "Not enough arguments. Usage: python script.py <access_id> <access_key> <region>"}))
        return

    access_id = sys.argv[2]
    access_key = sys.argv[3]
    region = sys.argv[4]

    # 从标准输入读取 JSON 数据
    try:
        input_data = json.loads(sys.stdin.read().strip())
        load_balancer_arn = input_data.get('LoadBalancerArn')
    except json.JSONDecodeError:
        print(json.dumps({"error": "Invalid JSON input"}))
        return

    if not load_balancer_arn:
        print(json.dumps({"error": "LoadBalancerArn not found in input JSON"}))
        return

    try:
        AwsElbBackendServers(access_id, access_key, region, load_balancer_arn).show()
    except Exception as e:
        print(json.dumps({"error": f"Unexpected error: {str(e)}"}))

if __name__ == '__main__':
    main()