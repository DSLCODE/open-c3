#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess

from kscore.session import get_session


class SlbBackendServers:
    def __init__(self, access_id, access_key, region, load_balancer_id):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.load_balancer_id = load_balancer_id
        self.client = self.create_client()

    def create_client(self):
        s = get_session()
        client = s.create_client(
            "slb", ks_access_key_id=self.access_id, ks_secret_access_key=self.access_key, region_name=self.region)
        return client

    def get_backend_server_info(self, load_balancer_id):
        response = self.client.describe_listeners(
            **{'Filter.1.Name': 'load-balancer-id', 'Filter.1.Value.1': load_balancer_id})

        result = []
        m = {}
        for listener in response["ListenerSet"]:
            for real_server in listener["RealServer"]:
                if real_server["RealServerIp"] in m:
                    continue
                m[real_server["RealServerIp"]] = {}

                result.append(real_server)
        return result

    def show(self):
        result = self.get_backend_server_info(self.load_balancer_id)
        print(json.dumps(result, default=str))


def main(access_id, access_key, region, load_balancer_id):
    SlbBackendServers(access_id, access_key, region, load_balancer_id).show()


if __name__ == '__main__':
    l = []
    for line in sys.stdin:
        l.append(line)
    if len(l) == 0 or len(l) > 1:
        raise Exception("数据格式错误, 需要一行json数据")

    field_name = subprocess.getoutput(
        "c3mc-cloud-get-real-field networking ksyun-slb LoadBalancerId")

    data = json.loads(l[0])
    main(sys.argv[2], sys.argv[3], sys.argv[4], data[field_name])
