#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess

from huaweicloudsdkcore.auth.credentials import BasicCredentials
from huaweicloudsdkecs.v2.region.ecs_region import EcsRegion
from huaweicloudsdkevs.v2.region.evs_region import EvsRegion
from huaweicloudsdkecs.v2 import *
from huaweicloudsdkevs.v2 import *


def get(data, access_id, access_key, project_id, region):
    """
    输出huawei ecs volume的详情(json格式)
    """
    if project_id == "None":
        project_id = None
    credentials = BasicCredentials(access_id, access_key, project_id)

    ecs_client = (
        EcsClient.new_builder()
        .with_credentials(credentials)
        .with_region(EcsRegion.value_of(region))
        .build()
    )
    evs_client = (
        EvsClient.new_builder()
        .with_credentials(credentials)
        .with_region(EvsRegion.value_of(region))
        .build()
    )

    id_field_name = subprocess.getoutput(
        "c3mc-cloud-get-real-field storage huawei-ecs-volume id"
    )
    server_field_name = subprocess.getoutput(
        "c3mc-cloud-get-real-field storage huawei-ecs-volume server_id"
    )

    request = ShowServerBlockDeviceRequest()
    request.volume_id = data[id_field_name]
    request.server_id = data[server_field_name]
    block_response = ecs_client.show_server_block_device(request)
    block_response = json.loads(str(block_response))

    request = ShowVolumeTagsRequest()
    request.volume_id = data[id_field_name]
    volume_response = evs_client.show_volume_tags(request)

    volume = block_response["volumeAttachment"]

    volume["region_id"] = region
    volume["account"] = data["account"]
    volume["accountuuid"] = data["accountuuid"]
    volume["tags"] = volume_response.to_dict()["tags"]
    volume["_vmuuid_"] = data[server_field_name]
    return volume


def main(data, access_id, access_key, project_id, region):
    data = get(data, access_id, access_key, project_id, region)
    print(json.dumps(data, default=str))


if __name__ == "__main__":
    l = list(sys.stdin)
    if not l or len(l) > 1:
        raise RuntimeError("数据格式不对, 需要一行json字符串")

    main(json.loads(l[0]), sys.argv[2], sys.argv[3], sys.argv[4], sys.argv[5])
