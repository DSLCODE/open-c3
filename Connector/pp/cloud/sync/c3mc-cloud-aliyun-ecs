#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json

from aliyunsdkcore.client import AcsClient
from aliyunsdkecs.request.v20140526 import DescribeInstancesRequest

sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_cloud_aliyun_vpc import LibVpc


class Ecs:
    def __init__(self, access_id, access_key, region):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.client = self.create_client()
        self.page_number = 1
        self.page_size = 100

    def create_client(self):
        return AcsClient(self.access_id, self.access_key, self.region)

    def set_request(self):
        request = DescribeInstancesRequest.DescribeInstancesRequest()
        request.set_PageNumber(self.page_number)
        request.set_PageSize(self.page_size)
        return request

    def get_response(self):
        request = self.set_request()
        response = self.client.do_action_with_exception(request)
        return json.loads(response)

    def get_server_count(self):
        response_data = self.get_response()
        return response_data["TotalCount"]

    def show(self):
        vpc_client = LibVpc(self.access_id, self.access_key, self.region)

        response_data = self.get_response()
        instances = response_data["Instances"]["Instance"]
        for instance in instances:
            if "Tags" in instance and "Tag" in instance["Tags"]:
                instance["Tag"] = instance["Tags"]["Tag"]
                instance.pop("Tags", None)
            instance["VpcId"] = instance["VpcAttributes"]["VpcId"]
            instance["VpcName"] = vpc_client.show_vpc(instance["VpcId"])["VpcName"]

            if "OSName" in instance:
                instance["os"] = (
                    "Windows"
                    if instance["OSName"].lower().find("window") != -1
                    else "Linux"
                )
            else:
                instance["os"] = "Other"

            public_ip = ""
            if len(instance["PublicIpAddress"]["IpAddress"]) > 0:
                public_ip = instance["PublicIpAddress"]["IpAddress"][0]
            if instance["EipAddress"]["IpAddress"] != "":
                public_ip = instance["EipAddress"]["IpAddress"]
            instance["PublicIp"] = public_ip

            print(json.dumps(instance))

    def page(self):
        count = self.get_server_count()
        self.page_size = 100
        if count % self.page_size:
            total_page_number = int(count / self.page_size) + 1
        else:
            total_page_number = int(count / self.page_size)

        for cur_page_number in range(1, total_page_number + 1):
            self.page_number = cur_page_number
            self.show()


def main(access_id, access_key, region):
    try:
        Ecs(access_id, access_key, region).page()
    except Exception as e:
        print(f"同步阿里云ecs资源出错. access_id: {access_id}, region: {region}", file=sys.stderr)
        raise e


if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2], sys.argv[3])
