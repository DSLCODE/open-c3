#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json

import oss2

sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_cloud_aliyun_oss import LibAliyunOss


class Oss:
    def __init__(self, access_id, access_key, region):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.page_size = 25
        self.client = self.create_client()

    def create_client(self):
        endpoint = f"https://oss-{self.region}.aliyuncs.com"
        auth = oss2.Auth(self.access_id, self.access_key)
        return oss2.Service(auth, endpoint)

    def get_buckets_from_response(self, response_data):
        bucket_list = []
        for bucket in response_data.buckets:
            item = {
                "name": bucket.name,
                "location": bucket.location,
                "creation_date": bucket.creation_date,
                "extranet_endpoint": bucket.extranet_endpoint,
                "intranet_endpoint": bucket.intranet_endpoint,
                "storage_class": bucket.storage_class,
                "tags": self.list_tag(
                    self.access_id, self.access_key, bucket.location, bucket.name
                ),
            }
            bucket_list.append(item)
        return bucket_list

    def list_buckets(self):
        response = self.client.list_buckets(max_keys=self.page_size)
        results = self.get_buckets_from_response(response)
        while response.next_marker != "":
            response = self.client.list_buckets(
                max_keys=self.page_size, marker=response.next_marker
            )
            results.extend(self.get_buckets_from_response(response))
        return results

    def list_tag(self, access_id, access_key, location, bucket_name):
        return LibAliyunOss(access_id, access_key, location, bucket_name).list_tag()

    def show(self):
        buckets = self.list_buckets()
        for bucket in buckets:
            print(json.dumps(bucket))


def main(access_id, access_key, region):
    try:
        Oss(access_id, access_key, region).show()
    except Exception as e:
        print(f"同步阿里云oss资源出错. access_id: {access_id}, region: {region}", file=sys.stderr)
        raise e


if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2], sys.argv[3])
