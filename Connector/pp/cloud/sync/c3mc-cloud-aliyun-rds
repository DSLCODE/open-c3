#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import json
import sys

from aliyunsdkcore.client import AcsClient
from aliyunsdkrds.request.v20140815.DescribeDBInstancesRequest import (
    DescribeDBInstancesRequest,
)
from aliyunsdkrds.request.v20140815.DescribeDBInstanceAttributeRequest import (
    DescribeDBInstanceAttributeRequest,
)

sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_cloud_aliyun_rds import LibAliyunRds


class RDS:
    def __init__(self, access_id, access_key, region):
        self.region = region
        self.access_id = access_id
        self.access_key = access_key
        self.page_number = 1
        self.page_size = 50
        self.client = self.create_client()
        self.lib_client = LibAliyunRds(access_id, access_key, region)

    def create_client(self):
        return AcsClient(self.access_id, self.access_key, self.region)

    def set_desc_request(self):
        request = DescribeDBInstancesRequest()
        request.set_accept_format("json")
        request.set_PageNumber(self.page_number)
        request.set_PageSize(self.page_size)
        return request

    def get_desc_response(self):
        request = self.set_desc_request()
        response = self.client.do_action_with_exception(request)
        return json.loads(response)

    def get_rds_count(self):
        response_data = self.get_desc_response()
        return response_data["TotalRecordCount"]

    def get_db_instance_id(self):
        response_data = self.get_desc_response()
        rds_data = response_data["Items"]["DBInstance"]
        return [i.get("DBInstanceId") for i in rds_data]

    def get_attribute_response(self):
        instance_id_list = self.get_db_instance_id()
        rds_attribute_data_list = []
        request = DescribeDBInstanceAttributeRequest()
        request.set_accept_format("json")
        for instance_id in instance_id_list:
            request.set_DBInstanceId(instance_id)
            response = self.client.do_action_with_exception(request)
            rds_attribute_data = json.loads(response)["Items"]["DBInstanceAttribute"][0]
            rds_attribute_data["Tag"] = self.lib_client.list_tag(instance_id)
            rds_attribute_data_list.append(rds_attribute_data)
        return rds_attribute_data_list

    def show(self):
        rds_attribute_data_list = self.get_attribute_response()
        for i in rds_attribute_data_list:
            print(json.dumps(i))

    def page(self):
        count = self.get_rds_count()
        if count % self.page_size:
            total_page_number = int(count / self.page_size) + 1
        else:
            total_page_number = int(count / self.page_size)

        for cur_page_number in range(1, total_page_number + 1):
            self.page_number = cur_page_number
            self.show()


def main(access_id, access_key, region):
    try:
        RDS(access_id, access_key, region).page()
    except Exception as e:
        print(f"同步阿里云rds资源出错. access_id: {access_id}, region: {region}", file=sys.stderr)
        raise e


if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2], sys.argv[3])
