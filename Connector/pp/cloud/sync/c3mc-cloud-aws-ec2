#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import json

import boto3

sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_cloud_aws_vpc import Vpc


class Ec2:
    def __init__(self, access_id, access_key, region):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.client = self.create_client()
        self.page_size = 25

    def create_client(self):
        client = boto3.client(
            "ec2",
            aws_access_key_id=self.access_id,
            aws_secret_access_key=self.access_key,
            region_name=self.region,
        )
        return client

    def get_instances_from_response(self, response_data):
        instances = []
        for reservation in response_data["Reservations"]:
            for instance in reservation["Instances"]:
                instance["RegionId"] = self.region
                instances.append(instance)
        return instances

    def get_response(self):
        vpc_client = Vpc(self.access_id, self.access_key, self.region)

        response = self.client.describe_instances(MaxResults=self.page_size)
        results = self.get_instances_from_response(response)
        while "NextToken" in response:
            response = self.client.describe_instances(
                MaxResults=self.page_size, NextToken=response["NextToken"])
            results.extend(self.get_instances_from_response(response))
        
        for i in range(len(results)):
            if "VpcId" in results[i]:
                vpc_info = vpc_client.show_vpc(results[i]["VpcId"])
                for tag in vpc_info["Tags"]:
                    if tag["Key"].lower() == "name":
                        results[i]["VpcName"] = tag["Value"]
        return results

    def show(self):
        instance_list = self.get_response()
        for instance in instance_list:
            print(json.dumps(instance, default=str))


def main(access_id, access_key, region):
    ec2 = Ec2(access_id, access_key, region)
    ec2.show()


if __name__ == '__main__':
    main(sys.argv[1], sys.argv[2], sys.argv[3])
