#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess

import boto3

sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_cloud_aws_china_get_price_data import get_rds_instance_type_info_m


"""同步rds节点列表

注意: aws rds资源类型有节点类型和集群类型, 这里只同步节点类型的资源
    集群类型的资源在 c3mc-cloud-aws-rds-cluster 中同步
"""


class Rds:
    def __init__(self, access_id, access_key, region):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.client = self.create_client()
        self.page_size = 20

    def create_client(self):
        endpoint_url = f"https://rds.{self.region}.amazonaws.com"
        if self.region.startswith("cn"):
            endpoint_url = f"https://rds.{self.region}.amazonaws.com.cn"

        client = boto3.client(
            "rds",
            endpoint_url=endpoint_url,
            aws_access_key_id=self.access_id,
            aws_secret_access_key=self.access_key,
            region_name=self.region,
        )
        return client

    def get_instances_from_response(self, response_data):
        results = []
        for instance in response_data["DBInstances"]:
            instance["RegionId"] = self.region
            results.append(instance)
        return results

    def get_cpu_and_memory(self, instance_type):
        return subprocess.getoutput(
            f"c3mc-query-aws-rds-instance-type-info {self.access_id} {self.access_key} {self.region} {instance_type}"
        )

    def list_instance(self):
        response = self.client.describe_db_instances(MaxRecords=self.page_size)
        results = self.get_instances_from_response(response)
        while "Marker" in response:
            response = self.client.describe_db_instances(
                MaxRecords=self.page_size, Marker=response["Marker"]
            )
            results.extend(self.get_instances_from_response(response))

        aws_instance_info_m = {}
        instance_type_m = {}

        for i in range(len(results)):
            instance_type = results[i]["DBInstanceClass"]
            if instance_type not in instance_type_m:
                if self.region.startswith("cn-"):
                    if len(aws_instance_info_m) == 0:
                        aws_instance_info_m = get_rds_instance_type_info_m(self.region)

                    deploy_mode = ""
                    deploy_mode = "Multi-AZ" if results[i]["MultiAZ"] else "Single-AZ"
                    attr = aws_instance_info_m[self.region][instance_type][deploy_mode]
                    attr["memory"] = attr["memory"][: -len(" GiB")]
                    instance_type_m[instance_type] = attr
                else:
                    try:
                        res = self.get_cpu_and_memory(instance_type)
                        instance_type_m[instance_type] = json.loads(res)
                    except Exception as e:
                        raise RuntimeError() from e

            results[i]["_cpu_"] = instance_type_m[instance_type]["vcpu"]
            results[i]["_memory_"] = instance_type_m[instance_type]["memory"]
        return results

    def show(self):
        instance_list = self.list_instance()
        for instance in instance_list:
            print(json.dumps(instance, default=str))


def main(access_id, access_key, region):
    try:
        Rds(access_id, access_key, region).show()
    except Exception as e:
        print(f"同步aws rds资源出错. access_id: {access_id}, region: {region}", file=sys.stderr) 
        raise e


if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2], sys.argv[3])
