#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json

from huaweicloudsdkcore.auth.credentials import BasicCredentials
from huaweicloudsdkecs.v2.region.ecs_region import EcsRegion
from huaweicloudsdkecs.v2 import *

sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_cloud_huawei_vpc import Vpc


max_times_for_get_ecs = 20
max_times_for_get_vpc = 20


class Ecs:
    def __init__(self, access_id, access_key, project_id, region):
        self.access_id = access_id
        self.access_key = access_key
        if project_id == "None":
            self.project_id = None
        else:
            self.project_id = project_id.strip()
        self.region = region
        self.page_number = 1
        self.page_size = 25

        self.client = self.create_client()

    def create_client(self):
        credentials = BasicCredentials(
            self.access_id, self.access_key, self.project_id)
        client = EcsClient.new_builder() \
            .with_credentials(credentials) \
            .with_region(EcsRegion.value_of(self.region)) \
            .build()
        return client

    def set_request(self):
        request = ListServersDetailsRequest(
            offset=self.page_number, limit=self.page_size)
        return request

    def get_response(self):
        request = self.set_request()
        response = self.client.list_servers_details(request)
        response_data = json.loads(str(response))
        return response_data

    def get_server_count(self):
        response_data = self.get_response()
        return response_data['count']

    def show(self):
        huawei_vpc = Vpc(self.access_id, self.access_key, self.project_id, self.region)
        response_data = self.get_response()
        servers = response_data['servers']
        for server in servers:
            for key in server['addresses']:
                for item in server['addresses'][key]:
                    if item["OS-EXT-IPS:type"] == "fixed":
                        server['private_ip'] = item['addr']
                    else:
                        server['public_ip'] = item['addr']

            server['os'] = server['metadata']['os_type']
            server['flaver_id'] = server['flavor']['id']
            server['zone_id'] = server['OS-EXT-AZ:availability_zone']
            server['region_id'] = self.region
            server.pop('metadata', None)
            server.pop('OS-EXT-SRV-ATTR:user_data', None)

            if len(list(server["addresses"])) > 0:
                vpc_id = list(server["addresses"])[0]
                vpc_info = huawei_vpc.show_vpc(vpc_id)
                server['vpc_id'] = vpc_id
                server['vpc_name'] = vpc_info["name"]

                self.sleep(max_times_for_get_vpc)

            print(json.dumps(server))

    def sleep(self, seconds):
        from c3mc_utils import sleep_time_for_limiting
        sleep_time_for_limiting(seconds)

    def page(self):
        count = self.get_server_count()
        mod = count % self.page_size
        if mod:
            total_page_number = int(count / self.page_size) + 1
        else:
            total_page_number = int(count / self.page_size)

        for cur_page_number in range(1, total_page_number + 1):
            self.page_number = cur_page_number
            self.show()
            self.sleep(max_times_for_get_ecs)


# project_id 可以命令行传 None
def main(access_id, access_key, project_id, region):
    ecs = Ecs(access_id, access_key, project_id, region)
    ecs.page()


if __name__ == '__main__':
    main(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4])

