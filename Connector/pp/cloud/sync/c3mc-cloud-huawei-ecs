#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json

from huaweicloudsdkcore.auth.credentials import BasicCredentials
from huaweicloudsdkecs.v2.region.ecs_region import EcsRegion
from huaweicloudsdkecs.v2 import *

sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_cloud_huawei_vpc import Vpc
from c3mc_cloud_huawei_flavors import Flavors
from c3mc_utils import sleep_time_for_limiting


max_times_for_get_ecs = 20
max_times_for_get_vpc = 20


class Ecs:
    def __init__(self, access_id, access_key, project_id, region):
        self.access_id = access_id
        self.access_key = access_key
        self.project_id = None if project_id == "None" else project_id.strip()
        self.region = region
        self.page_number = 1
        self.page_size = 25

        self.client = self.create_client()

    def create_client(self):
        credentials = BasicCredentials(self.access_id, self.access_key, self.project_id)
        return (
            EcsClient.new_builder()
            .with_credentials(credentials)
            .with_region(EcsRegion.value_of(self.region))
            .build()
        )

    def set_request(self):
        return ListServersDetailsRequest(offset=self.page_number, limit=self.page_size)

    def get_response(self):
        request = self.set_request()
        response = self.client.list_servers_details(request)
        return json.loads(str(response))

    def get_server_count(self):
        response_data = self.get_response()
        return response_data["count"]

    def list_flavors(self):
        return Flavors(
            self.access_id, self.access_key, self.project_id, self.region
        ).list_flavors()

    def show(self):
#        huawei_vpc = Vpc(self.access_id, self.access_key, self.project_id, self.region)
        response_data = self.get_response()
        servers = response_data["servers"]
        for server in servers:
            for key in server["addresses"]:
                for item in server["addresses"][key][::-1]:
                    if item["OS-EXT-IPS:type"] == "fixed":
                        server["private_ip"] = item["addr"]
                    else:
                        server["public_ip"] = item["addr"]

            server["os"] = server["metadata"]["os_type"]
            server["flaver_id"] = server["flavor"]["id"]
            server["zone_id"] = server["OS-EXT-AZ:availability_zone"]
            server["region_id"] = self.region
            server.pop("metadata", None)
            server.pop("OS-EXT-SRV-ATTR:user_data", None)

            server["quota_min_rate"] = self.flavors_dict[server["flaver_id"]][
                "os_extra_specs"
            ]["quota:min_rate"]
            server["quota_max_rate"] = self.flavors_dict[server["flaver_id"]][
                "os_extra_specs"
            ]["quota:max_rate"]

            # 默认内网ip
            server["_default_ip_kind_"] = "inip"
            if list(server["addresses"]):
                vpc_id = list(server["addresses"])[0]
#                vpc_info = huawei_vpc.show_vpc(vpc_id)

#                server["_default_ip_kind_"] = huawei_vpc.check_vpc_internet(vpc_id)

                server["vpc_id"] = vpc_id
#                server["vpc_name"] = vpc_info["name"]

                self.sleep(max_times_for_get_vpc)

            print(json.dumps(server))

    def sleep(self, seconds):
        sleep_time_for_limiting(seconds)

    def page(self):
        count = self.get_server_count()
        if count % self.page_size:
            total_page_number = int(count / self.page_size) + 1
        else:
            total_page_number = int(count / self.page_size)

        for cur_page_number in range(1, total_page_number + 1):
            self.page_number = cur_page_number
            self.show()
            self.sleep(max_times_for_get_ecs)

    def display(self):
        flavors_list = self.list_flavors()
        self.flavors_dict = {}
        for item in flavors_list:
            self.flavors_dict[item["id"]] = item
        self.page()


# project_id 可以命令行传 None
def main(access_id, access_key, project_id, region):
    try:
        Ecs(access_id, access_key, project_id, region).display()
    except Exception as e:
        # https://developer.huaweicloud.com/endpoint?all 支持的区域可能尚未包含在sdk区域配置文件中
        # 对于这种错误直接忽略
        if "Unexpected region_id" in str(e):
            return
        print(f"同步华为云ecs资源出错. access_id: {access_id}, region: {region}", file=sys.stderr)
        raise e


if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4])
