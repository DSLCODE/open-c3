#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json

from kscore.session import get_session


class Volume:
    def __init__(self, access_id, access_key, region):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.page_size = 25
        self.client = self.create_client()

    def create_client(self):
        s = get_session()
        return s.create_client(
            "ebs",
            ks_access_key_id=self.access_id,
            ks_secret_access_key=self.access_key,
            region_name=self.region,
        )

    def get_instances_from_response(self, response_data):
        results = []
        for instance in response_data["Volumes"]:
            instance["RegionId"] = instance["AvailabilityZone"][:-1]
            if "InstanceId" in instance:
                instance["_vmuuid_"] = instance["InstanceId"]
            results.append(instance)
        return results

    def list_volumes(self):
        response = self.client.describe_volumes(MaxResults=self.page_size)
        results = self.get_instances_from_response(response)
        while (
            "Marker" in response
            and response["Marker"] is not None
            and response["Marker"] != 0
        ):
            response = self.client.describe_volumes(
                MaxResults=self.page_size, Marker=response["Marker"]
            )
            results.extend(self.get_instances_from_response(response))
        return results

    def show(self):
        instance_list = self.list_volumes()
        for instance in instance_list:
            print(json.dumps(instance, default=str))


def main(access_id, access_key, region):
    try:
        Volume(access_id, access_key, region).show()
    except Exception as e:
        print(f"同步金山云volume资源出错. access_id: {access_id}, region: {region}", file=sys.stderr)
        raise e


if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2], sys.argv[3])
