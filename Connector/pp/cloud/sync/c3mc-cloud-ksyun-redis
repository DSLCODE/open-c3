#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json

from kscore.session import get_session


class Kcs:
    def __init__(self, access_id, access_key, region):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.page_number = 1
        self.page_size = 25
        self.client = self.create_client()
        self.status_code_m = {
            0: "未知",
            1: "创建中",
            2: "运行中",
            3: "更配中",
            4: "删除中",
            5: "锁定中",
            6: "解锁中",
            7: "配置中",
            8: "已锁定",
            9: "续费",
            10: "已删除",
            11: "备份中",
            12: "恢复中",
            13: "重启中",
            99: "异常",
        }

    def create_client(self):
        s = get_session()
        client = s.create_client(
            "kcs", ks_access_key_id=self.access_id, ks_secret_access_key=self.access_key, region_name=self.region)
        return client

    def get_response(self):
        response_data = self.client.describe_cache_clusters(
            Offset=(self.page_number - 1) * self.page_size,
            Limit=self.page_size,
        )
        return response_data

    def get_server_count(self):
        response_data = self.get_response()
        return response_data["Data"]["total"]

    def list_instance(self):
        response_data = self.get_response()

        result = []
        for instance in response_data["Data"]["list"]:
            if "status" in instance and isinstance(instance["status"], int):
                instance["status_zh_desc"] = self.status_code_m[instance["status"]]

            result.append(instance)
        return result

    def show(self):
        instance_list = self.list_instance()
        for instance in instance_list:
            print(json.dumps(instance, default=str))

    def page(self):
        count = self.get_server_count()
        mod = count % self.page_size
        if mod:
            total_page_number = int(count / self.page_size) + 1
        else:
            total_page_number = int(count / self.page_size)

        for cur_page_number in range(1, total_page_number + 1):
            self.page_number = cur_page_number
            self.show()


def main(access_id, access_key, region):
    Kcs(access_id, access_key, region).page()


if __name__ == '__main__':
    main(sys.argv[1], sys.argv[2], sys.argv[3])
