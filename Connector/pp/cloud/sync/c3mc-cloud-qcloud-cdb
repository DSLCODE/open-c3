#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json

from tencentcloud.common import credential
from tencentcloud.common.profile.client_profile import ClientProfile
from tencentcloud.common.profile.http_profile import HttpProfile
from tencentcloud.cdb.v20170320 import cdb_client, models

sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_utils import sleep_time_for_limiting

# DescribeDBInstances() 的接口请求频率限制
max_times_describe_db_instances = 100


class Cdb:
    def __init__(self, access_id, access_key, region):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.page_number = 1
        self.page_size = 25
        self.client = self.create_client()
        self.status_code_m = {
            0: "创建中",
            1: "运行中",
            4: "正在进行隔离操作",
            5: "隔离中（可在回收站恢复开机）",
        }

    def create_client(self):
        cred = credential.Credential(self.access_id, self.access_key)
        httpProfile = HttpProfile()
        httpProfile.endpoint = "cdb.tencentcloudapi.com"

        clientProfile = ClientProfile()
        clientProfile.httpProfile = httpProfile
        return cdb_client.CdbClient(cred, self.region, clientProfile)

    def set_request(self):
        req = models.DescribeDBInstancesRequest()
        req.Limit = self.page_size
        req.Offset = (self.page_number - 1) * self.page_size
        return req

    def get_response(self):
        request = self.set_request()
        return self.client.DescribeDBInstances(request)

    def get_server_count(self):
        response_data = self.get_response()
        return response_data.TotalCount

    def list_instances(self):
        result = []
        response_data = self.get_response()
        for instance in response_data.Items:
            item = json.loads(instance.to_json_string())
            item["StatusZhDesc"] = self.status_code_m[item["Status"]]

            cpu_cores = item["Cpu"]
            # 实例信息中内存字段值都是1000的整数倍
            memory_size = int(item["Memory"] / 1000)
            item["Flavor"] = f"V.{cpu_cores}C.{memory_size}GB" 

            result.append(item)
        return result

    def show(self):
        instance_list = self.list_instances()
        for instance in instance_list:
            print(json.dumps(instance, default=str))

    def sleep(self):
        sleep_time_for_limiting(max_times_describe_db_instances)

    def page(self):
        try:
            count = self.get_server_count()
            if count % self.page_size:
                total_page_number = int(count / self.page_size) + 1
            else:
                total_page_number = int(count / self.page_size)

            for cur_page_number in range(1, total_page_number + 1):
                self.page_number = cur_page_number
                self.sleep()
                self.show()
        except Exception as e:
            if "该接口不支持此地域访问" in str(e):
                return []
            else:
                raise e


def main(access_id, access_key, region):
    try:
        Cdb(access_id, access_key, region).page()
    except Exception as e:
        print(f"同步腾讯云cdb资源出错. access_id: {access_id}, region: {region}", file=sys.stderr)
        raise e


if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2], sys.argv[3])
