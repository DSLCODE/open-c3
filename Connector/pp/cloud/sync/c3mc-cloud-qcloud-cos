#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json

from qcloud_cos import CosConfig
from qcloud_cos import CosS3Client

sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_utils import sleep_time_for_limiting
from c3mc_cloud_qcloud_cos_get_tag import GetTag


# 查询cos标签的接口请求频率限制
max_times_list_cos_tags = 5


class Cos:
    def __init__(self, access_id, access_key, region):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.client = self.create_client()

    def create_client(self):
        service_domain = f"cos.{self.region}.myqcloud.com"
        config = CosConfig(
            Region=self.region,
            SecretId=self.access_id,
            SecretKey=self.access_key,
            Token=None,
            Scheme="https",
            ServiceDomain=service_domain,
        )
        return CosS3Client(config)

    def sleep(self):
        sleep_time_for_limiting(max_times_list_cos_tags)

    def list_buckets(self):
        try:
            response = self.client.list_buckets()
        except Exception as e:
            if "Failed to establish a new connection" in str(e):
                return []
            else:
                raise e

        result = []
        if response["Buckets"] is None:
            return []
        for bucket in response["Buckets"]["Bucket"]:
            self.sleep()
            bucket["tags"] = self.list_tag(bucket["Location"], bucket["Name"])
            result.append(bucket)
        return result

    def list_tag(self, region, bucket_name):
        return GetTag(self.access_id, self.access_key, region, bucket_name).list_tag()

    def show(self):
        buckets = self.list_buckets()
        for bucket in buckets:
            print(json.dumps(bucket))


def main(access_id, access_key, region):
    try:
        Cos(access_id, access_key, region).show()
    except Exception as e:
        print(f"同步腾讯云cos资源出错. access_id: {access_id}, region: {region}", file=sys.stderr) 
        raise e


if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2], sys.argv[3])
