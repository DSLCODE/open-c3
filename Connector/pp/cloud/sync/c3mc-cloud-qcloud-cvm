#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json

from tencentcloud.common import credential
from tencentcloud.common.profile.client_profile import ClientProfile
from tencentcloud.common.profile.http_profile import HttpProfile
from tencentcloud.cvm.v20170312 import cvm_client, models

sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_cloud_qcloud_vpc import QcloudVpc
from c3mc_cloud_qcloud_project import Project
from c3mc_utils import sleep_time_for_limiting


# DescribeInstances() 的接口请求频率限制
max_times_describe_instances = 40


class Cvm:
    def __init__(self, access_id, access_key, region):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.page_number = 1
        self.page_size = 25
        self.client = self.create_client()

    def create_client(self):
        cred = credential.Credential(self.access_id, self.access_key)
        httpProfile = HttpProfile()
        httpProfile.endpoint = "cvm.tencentcloudapi.com"

        clientProfile = ClientProfile()
        clientProfile.httpProfile = httpProfile
        return cvm_client.CvmClient(cred, self.region, clientProfile)

    def set_request(self):
        req = models.DescribeInstancesRequest()
        req.Limit = self.page_size
        req.Offset = (self.page_number - 1) * self.page_size
        return req

    def get_response(self):
        request = self.set_request()
        return self.client.DescribeInstances(request)

    def get_server_count(self):
        response_data = self.get_response()
        return response_data.TotalCount

    def sleep(self, seconds):
        sleep_time_for_limiting(seconds)

    def list_page_instances(self):
        vpc_client = QcloudVpc(self.access_id, self.access_key, self.region)

        response_data = self.get_response()

        data = []
        vpc_ids = []
        for server in response_data.InstanceSet:
            item = json.loads(server.to_json_string())
            item["RegionId"] = self.region

            if (
                item["PrivateIpAddresses"] is not None
                and len(item["PrivateIpAddresses"]) > 0
            ):
                item["PrivateIP"] = item["PrivateIpAddresses"][0]
            if (
                item["PublicIpAddresses"] is not None
                and len(item["PublicIpAddresses"]) > 0
            ):
                item["PublicIP"] = item["PublicIpAddresses"][0]
            item["ProjectName"] = self.project_m[item["Placement"]["ProjectId"]]["Name"]

            if "OsName" in item:
                item["os"] = (
                    "Windows"
                    if item["OsName"].lower().find("window") != -1
                    else "Linux"
                )
            else:
                item["os"] = "Other"

            data.append(item)

            if item["VirtualPrivateCloud"]["VpcId"] is not None:
                vpc_ids.append(item["VirtualPrivateCloud"]["VpcId"])

        result = []
        vpc_info_d = vpc_client.show_vpcs_dict(vpc_ids)
        for item in data:
            if item["VirtualPrivateCloud"]["VpcId"] is not None:
                item["VpcId"] = item["VirtualPrivateCloud"]["VpcId"]
                item["VpcName"] = vpc_info_d[item["VpcId"]]["VpcName"]
            result.append(item)
        return result

    def list_instances(self):
        project_list = Project(
            self.access_id, self.access_key, self.region
        ).show_projects()
        project_m = {project["ProjectId"]: project for project in project_list}
        self.project_m = project_m

        count = self.get_server_count()
        if count % self.page_size:
            total_page_number = int(count / self.page_size) + 1
        else:
            total_page_number = int(count / self.page_size)

        result = []
        for cur_page_number in range(1, total_page_number + 1):
            self.page_number = cur_page_number
            self.sleep(max_times_describe_instances)
            page_instances = self.list_page_instances()
            result.extend(page_instances)
        return result

    def show(self):
        try:
            instance_list = self.list_instances()
            for instance in instance_list:
                print(json.dumps(instance, default=str))
        except Exception as e:
            if "该接口不支持此地域访问" in str(e):
                return []
            else:
                raise e


def main(access_id, access_key, region):
    try:
        Cvm(access_id, access_key, region).show()
    except Exception as e:
        print(f"同步腾讯云cvm资源出错. access_id: {access_id}, region: {region}", file=sys.stderr)
        raise e


if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2], sys.argv[3])
