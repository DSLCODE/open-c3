#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json
import subprocess


sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_cloud_qcloud_cbs import LibQcloudCbs


def get_volume_item(item, account, accountuuid, cvm_instance_id):
    item["RegionId"] = item["Placement"]["Zone"][:-2]
    item["ZoneId"] = item["Placement"]["Zone"]
    item["account"] = account
    item["accountuuid"] = accountuuid
    item["_vmuuid_"] = cvm_instance_id
    return item


def get_disk_ids(data_list):
    # account -> region -> {disk_id}
    data = {}
    # disk_id -> { account, accountuuid, cvm_instance_id }
    record_cvm_info = {}

    for cvm_instance in data_list:
        for disk_item in cvm_instance["DataDisks"]:
            if not disk_item["DiskId"].startswith("l"):
                if cvm_instance["account"] not in data:
                    data[cvm_instance["account"]] = {}
                
                if cvm_instance["RegionId"] not in data[cvm_instance["account"]]:
                    data[cvm_instance["account"]][cvm_instance["RegionId"]] = set()
                
                data[cvm_instance["account"]][cvm_instance["RegionId"]].add(disk_item["DiskId"])

                record_cvm_info[disk_item["DiskId"]] = {
                    "account": cvm_instance["account"],
                    "accountuuid": cvm_instance["accountuuid"],
                    "cvm_instance_id": cvm_instance["InstanceId"] 
                }

    return data, record_cvm_info


def run(data_list):
    data = []

    disk_account_to_ids, record_cvm_info = get_disk_ids(data_list)

    for account, region_disk_ids in disk_account_to_ids.items():
        for region, disk_ids in region_disk_ids.items():
            key_info = json.loads(
                subprocess.getoutput(f"c3mc-get-account-info qcloud {account}")
            )
            data_list = LibQcloudCbs(key_info["access_id"], key_info["access_key"], region).describe_disks_for_ids(list(disk_ids))

            for item in data_list:
                account = record_cvm_info[item["DiskId"]]["account"]
                accountuuid = record_cvm_info[item["DiskId"]]["accountuuid"]
                cvm_instance_id = record_cvm_info[item["DiskId"]]["cvm_instance_id"]
                data.append(get_volume_item(item, account, accountuuid, cvm_instance_id))
    return data


def main(data_list):
    if len(data_list) == 0:
        return
    result = run(data_list)

    for item in result:
        print(json.dumps(item, default=str))


if __name__ == "__main__":
    _data_list = [json.loads(line) for line in sys.stdin]
    main(_data_list)
