#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import json
import sys
import re
import subprocess
import threading
import time


sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_cloud_qcloud_dnspod import QcloudDnspod


class ThreadSafeArray:
    def __init__(self):
        self._array = []
        self._lock = threading.Lock()

    def append(self, value):
        with self._lock:
            self._array.append(value)


def extract_ips(text):
    ipv4_pattern = r'((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'
    ipv6_pattern = r'(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))'
    
    ipv4_addresses = re.findall(ipv4_pattern, text)
    ipv6_addresses = re.findall(ipv6_pattern, text)
    
    # re.findall返回的是一个列表，其中每个元素是一个元组，元组中的第一个元素是整个匹配的内容，后续元素是每个子组的匹配内容。因此，我们只取元组的第一个元素。
    ipv4_addresses = [match[0] for match in ipv4_addresses]
    ipv6_addresses = [match[0] for match in ipv6_addresses]
    
    return ipv4_addresses + ipv6_addresses


class Subdomains:
    def __init__(self, access_id, access_key):
        self.lib_client = QcloudDnspod(access_id, access_key)
    
    def get_product_owner(self, value):
        pass
    
    def get_backends_ip_of_lb(self, lb_uuid):
        cmd_parts = ["c3mc-cloud-control", "--uuid", lb_uuid, "--ctrl", "get-backend-servers", "none"]
        output = self.run_command(cmd_parts)
        # 因为查询不同lb返回的数据结构不一致，这里直接提取ip
        return extract_ips(output)
    
    def get_instance_uuid(self, instance_maybe_identifier):
        command = f"c3mc-device-find-uuid {instance_maybe_identifier}"
        result = subprocess.check_output(command, shell=True)
        parts = result.decode("utf-8").strip().split()
        if len(parts) > 1:
            print(f"通过命令 {command} 查询到了多个uuid {parts}", file=sys.stderr)
            exit(1)
        return parts[0]

    def get_ips_yewu_owner(self, ip_list):
        cmd_parts = ["c3mc-device-find-owner"] + ip_list
        output = self.run_command(cmd_parts)
        if not output:
            return []

        output = output.strip()
        if output == "":
            return []

        data = {}
        for line in output.split("\n"):
            parts = line.split(":")
            if len(parts) == 2 and parts[1].strip() != "unknown":
                data[parts[0]] = parts[1].strip()
        return data

    def run_command(self, cmd_parts):
        result = subprocess.run(cmd_parts, capture_output=True, text=True)
        if result.returncode != 0:
            print(result.stderr, file=sys.stderr)
            exit(1)
        result = result.stdout
        return result

    
    def get_resolve_ips(self, value):
        """返回解析ip列表
        """
        value = value.strip()
        if not value:
            return [value]
        
        # 尝试作为lb进行解析
        try:
            uuid = self.get_instance_uuid(value)
            ip_list = self.get_backends_ip_of_lb(uuid)
            if ip_list:
                return ip_list
        except Exception as e:
            if "nofind uuid in CMDB" in str(e):
                return [value]

        # 尝试提取ip
        ip_list = extract_ips(value)
        if ip_list:
            return ip_list
        
        return [value]
        

    def list_subdomains(self):
        array = ThreadSafeArray()
        threads = []
        max_threads = 50

        def worker(array, subdomain):

            # C3TODO
            # 查询业务负责人

            # value = subdomain["Value"]
            # ip_list = self.get_resolve_ips(value)
            # ip_to_yewu_owner = self.get_ips_yewu_owner(ip_list)

            # yewu_owner_list = [value for key, value in ip_to_yewu_owner.items()]
            # subdomain["ProductOwners"] = " ".join(yewu_owner_list)

            # print(f"{subdomain['Name']}, value: {value}, owners: { subdomain['ProductOwners'] }")

            array.append(subdomain)

        subdomains_list = self.lib_client.get_subdomains()
        for index, subdomain in enumerate(subdomains_list):
            while threading.active_count() > max_threads: 
                time.sleep(0.1)

            t = threading.Thread(target=worker, args=(array,subdomain))
            t.daemon = True
            threads.append(t)
            t.start()

        for t in threads:
            t.join()

        return array._array
            
    
    def display(self):
        subdomains_list = self.list_subdomains()
        for subdomain in subdomains_list:
            print(json.dumps(subdomain))
        

def main(access_id, access_key):
    try:
        Subdomains(access_id, access_key).display()
    except Exception as e:
        print(f"同步腾讯云dnspod资源出错. access_id: {access_id}", file=sys.stderr)
        raise e


if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2])
