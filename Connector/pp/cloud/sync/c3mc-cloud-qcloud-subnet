#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json

from tencentcloud.common import credential
from tencentcloud.common.profile.client_profile import ClientProfile
from tencentcloud.common.profile.http_profile import HttpProfile
from tencentcloud.vpc.v20170312 import vpc_client, models

sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_utils import sleep_time_for_limiting


# DescribeSubnets() 的接口请求频率限制
max_times_describe_subnets = 100


class Subnet:
    def __init__(self, access_id, access_key, region):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.page_number = 1
        self.page_size = 100
        self.client = self.create_client()

    def create_client(self):
        cred = credential.Credential(self.access_id, self.access_key)
        http_profile = HttpProfile()
        http_profile.endpoint = "vpc.tencentcloudapi.com"

        client_profile = ClientProfile()
        client_profile.httpProfile = http_profile
        return vpc_client.VpcClient(cred, self.region, client_profile)

    def set_request(self):
        req = models.DescribeSubnetsRequest()
        req.Limit = str(self.page_size)
        req.Offset = str((self.page_number - 1) * self.page_size)
        return req

    def get_response(self):
        request = self.set_request()
        return self.client.DescribeSubnets(request)

    def get_server_count(self):
        response_data = self.get_response()
        return response_data.TotalCount

    def list_instance(self):
        response_data = self.get_response()
        response_data = json.loads(response_data.to_json_string())

        result = []
        for instance in response_data["SubnetSet"]:
            instance["RegionId"] = self.region
            result.append(instance)
        return result

    def show(self):
        instance_list = self.list_instance()
        for instance in instance_list:
            print(json.dumps(instance, default=str))

    def sleep(self):
        sleep_time_for_limiting(max_times_describe_subnets)

    def page(self):
        count = self.get_server_count()
        if count % self.page_size:
            total_page_number = int(count / self.page_size) + 1
        else:
            total_page_number = int(count / self.page_size)

        for cur_page_number in range(1, total_page_number + 1):
            self.page_number = cur_page_number
            self.sleep()
            self.show()


def main(access_id, access_key, region):
    try:
        Subnet(access_id, access_key, region).page()
    except Exception as e:
        print(f"同步腾讯云subnet资源出错. access_id: {access_id}, region: {region}", file=sys.stderr)
        raise e


if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2], sys.argv[3])
