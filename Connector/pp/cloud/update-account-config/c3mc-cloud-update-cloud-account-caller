#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import os
import time
import subprocess
import sys
from pathlib import Path
import shutil

# 当前的accountdb目录
CURRENT_ACCOUNTDB = "/data/Software/mydan/AGENT/device/conf/accountdb"
# 备份的上一次的accountdb目录。用于判断账号是否发生变更
LAST_ACCOUNTDB = "/data/Software/mydan/AGENT/device/conf/accountdb.last"


def get_resource_type_from_template(cloud):
    output = subprocess.run(
        ["c3mc-cloud-get-resource-type-list", cloud], capture_output=True, text=True)
    if output.returncode != 0:
        print(output.stderr, file=sys.stderr)
        exit(1)
    return [item.strip() for item in output.stdout.split("\n") if item.strip() != ""]


def get_resource_type_from_extaccount(cloud):
    dir_path = '/data/Software/mydan/AGENT/device/conf/account'
    prefix = f"{cloud}."

    return [
        filename[len(prefix):]
        for filename in os.listdir(dir_path)
        if filename.startswith(prefix)
    ]


def backup_last_accountdb():
    def copy_files(dir1, dir2):
        # 如果源目录不存在，则直接返回
        if not os.path.exists(dir1) or not os.path.isdir(dir1):
            print(f"源目录不存在: {dir1}")
            return

        # 如果目标目录不存在，则创建目标目录
        if not os.path.exists(dir2):
            os.makedirs(dir2)

        # 遍历源目录下的所有文件，并复制到目标目录
        for file in os.listdir(dir1):
            src_file = os.path.join(dir1, file)
            dest_file = os.path.join(dir2, file)

            # 只复制文件，跳过目录
            if os.path.isfile(src_file):
                shutil.copy2(src_file, dest_file)
    copy_files(CURRENT_ACCOUNTDB, LAST_ACCOUNTDB)


def gen_md5_for_account():
    cmd_parts = ["c3mc-cloud-gen-md5-for-account"]
    output = subprocess.run(cmd_parts, capture_output=True, text=True)
    if output.returncode != 0:
        print(output.stderr, file=sys.stderr)
        exit(1)


def check_if_resource_type_change(cloud) -> bool:
    # 检查是否有新增资源类型需要创建对应扩展账号文件
    template_resource_type_list = get_resource_type_from_template(cloud)
    extaccount_resource_type_list = get_resource_type_from_extaccount(cloud)
    for item in extaccount_resource_type_list:
        if item in template_resource_type_list:
            template_resource_type_list.remove(item)
    return len(template_resource_type_list) > 0

def check_if_accountx_change(cloud) -> bool:
    # 检查是否最近有修改原始账号文件
    filepath = f'/data/Software/mydan/AGENT/device/conf/accountx/{cloud}x'
    return (
        time.time() - os.path.getmtime(filepath) < 600
        if os.path.isfile(filepath)
        else False
    )

def check_if_accountdb_change() -> bool:
    def compare_directories(dir1, dir2):
        if not os.path.exists(dir1) or not os.path.exists(dir2):
            return False

        # 获取两个目录下的文件列表
        dir1_files = sorted([f for f in os.listdir(dir1) if os.path.isfile(os.path.join(dir1, f))])
        dir2_files = sorted([f for f in os.listdir(dir2) if os.path.isfile(os.path.join(dir2, f))])
        
        # 比较文件列表
        if dir1_files != dir2_files:
            return True

        # 比较同名文件的内容（忽略空白行）
        for filename in dir1_files:
            with open(os.path.join(dir1, filename), 'r') as file1, open(os.path.join(dir2, filename), 'r') as file2:
                file1_lines = [line.strip() for line in file1 if line.strip()]
                file2_lines = [line.strip() for line in file2 if line.strip()]

                if file1_lines != file2_lines:
                    return True
        return False

    return compare_directories(CURRENT_ACCOUNTDB, LAST_ACCOUNTDB)


def update_accounts():
    current_unix_seconds = str(int(time.time()))
    file_path = f"/tmp/update_cloud_account_caller/update_cloud_account_caller_{current_unix_seconds}"
    if os.path.isfile(file_path):
        return

    path = Path(file_path)
    path.parent.mkdir(parents=True, exist_ok=True)
    open(file_path, "w").close()

    try:
        ok = check_if_accountdb_change()
        if not ok:
            for cloud in ["aliyun", "aws", "google", "huawei", "ksyun", "qcloud"]:
                ok = check_if_resource_type_change(cloud) or check_if_accountx_change(cloud)
                if ok:
                    break
        if ok:
            os.system('/usr/bin/c3mc-cloud-update-cloud-account')
    except Exception as e:
        raise RuntimeError("解压账号文件时出现错误.") from e
    finally:
        os.remove(file_path)


def main():
    # 账号生成
    update_accounts()
    # 对账号行计算md5并保存相关信息
    gen_md5_for_account()
    # 备份当前的accountdb目录为accountdb.last 
    # 这样做的目的是为了方便判断账号配置是否发生变动
    backup_last_accountdb()


if __name__ == '__main__':
    main()
