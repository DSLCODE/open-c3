#!/data/Software/mydan/perl/bin/perl
use strict;
use warnings;

binmode STDIN,  ':utf8';
binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';

$|++;

use YAML::XS;
use JSON;

=head1 SYNOPSIS

 $0 treeid timemachine

=cut

my ( $treeid, $timemachine ) = @ARGV;
die unless $timemachine;

sub gettreename
{
    my $treeid = shift @_;
    my @x = `c3mc-base-treemap cache| grep "^$treeid;"|awk -F';'  '{print \$2}'`;
    chomp @x;
    die "get treename by id: $treeid fail" unless @x;
    return $x[0];
};

sub getmenu
{
    my %param = @_;
    my $param = \%param;

    $param->{treeid} = 0 if $param->{treeid} eq 4000000000;

    my %re = map{ $_ => [] }qw( compute database domain networking others storage );
    return \%re if $param->{treeid} >= 4000000000;

    my $greptreename = $param->{treeid} == 0 ? undef : eval{ gettreename( $param->{treeid} ) };;
    die "gettreename fail: $@" if $@;

    my %tmpre;
    my @x = `c3mc-device-bind-info-cache get '$param->{timemachine}'`;
    chomp @x;
    for ( @x )
    {
        my ( $type, $subtype, $uuid, $treename ) = split /\t/, $_;
        if( $greptreename )
        {
            my @treename = split /,/, $treename;
            my $match = 0;
            map{
                $match = 1 if $_ eq $greptreename || index( $_, "$greptreename.") == 0;
            }@treename;
            next unless $match;
        }
        $tmpre{$type}{$subtype} ++;
    }

    for my $type ( keys %tmpre )
    {

        for my $subtype ( keys %{$tmpre{$type}} )
        {
            push @{$re{$type}}, [ $subtype, $tmpre{$type}{$subtype} ];
        }

    }

    my ( %re2, %subtypecount, %max );

    for my $type (  keys %re )
    {
        $re2{$type} = +{};
        for my $subtype ( @{ $re{$type} } )
        {
            my ( $name, $count ) = @{ $subtype };
            my ( $g, @alias ) = split /-/, $name;
            $subtypecount{$type}{$g} ++;
            $re2{$type}{$g} ||= [];
            push @{ $re2{$type}{$g}}, [ $g, @$subtype, join "-", @alias ];
            $max{$type} ||= 0;
            $max{$type} = @{ $re2{$type}{$g}} - 1 if $max{$type} < @{ $re2{$type}{$g}} - 1;
        }
    }

    for my $type (  keys %re )
    {
        for my $group ( keys %{ $re2{ $type  } } )
        {
            for ( 1.. 15 )
            {
                next unless @{ $re2{ $type  }{ $group }} <= $max{$type};
                push @{ $re2{ $type  }{ $group }}, [];
            }
        }
    }

    my %re3;
    for my $type ( keys %re2 )
    {
        $re3{ $type } = [];
        for my $group ( sort{ $subtypecount{$type}{$b} <=> $subtypecount{$type}{$a} }keys %{ $re2{ $type } } )
        {
            my @x = @{ $re2{ $type }{ $group } };
            map{ push @{ $re3{ $type }[ $_] }, $x[$_]  } 0 .. @x -1;
        }
    }

    return data => \%re3;
};

my $x = getmenu( treeid => $treeid, timemachine => $timemachine );
print YAML::XS::Dump $x;
