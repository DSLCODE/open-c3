#!/data/Software/mydan/perl/bin/perl
use strict;
use warnings;

binmode STDIN,  ':utf8';
binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';

$|++;

use YAML::XS;

=head1 SYNOPSIS

 $0 type subtype

=cut

my ( $type, $subtype ) = @ARGV;
die unless $subtype;

my $conf = eval{ YAML::XS::LoadFile "/data/open-c3-data/device/curr/$type/$subtype/treeinfo.yml" };
die "load conf fail: $@" if $@;
die "config err" unless $conf && ref $conf eq 'HASH' && $conf->{treename} && $conf->{treeinfo} && ref $conf->{treeinfo} eq 'ARRAY';

my    @treemap = `c3mc-base-treemap`;
chomp @treemap;

my %treemap;
map{
    my @x = split /;/, $_, 2;
    $treemap{ $x[1] } = $x[0];
}@treemap;

sub _treename2tid
{
    my ( $treename, @id ) = shift @_;
    return () unless  $treename;
    my @subname = split /\./, $treename;
    while( @subname )
    {
        my $tname = join '.', @subname;
        push @id, $treemap{ $tname } if $treemap{ $tname };
        pop @subname;
    }
    return @id;
}

sub treename2tid
{
    my ( $treename, %id ) = shift @_;
    return () unless  $treename;

    map{
        map{ $id{ $_ } = 1 } _treename2tid( $_ )
    }split /,/, $treename;

    return keys %id;
}

my    @data  = `c3mc-device-cat curr $type $subtype`;
chomp @data;

exit unless @data > 1;

my $title = shift @data;

utf8::decode( $title );
my @title = split /\t/, $title;

my %node;

for my $data ( @data )
{
    utf8::decode( $data );
    my @d = split /\t/, $data;
    my %d = map{ $title[ $_ ] => $d[ $_ ] } 0 .. @title - 1;

    my %res;
    for ( @{$conf->{treeinfo}} )
    {
        my ( $colname, $tagname ) = @$_;
        $res{ $tagname } = $d{ $colname };
    }

    my $treename = $d{ $conf->{treename} };
    my @tid = treename2tid( $treename );
    for ( @tid )
    {
        my %x = ( %res, type => 'device' );
        my $x = join ',', map{ "$_=\"$x{$_}\"" } sort keys %x;
        printf "treeinfo{%s,tid=>\"$_\"} 1\n", $x;
        $node{ $_ }{ $x } = 1;
    }
}

my    @unbind = `c3mc-base-db-get treeid --table openc3_monitor_config_treeunbind -f status=1`;
chomp @unbind;

#my    @treemap = `c3mc-base-treemap`;
#chomp @treemap;

my ( %id2name, %name2id );

for(@treemap)
{
    my ( $id, $name ) = split /;/, $_;
    next unless $name;
    $id2name{ $id   } = $name;
    $name2id{ $name } = $id;
}

sub findparentids
{
    my $id = shift @_;
    my @id;
    die "nofind" unless my $treename = $id2name{ $id };
    my @tree = split /\./, $treename;
    while( @tree )
    {
        pop @tree;
        last unless @tree;
        my $name = join '.', @tree;
        push @id, $name2id{ $name };
    }
    return @id;
}

for my $treeid ( @unbind )
{
    my @node;
    @node = keys %{ $node{ $treeid }} if $node{ $treeid } ;
    next unless @node;

    my @parentid = eval{ findparentids( $treeid ) };
    if( $@ )
    {
        warn "get treeid $treeid parent fail: $@";
        next;
    }

    next unless @parentid;

    for my $parentid  ( @parentid )
    {
        next unless $node{ $parentid };
        map{ delete $node{ $parentid }{ $_ } }@node;
    }
}

for my $id ( keys %node )
{
    map{ printf "treeinfo{%s,eid=\"%d\"} 1\n", $_, $id; }keys %{ $node{ $id }};
}
