#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/JOB/lib
use strict;
use warnings;

$|++;

use YAML::XS;
use uuid;
use POSIX;
use Time::Local;

=head1 SYNOPSIS

 $0

=cut

local $/ = undef;
my @data = YAML::XS::Load( <STDIN> );
local $/ = "\n";

sub gettime
{
    my $t = shift;
    return $t unless $t =~ /^(\d+)-(\d+)-(\d+)T(\d+):(\d+):(\d+)\.\d+Z$/;
    my $x = timelocal($6,$5,$4,$3,$2-1,$1);
    return POSIX::strftime( "%Y-%m-%dT%H:%M:%S", localtime( $x + 8 * 3600) );
}

my @out;
sub adduser
{
    my $data = shift @_;
    unless( $data && ref $data eq 'HASH'
        && defined $data->{'fingerprint'         } && $data->{'fingerprint'         } =~ /^[a-zA-Z0-9]+$/
        && defined $data->{'startsAt'            } && $data->{'startsAt'            } =~ /^[a-zA-Z0-9:\.\-]+$/
        && defined $data->{'labels.fromtreeid'   } && $data->{'labels.fromtreeid'   } =~ /^\d+$/
    )
    {
        push @out, $data;
        return;
    }

    my $caseuuid = join '.',$data->{'fingerprint'}, gettime( $data->{'startsAt'} );
    my $treeid   = $data->{'labels.fromtreeid'};
    my $uuid     = uuid->new()->create_str;
    my $time     = time;

    if(
        ( $data->{'labels.job'} eq 'openc3' || $data->{'labels.job'} eq 'openc3-node-alive' ) &&
        ( $data->{status} eq 'resolved' ) &&
        ( $data->{'labels.instance'} =~ /^\d+\.\d+\.\d+\.\d+$/ )
    )
    {
        my @x  = `cat /data/Software/mydan/prometheus/config/openc3_node_sd.yml |grep /metrics/`;
        chomp @x;
        my @xx = grep{ $_ =~ /\/$data->{'labels.instance'}$/ }@x;
        return if @x && ! @xx;
    }

    if(
        ( $data->{'labels.job'} eq 'openc3-mysql-v3' || $data->{'labels.job'} eq 'openc3-redis-v3' || $data->{'labels.job'} eq 'openc3-mongodb-v3' ) &&
        ( $data->{status} eq 'resolved' ) &&
        ( $data->{'labels.instance'} =~ /^\d+\.\d+\.\d+\.\d+:\d+$/ )
    )
    {
        my $filename = "openc3_mysql_sd_v3.yml";
        $filename    = "openc3_redis_sd_v3.yml"   if $data->{'labels.job'} eq 'openc3-redis-v3';
        $filename    = "openc3_mongodb_sd_v3.yml" if $data->{'labels.job'} eq 'openc3-mongodb-v3';

        my @x  = `cat /data/Software/mydan/prometheus/config/$filename |grep /metrics/`;
        chomp @x;
        my @xx = grep{ $_ =~ /\/$data->{'labels.instance'}$/ }@x;
        return if @x && ! @xx;
    }

    if(
        ( $data->{'labels.serialcall'} )  &&
        ( ( $data->{status} eq 'resolved' ) )
    )
    {
        system( "c3mc-mon-serialcall-ctrl --cleancase '$caseuuid'" );
    }

    my @acked = `c3mc-base-db-get id --table openc3_monitor_ack_active --filter "(uuid='$data->{fingerprint}' or uuid='$caseuuid' ) and type='G' and expire>$time"`;
    return if @acked;

    if( $data->{status} eq 'firing' )
    {
        my @dealed = `c3mc-base-db-get id --table openc3_monitor_serialcall_deal --filter "caseuuid='$caseuuid'"`;
        return if @dealed;
    }

    if( $data->{status} eq 'resolved' && defined $data->{'labels.fromtreeid'} && defined $data->{'labels.instance'} && defined $data->{'labels.alertname'}
        && $data->{'labels.fromtreeid'} !~ /'/ && $data->{'labels.instance'} !~ /'/ && $data->{'labels.alertname'} !~ /'/
    )
    {
        my $x = `c3mc-mon-prometheus-alerts-check '$data->{'labels.fromtreeid'}' '$data->{'labels.instance'}' '$data->{'labels.alertname'}'`;
        chomp $x;
        if( $x && $x eq '1' )
        {
            my $tmpdir = "/data/open-c3-data/monitor-debug";
            system "mkdir -p '$tmpdir'" unless -d $tmpdir;
            eval{ YAML::XS::DumpFile( sprintf( "$tmpdir/%s.%04d", time, int rand 10000 ), $data ) };
            return;
        }
    }

    $data->{ack} = $uuid;
    $data->{c3monitormsguuid} = $caseuuid;

    my $labels = join ',', map{ "$_=$data->{$_}" }sort grep{ /^annotations/ || /^labels/}keys %$data;
    $labels =~ s/'|"//g;
    system "c3mc-base-db-ins -t openc3_monitor_ack_table fingerprint '$data->{fingerprint}' caseuuid '$caseuuid' ackuuid '$uuid' treeid '$treeid' labels '$labels'";
    push @out, $data;
}

map{ adduser($_ ) }@data;

print YAML::XS::Dump @out;
