#!/data/Software/mydan/perl/bin/perl
use strict;
use warnings;

$|++;

use POSIX;

=head1 SYNOPSIS

 $0

=cut

#bash
#cat /data/Software/mydan/AGENT/conf/promesd.temp|awk -F';' '{printf "treeinfo{instance=\"%s\",tid=\"%d\"} 1\n",$2,$1}'

my    @x = `cat /data/Software/mydan/AGENT/conf/promesd.temp /data/Software/mydan/AGENT/conf/promesdmysql.temp /data/Software/mydan/AGENT/conf/promesdredis.temp /data/Software/mydan/AGENT/conf/promesdmongodb.temp`;
chomp @x;

my $temppath = "/data/open-c3-data/monitor-trash";
my @olddate = map{ POSIX::strftime( "%Y-%m-%d", localtime( time - $_ * 86400 ) ); }0..1;
my %oldip;
for( reverse @olddate )
{
    my $file = "$temppath/$_";
    next unless -f $file;
    my @x = `cat '$file'`;
    chomp @x;

    for( @x )
    {
        my ( $oldip, $treeidstr ) = split /:/, $_;
        map{ $oldip{$oldip}{$_} = 1; }grep{$_ =~ /^\d+$/ }split /,/, $treeidstr;
    }
}

my %newip;
for( @x )
{
    my ( $id, $node ) = split /;/, $_;
    $newip{$node} ++;
}

for my $ip ( keys %oldip )
{
    next if $newip{$ip};
    for my $treeid( keys %{ $oldip{$ip} } )
    {
        push @x, "$treeid;$ip";
    }
}

my %node;
for( @x )
{
    my ( $id, $node ) = split /;/, $_;
    next unless $node;
    printf "treeinfo{instance=\"%s\",tid=\"%d\"} 1\n", $node, $id;
    $node{ $id }{$node } = 1 if $node;
}

my    @unbind = `c3mc-base-db-get treeid --table openc3_monitor_config_treeunbind -f status=1`;
chomp @unbind;

my    @treemap = `c3mc-base-treemap`;
chomp @treemap;

my ( %id2name, %name2id );

for(@treemap)
{
    my ( $id, $name ) = split /;/, $_;
    next unless $name;
    $id2name{ $id   } = $name;
    $name2id{ $name } = $id;
}

sub findparentids
{
    my $id = shift @_;
    my @id;
    die "nofind" unless my $treename = $id2name{ $id };
    my @tree = split /\./, $treename;
    while( @tree )
    {
        pop @tree;
        last unless @tree;
        my $name = join '.', @tree;
        push @id, $name2id{ $name };
    }
    return @id;
}

for my $treeid ( @unbind )
{
    my @node;
    @node = keys %{ $node{ $treeid }} if $node{ $treeid } ;
    next unless @node;

    my @parentid = eval{ findparentids( $treeid ) };
    if( $@ )
    {
        warn "get treeid $treeid parent fail: $@";
        next;
    }

    next unless @parentid;

    for my $parentid  ( @parentid )
    {
        next unless $node{ $parentid };
        map{ delete $node{ $parentid }{ $_ } }@node;
    }
}

for my $id ( keys %node )
{
    map{ printf "treeinfo{instance=\"%s\",eid=\"%d\"} 1\n", $_, $id; }keys %{ $node{ $id }};
}
