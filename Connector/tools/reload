#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib
use strict;
use warnings;
use FindBin qw( $RealBin );
use YAML::XS;
use uuid;

=head1 SYNOPSIS

 $0

=cut

print "reload connector\n";

my $Config = eval{ YAML::XS::LoadFile "$RealBin/../config/Config";};
die "load Config fail: $!" unless $Config;

my $envname = `cat $RealBin/../conf/envname`;
chomp $envname;
die "envname undef" unless $envname;

die "envname $envname undef in Config" unless $Config = $Config->{$envname};

die "port undef" unless my $port = $Config->{port};

my $tokenfile = "/etc/openc3.reload.token";
unless( -f $tokenfile )
{
    my $uuid = uuid->new()->create_str;
    system "echo $uuid > $tokenfile";
}

my $token = `cat $tokenfile 2>/dev/null`; chomp $token;

for my $type ( qw( api ) )
{
    for my $port ( $port->{$type}{from} .. $port->{$type}{to} )
    {
        my $oldpid = `/usr/sbin/lsof -i:$port|tail -n 1|awk '{print \$2}'`;
        chomp $oldpid;

        system "curl -H 'token:$token' localhost:$port/reload 2>/dev/null";

        my $newpid;
        for my $index ( 1 .. 30 )
        {
            print "check api ...\n";
            $newpid = `/usr/sbin/lsof -i:$port|tail -n 1|awk '{print \$2}'`;
            if( $newpid )
            {
                chomp $newpid;
                last;
            }
            else
            {
                die "reload port $port fail.\n" if $index == 30;
                sleep 1;
            }
        }

        print "reload $type port: $port old pid: $oldpid new pid: $newpid\n";
        die "same pid.\n" if $oldpid && $newpid && $oldpid eq $newpid;
    }
}

my $mymarkfile = '/etc/connector.mark';
my $user = `id -un`;chop $user;
my $sudo = $user eq 'root' ? '' : 'sudo ';

die "set connector.mark fail:$!" if system( "${sudo}sh -c 'date > $mymarkfile'" );
