#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/JOB/lib -I/data/Software/mydan/JOB/private/lib
use strict;
use warnings;
use MYDan::Util::OptConf;
use FindBin qw( $RealBin );
use OPENC3::PP::Pipe;
use File::Temp;
use JSON;

=head1 SYNOPSIS

 $0 bpmuuid action

=cut

my $option = MYDan::Util::OptConf->load();
$option->assert() unless @ARGV >= 2;

my ( $bpmuuid, $action, @idx ) = @ARGV;

die "bpmuuid err" unless $bpmuuid && $bpmuuid =~ /^BPM\d+$/;
die "action err"  unless $action  && $action  =~ /^[a-zA-Z0-9][a-zA-Z0-9\-_\.]+$/;

map{ die "idx format error" unless $_ =~ /^[a-zA-Z0-9]+$/  }@idx;

my    @x = `$RealBin/taskcfg '$bpmuuid' '$action' @idx`;
chomp @x;

# C3TODO 已经执行成功的在重试时跳过,不要重复执行。

if( @x )
{
    my $c = eval{ JSON::from_json $x[0] };
    die "load data from json fail: $@" if $@;
    @x = ( join "\n", @x ) if $c->{'_sys_multi_'};
}

my $path = "/data/Software/mydan/JOB/bpm/task/$bpmuuid.data/succ";
system "mkdir -p '$path'" unless -d $path;

for my $x ( @x )
{
    my @stepuuid;
    for( split /\n/, $x )
    {
         my $c = eval{ JSON::from_json $_ };
         die "load json fail: $@" if $@;
         push @stepuuid, $c->{_step_uuid_};
    }

    map{ next if -f "$path/$_" }@stepuuid;

    my ( $TEMP, $tempfile ) = File::Temp::tempfile();
    print $TEMP $x;
    close $TEMP;
    
    die "err" if OPENC3::PP::Pipe::system( "cat '$tempfile' | c3mc-bpm-action-$action | $RealBin/logrecord --bpmuuid '$bpmuuid' --step '$idx[0]'" );

    map{
        die "touch file fail: $@" if system "date >> $path/$_";
    }@stepuuid;
}
