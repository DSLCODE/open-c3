#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import urllib
import urllib2
import datetime
import sys
import os

from tencentcloud.common import credential
from tencentcloud.common.exception.tencent_cloud_sdk_exception import TencentCloudSDKException
from tencentcloud.cdn.v20180606 import cdn_client, models

def QcloudPush():
    push_states = {}
    parser = argparse.ArgumentParser()
    parser.add_argument("file", help="文件名")
    parser.add_argument("domain", help="域名")
    parser.add_argument('-f', '--file', help="文件", action="store_true")
    parser.add_argument('-d', '--domain', help="域名", action="store_true")
    args = parser.parse_args()

    with open(args.file) as f:
        for i in f:
            push_data = i.strip().split(':')
            if push_data[0] in push_states:
                url = 'http://' + args.domain + '/' + push_data[1]
                push_states[push_data[0]].append(url)
            else:
                push_states[push_data[0]] = []
                url = 'http://' + args.domain + '/' + push_data[1]
                push_states[push_data[0]].append(url)
    for k, v in push_states.items():
        a = qcloud(k, v)
        if a != 0:
            return 1
    return 0

def qcloud(push_type, push_uri):
    limit = 100;
    url = [];
    for u in push_uri:
        url.append(u);
        if limit == len(url):
            a = _cdn(push_type, url)
            if a != 0:
                return 1
            url = [];
    if len(url):
        a = _cdn(push_type, url)
        if a != 0:
            return 1
    return 0;

def _cdn(push_type, push_uri):
    if push_type == 'f':
        a = __cdn( push_uri, [] )
	return a;
    if push_type == 'd':
        a = __cdn( [], push_uri )
	return a;
    return 1;

def __cdn(url, dir):
    '''腾讯'''
    print 'qcloud';

    cred = credential.Credential(os.getenv('openc3_cdnrefresh_qcloud_secretId'), os.getenv('openc3_cdnrefresh_qcloud_secretKey'))
    client = cdn_client.CdnClient(cred, "ap-shanghai")

    try:
        if len(url):
            req = models.PurgeUrlsCacheRequest( )
            req.Urls = url
            resp = client.PurgeUrlsCache(req)
            print(resp.to_json_string())
        if len(dir):
            req = models.PurgePathCacheRequest( )
            req.FlushType = 'flush'
            req.Paths = dir
            resp = client.PurgePathCache(req)
            print(resp.to_json_string())
    except Exception, e:
        print 'exception:', e
        return 1;
    return 0

    
if __name__ == '__main__':
    try:
        if QcloudPush() == 0:
            sys.exit(0)
        else:
            sys.exit(1)
    except Exception as e:
        sys.exit(1)
