#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import sys
import urlparse
import httplib
import hashlib
import urllib
import json
import os

def UcloudPush():
    push_states = {}
    parser = argparse.ArgumentParser()
    parser.add_argument("file", help="文件名")
    parser.add_argument("domain", help="域名")
    parser.add_argument("key", help="域名")
    parser.add_argument('-f', '--file', help="文件", action="store_true")
    parser.add_argument('-d', '--domain', help="域名", action="store_true")
    parser.add_argument('-k', '--keyId', help="key", action="store_true")
    args = parser.parse_args()

    with open(args.file) as f:
        for i in f:
            push_data = i.strip().split(':')
            if push_data[0] in push_states:
                url = 'http://' + args.domain + '/' + push_data[1]
                push_states[push_data[0]].append(url)
            else:
                push_states[push_data[0]] = []
                url = 'http://' + args.domain + '/' + push_data[1]
                push_states[push_data[0]].append(url)

    for k, v in push_states.items():
        a = ucloudcdn(k, v, args.key)
        if a != 0:
            return 1
    return 0


def _verfy_ac(private_key, params):
    items = params.items()
    items.sort()

    params_data = ""
    for key, value in items:
        params_data = params_data + str(key) + str(value)

    params_data = params_data + private_key
    '''use sha1 to encode keys'''
    hash_new = hashlib.sha1()
    hash_new.update(params_data)
    hash_value = hash_new.hexdigest()
    return hash_value


class UConnection(object):
    def __init__(self, base_url):
        self.base_url = base_url
        o = urlparse.urlsplit(base_url)
        if o.scheme == 'https':
            self.conn = httplib.HTTPSConnection(o.netloc)
        else:
            self.conn = httplib.HTTPConnection(o.netloc)

    def __del__(self):
        self.conn.close()

    def get(self, resouse, params):
        resouse += "?" + urllib.urlencode(params)
        self.conn.request("GET", resouse)
        response = json.loads(self.conn.getresponse().read())
        return response


class UcloudApiClient(object):
    def __init__(self, base_url, public_key, private_key, project_id):
        self.g_params = {}
        self.g_params['PublicKey'] = public_key
        self.private_key = private_key
        self.project_id = project_id
        self.conn = UConnection(base_url)

    def get(self, uri, params):
        _params = dict(self.g_params, **params)
        if self.project_id:
            _params["ProjectId"] = self.project_id
        _params["Signature"] = _verfy_ac(self.private_key, _params)
        return self.conn.get(uri, _params)


def ucloudcdn(push_type, push_uri, key):
    '''ucloud 刷新'''
    try:
        if push_type == 'f':
            Parameters = {"Action": "RefreshUcdnDomainCache",
                          "DomainId": key, "Type": "file", "UrlList.0": ','.join(push_uri)}
        if push_type == 'd':
            Parameters = {"Action": "RefreshUcdnDomainCache",
                          "DomainId": key, "Type": "dir", "UrlList.0": ','.join(push_uri)}
        public_key = os.getenv('openc3_cdnrefresh_ucloud_public_key')
        private_key = os.getenv('openc3_cdnrefresh_ucloud_private_key')
        project_id = os.getenv('openc3_cdnrefresh_ucloud_project_id') # 项目ID 请在Dashbord 上获取
        base_url = "https://api.ucloud.cn"
        ApiClient = UcloudApiClient(
            base_url, public_key, private_key, project_id)
        response = ApiClient.get("/", Parameters)
        # status_json = json.dumps(response, sort_keys=True,
        # indent=4, separators=(',', ':'))
        status = json.loads(json.dumps(response))
        if status['RetCode'] == 0:
            print status
            return 0
        else:
            return 1
    except Exception as e:
        print e
        return 1


if __name__ == '__main__':
    sys.exit(0)
