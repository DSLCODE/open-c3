#!/data/Software/mydan/perl/bin/perl
use strict;
use warnings;
use Paws;
use YAML::XS;
use File::HomeDir;
use FindBin qw( $RealBin );


$SIG{ALRM} = sub{ die "timeout.\n"; };
my $timeout = $ENV{TIMEOUT} || 6;
alarm $timeout;

die "onnode" unless $ENV{NODE};
my $account = $ENV{USER};
my ( $region, $elbname ) = @ARGV;
die "no account" unless $account && $account =~ /^[a-zA-Z0-9]+$/;
die "no region" unless $region && $region =~ /^[a-zA-Z0-9_\-]+$/;
die "no elbname" unless $elbname && $elbname =~ /^[a-zA-Z0-9_\-]+$/;

$ENV{AWS_CONFIG_FILE} = File::HomeDir->my_home . "/.aws/credentials_$account";
die "nofind AWS_CONFIG_FILE\n" unless -f $ENV{AWS_CONFIG_FILE};

my ( @ip, %id2ip ) = grep{ /^\d+\.\d+\.\d+\.\d+$/ }split /,/, $ENV{NODE};
my $x = `$RealBin/elb.rely/ec2.instance_id -r '$region' @ip`;

my $instance_id = eval{ YAML::XS::Load $x };
die "ec2.instance_id fail: $@" if $@;
map{ $id2ip{$instance_id->{$_}} = $_; }keys %{$instance_id};

my $aws = Paws->new;
my $elb = $aws->service( 'ELB', region => $region );

my $r = $elb->RegisterInstancesWithLoadBalancer( LoadBalancerName => $elbname, Instances => [ map{ +{ InstanceId => $_} }keys %id2ip ]);
my @iid = map{ $_->{InstanceId} }@{$r->{Instances}};
my %ok;
map{ warn sprintf "$_%s\n", $id2ip{$_} ? "(ip:$id2ip{$_})" : ''; $ok{$id2ip{$_}} ++ if $id2ip{$_}; }@iid;

map{ print "$_:ok\n"; } grep{ $ok{$_}  }split /,/, $ENV{NODE};
