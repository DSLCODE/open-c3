#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/JOB/lib -I/data/Software/mydan/JOB/private/lib
use strict;
use warnings;
use Util;
use JSON;
use IPC::Open3;

$| ++;

=head1 SYNOPSIS

    'finishtime' => '2018-01-20 17:15:54',
    'status' => 'fail',
    'calltype' => 'page',
    'name' => 'foo',
    'id' => 57,
    'uuid' => 'ByrweYI7PQHJ',
    'user' => 'debug@job',
    'projectid' => 1,
    'starttime' => '2018-01-20 17:15:21',
     notifytype => 'notify'

    to => [ 'foo@job.com', '123@job.com' ],

    'environment' => {
        notifyTemplateEmailTitle => 'projectid: ${projectid} job ${status}',
        notifyTemplateEmailContent => 'task ${uuid} :${status}',
        notifyTemplateSmsContent => 'projectid=${projectid} taskuuid=${uuid}: ${status}',
    }


=cut

return sub
{
    my %param = @_;

    return 1 unless @{$param{to}};

    my %data = map{ $_ => $param{environment}{$_} } map{ "$param{notifytype}$_" }qw( TemplateEmailTitle TemplateEmailContent );

    while( my ( $k, $v ) = each %param )
    {
        map{ $data{$_} =~ s/\$\{$k\}/$v/g }keys %data if defined $v;
    }

    my $pipe = "c3mc-base-send";
    my $pid = IPC::Open3::open3( my $chld_in, '>&STDOUT', '>&STDERR', $pipe);
    print $chld_in YAML::XS::Dump +{
        title   => $data{"$param{notifytype}TemplateEmailTitle"},
        content => $data{"$param{notifytype}TemplateEmailContent"},
        to      => $param{to}
    };
    $chld_in = undef;
    waitpid( $pid, 0 );
    warn "send mail fail."  if $?;

    return 1;
}
