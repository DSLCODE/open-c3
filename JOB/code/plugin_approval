#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/JOB/lib -I/data/Software/mydan/JOB/private/lib
use strict;
use warnings;

use FindBin qw( $RealBin );
use MIME::Base64;
use Data::Dumper;

use MYDan::Util::OptConf;
use MYDan::Agent::Client;
use MYDan::VSSH::Print;
use Digest::MD5;
use Code;
use Logs;
use variable;
use Buildin;
use uuid;
use Util;
use Encode;
use utf8;


$| ++;

=head1 SYNOPSIS

    db => $mysql,
    uuid => 'uuid',
    taskuuid => 'uuid', # Used to make a pause
    projectid => 1, ? check node info
    fromjob => jobuuid or undef , It is used to determine the subtask, Rely on the taskuuid . and the jobuuid use for variable replace
    variable => hash

    logs => 日志对象

    head => 0 or 1
    tail => 0 or 1

=cut

return sub
{
    my %param = @_;
    my ( $db, $uuid, $taskuuid, $projectid, $fromjob, $variable, $logs, $head, $tail )
        = @param{qw(db uuid taskuuid projectid fromjob variable logs head tail )};

    $logs = Logs->new( 'code.plugin_approval' ) unless $logs;

    if( $taskuuid )
    {
        open STDOUT, '>>', "$RealBin/../logs/task/${taskuuid}${uuid}approval" 
            or $logs->die( "Can't open 'logs/task/${taskuuid}${uuid}approval': $!" );
        open (STDERR, ">&STDOUT") or $logs->die( "open STDERR failed: $uuid" );
    }

    $logs->die( "uuid format error" ) unless $uuid =~ /^[a-zA-Z0-9]+$/;

    my $submitter = eval{ $db->query( "select user from openc3_job_task where uuid='$taskuuid'" );};
    $logs->die( "get submitter fail:$@" ) if $@;
    $logs->die( "nofind submitter" ) unless $submitter && @$submitter > 0;
    $submitter = $submitter->[0][0];

    my $x = eval{ $db->query( "select jobuuid,name,cont,approver,deployenv,action,batches,everyone,relaxed,timeout,pause from openc3_job_plugin_approval where uuid='$uuid'" );};
    $logs->die( "get plugin_approval info from mysql fail plugin_approval uuid=$uuid: $@" ) if $@;
    $logs->die( "get plugin_approval info from mysql fail plugin_approval uuid=$uuid" ) unless defined $x && ref $x eq 'ARRAY';
    $logs->die( "plugin_approval uuid mismatch uuid=$uuid" ) unless @$x;

    my ( $jobuuid, $name, $cont, $approver, $deployenv, $action, $batches, $everyone, $relaxed, $timeout, $pause ) = @{$x->[0]};
    if( $cont eq 'defaultTemplate' )
    {
        my $xx = eval{ $db->query( "select value from openc3_job_environment where `key`='approvalTemplatePluginContent'" );};
        $logs->die( "get approvalTemplatePluginContent from mysql fail $@" ) if $@;
        $cont = $xx->[0][0] if $xx && @$xx > 0 && $xx->[0][0];
    }

    my $xx = `c3mc-jobx-task-info-bysubuuid '$taskuuid'`;
    my $xxcc = eval { YAML::XS::Load $xx };
    $logs->die( "get yaml fail from c3mc-jobx-task-substat '$taskuuid': $@" ) if $@;
    $logs->die( "get yaml fail from c3mc-jobx-task-substat '$taskuuid': no HASH" ) unless $xxcc && ref $xxcc eq 'HASH';
    
    print YAML::XS::Dump $xxcc;

    $xxcc->{action}    ||= 'nofind';
    $xxcc->{deployenv} ||= 'nofind';
    $xxcc->{batches}   ||= 0;
    $xxcc->{groups}    ||= 0;
    $xxcc->{submitter} ||= 'nofind';
    $xxcc->{jobxuuid } ||= 'nofind';

    $xxcc->{deployjobxuuid} = $xxcc->{jobxuuid};
    $xxcc->{deployjobxuuid} =~ s/\w$/\L$&/;

    print "=" x 35, "\n";
    print "check ...\n";
    print "expect deployenv: $deployenv; real deployenv:$xxcc->{deployenv}\n";

    return 'success' if $deployenv eq 'test'   && $xxcc->{deployenv} ne 'test';
    return 'success' if $deployenv eq 'online' && $xxcc->{deployenv} ne 'online';
      
    print "expect action: $action; real action:$xxcc->{action}\n";
    if( $action eq 'deploy' && $xxcc->{action} ne 'deploy' )
    {
        if(
            length( $xxcc->{deployjobxuuid} ) == 12
            && $xxcc->{action} eq 'rollback'
            && (
                   ( $batches eq 'always' )
                || ( $batches eq 'firsttime'   && $xxcc->{batches} eq 1 )
                || ( $batches eq 'thelasttime' && $xxcc->{batches} eq $xxcc->{groups} )
                || ( $batches eq 'notfirsttime'   && $xxcc->{batches} ne 1 )
                || ( $batches eq 'notthelasttime' && $xxcc->{batches} ne $xxcc->{groups} )
             )
         )
        {
            #发布流程中的审批可能选择的是“仅发布时执行”。
            #紧急回滚时，发布任务会直接终止掉启动回滚任务。
            #所以这里需要判断，回滚的情况下，确认发布时候确实已经进行了审批。

            my $x = eval{ $db->query( "select id from openc3_job_plugin_approval_record where jobxuuid='$xxcc->{deployjobxuuid}' and pluginuuid='$uuid' and deployenv='$xxcc->{deployenv}'" );};
            die "get info err: $@" if $@;
            return 'success' if $x && @$x;
            print "Additional approval action\n";
        }
        else
        {
            return 'success';
        }
    }

    return 'success' if $action eq 'rollback' && $xxcc->{action} ne 'rollback';
      
    print "expect batches: $batches; real batches: $xxcc->{batches}\n";
    if( ( $batches eq 'firsttime' && $xxcc->{batches} ne 1 ) || ( $batches eq 'notthelasttime' && $xxcc->{batches} eq $xxcc->{groups} ) )
    {
        if(
            length( $xxcc->{deployjobxuuid} ) == 12
            && $xxcc->{batches} > 1
            && (
                   ( $action eq 'always' )
                || ( $action eq 'deploy'   && $xxcc->{action} eq 'deploy'   )
                || ( $action eq 'rollback' && $xxcc->{action} eq 'rollback' )
            )
        )
        {
            #在发布时，如果遇到前面的分批异常终止的情况下
            #这里判断，是否需要进行追加审批

            my $x = eval{ $db->query( "select id from openc3_job_plugin_approval_record where jobxuuid='$xxcc->{deployjobxuuid}' and pluginuuid='$uuid' and deployenv='$xxcc->{deployenv}'" );};
            die "get info err: $@" if $@;
            return 'success' if $x && @$x;
            print "Additional approval batches\n";
        }
        else
        {
            return 'success';
        }
 
    }

    return 'success' if $batches eq 'thelasttime' && $xxcc->{batches} ne $xxcc->{groups};
    return 'success' if $batches eq 'notfirsttime'   && $xxcc->{batches} eq 1;

    $submitter = $xxcc->{submitter} if $submitter eq 'jobx@app' && $xxcc->{submitter} ne 'nofind';
    print "submitter: $submitter\n";

    my %var_map;
    if( $fromjob && $variable->{version} )
    {
        my $jobname_res = eval{ $db->query( "select name from openc3_job_jobs where uuid='$fromjob'" );};
        $logs->die( "get openc3_job_jobs info from mysql fail openc3_job_jobs uuid=$fromjob" ) if $@;
        $var_map{"jobname"} = $jobname_res->[0][0];
    }

    my $approvalname = $name;
    if ( $var_map{"jobname"} && $var_map{"jobname"} =~ /^_ci_(\d+)_$/ ) {
        my $flow_id = $1;

        my $flowname = `c3mc-base-db-get name --table openc3_ci_project --filter 'id=$flow_id'`;
        chomp $flowname;
        $var_map{"flowname"} = $flowname // 'unknown';

        my $x = `c3mc-base-db-get create_time tagger taginfo --table openc3_ci_version --filter "projectid='$flow_id' and name='$variable->{version}'"`;
        chomp $x;
        my @x = split /;/, $x, 3;

        $var_map{"tagtime"} = $x[0];
        $var_map{"tagger" } = $x[1];
        $var_map{"taginfo"} = $x[2];

        $approvalname = join "/", $xxcc->{action}, Encode::decode( 'UTF-8', $flowname ), $name, $variable->{version} // 'current';
    }

    my $treename = `c3mc-base-db-get fullname --table openc3_agent_inherit --filter 'projectid=$projectid'`;
    chomp $treename;
    $var_map{"treename"} = $treename // 'unkowm';
    $var_map{"submitter"} = $submitter;

    %var_map = ( %var_map, %$variable ) if $variable;

    $var_map{"deploy_env"} = $var_map{"_jobtype_"};
    $var_map{"rollback"} = defined $var_map{"_rollbackVersion_"} ? "如需回滚会回滚到版本: $var_map{_rollbackVersion_}" : "";
    $var_map{"rollback_version"} = $var_map{"_rollbackVersion_"} // 'no rollback version';
    $var_map{"stepname"} = $name;

    map{ $var_map{$_} //= 'undefind'; utf8::decode($var_map{$_}) }keys %var_map;

    map{ $cont =~ s/\$\{\Q$_\E\}/$var_map{$_}/g if defined $var_map{$_}; }keys %var_map;

    if( $fromjob && $approver =~ /\$/ )
    {
        eval { $approver = variable->new( variable => $variable, db => $db, jobuuid => $fromjob )->relpace( $approver ); };
        $logs->die( "relpace variable approver fail:$@" ) if $@;
    }

    if( $approver =~ /^@[a-zA-Z]/ || $approver =~ /,@[a-zA-Z]/ || $approver =~ /^%[a-zA-Z]/ || $approver =~ /,%[a-zA-Z]/ )
    {
        $logs->die( "approver error format:$@" ) unless $approver =~ /^[\@\%a-zA-Z0-9][a-zA-Z0-9\@\%\-_\.,]+$/;
        my    @x = `echo '$approver'|sed 's/,/ /g'|xargs -n 1|c3mc-app-usrext`;
        chomp @x;
        die "nofind approver" unless @x;
        $approver = join ',', @x;
    }

    $timeout ||= 86400;

    print "timeout: $timeout\n";

    $everyone = ( $everyone && $everyone eq 'on' ) ? 1 : 0;

    if( $relaxed && $relaxed eq 'nervous' )
    {
        $relaxed = 'off';
        $submitter = 'sys@app';
    }
    $relaxed = ( $relaxed && $relaxed eq 'on' ) ? 1 : 0;

    my ( $subtasktimems, $subtaskstarttime ) 
        = ( time, POSIX::strftime( "%Y-%m-%d %H:%M:%S", localtime ) );

    if( $taskuuid && $fromjob )
    {
        eval{ $db->execute( 
                "update `openc3_job_subtask` set nodecount='1',starttime='$subtaskstarttime',runtime='0.00',pause='$pause',status='running'
                     where parent_uuid='$taskuuid' and subtask_type='approval' and uuid='$uuid'") };
        $logs->die( "set status to subtask fail:$@" ) if $@;
    }

    my @approver = split /,/, $approver;
    my $puuid = uuid->new()->create_str;

    print "\n############################## START ##############################\n\n";

    for my $user ( @approver )
    {
        my $time = POSIX::strftime( "%Y-%m-%d %H:%M:%S", localtime );
        my $muuid = uuid->new()->create_str;
        print "Send mesg to $user, wait for his confirmation\n";
        my $tempeo = $everyone ? 'YES' :'NO';
        if( $relaxed && $user eq $submitter )
        {
            eval{ $db->execute( 
                "insert into openc3_job_approval (`taskuuid`,`uuid`,`user`,`submitter`,`cont`,`opinion`,`remarks`,`create_time`,`finishtime`,`notifystatus`,`oauuid`,`name`,`everyone`)values('$puuid','$muuid','$user','$submitter','$cont','agree', 'sys.handle.auto','$time','$time', 'skip', '0','$approvalname', '$tempeo' )"
            ) };
        }
        else
        {
            eval{ $db->execute( 
                "insert into openc3_job_approval (`taskuuid`,`uuid`,`user`,`submitter`,`cont`,`opinion`,`remarks`,`create_time`,`notifystatus`,`oauuid`,`name`,`everyone`)values('$puuid','$muuid','$user','$submitter','$cont','unconfirmed', '','$time', 'null', '0','$approvalname', '$tempeo' )"
            ) };
 
        }
        $logs->die("insert to mysql fail: $@") if $@;
    }

    my %approver = map{ $_ => 1 }@approver;

    my $rtime = int ( $timeout / 3 ) + 1;
    my $subtaskstatus = 'success'; #runnigs,fail,success,decision,ignore,refuse
    for( 1 .. $rtime )
    {
        my $stat = eval{ $db->query( "select opinion,user,remarks from openc3_job_approval where taskuuid='$puuid'" );};
        if( $@ )
        {
            $logs->err("get approval stat err: $@");
            $stat = [];
        }
        for( @$stat )
        {
            my ( $opinion, $user, $remarks ) = @$_;
            next if $opinion eq 'unconfirmed';
            if( $opinion eq 'refuse' )
            {
                print "refuse by user $user , reason: $remarks\n";
                $subtaskstatus = 'refuse';
                last;
            }elsif( $opinion eq 'agree' )
            {
                next unless $approver{$user};
                print "$user: agree\n";
                delete $approver{$user};
                %approver = () unless $everyone;
            }
            else { $logs->die("unknown opinion: $opinion"); }
        }
        if( $subtaskstatus eq 'fail' || $subtaskstatus eq 'refuse' ){
            last;
        }
        unless( %approver )
        {
            print "OK\n";
            $subtaskstatus = 'success';
            last;
        }

        if( $_ >= $rtime )
        {
            print "timeout.\n";
            $subtaskstatus = 'fail';
        }
        sleep 3;
    }
 
    print "substatus = $subtaskstatus\n";

    my $record = sub
    {
        my $jobxinfo = shift @_;
        return unless length( $xxcc->{deployjobxuuid} ) == 12;

        eval{ $db->execute( "insert into openc3_job_plugin_approval_record (`jobxuuid`,`pluginuuid`,`action`,`deployenv`,`batches`)values('$xxcc->{deployjobxuuid}','$uuid','$xxcc->{action}','$xxcc->{deployenv}','$xxcc->{batches}')" )};
        die "record err: $@" if $@;
    };
    &$record( $xxcc ) if $subtaskstatus eq 'success';

    if( $taskuuid && $fromjob )
    {
         my $subtaskruntime = sprintf "%0.3f", time - $subtasktimems;
         my $subtaskfinishtime = POSIX::strftime( "%Y-%m-%d %H:%M:%S", localtime );
         eval{ $db->execute( "update `openc3_job_subtask` set runtime='$subtaskruntime',finishtime='$subtaskfinishtime',status='$subtaskstatus' 
                 where parent_uuid='$taskuuid' and subtask_type='approval' and uuid='$uuid'") };
    }

    return $subtaskstatus unless $taskuuid && $fromjob && $pause;

    Code->new( 'pause' )->run( db => $db,  taskuuid => $taskuuid, subtaskuuid => $uuid, subtasktype => 'approval', logs => $logs ) if $subtaskstatus eq 'success';
    return $subtaskstatus;
}
