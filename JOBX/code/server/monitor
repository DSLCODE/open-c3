#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/JOBX/lib -I/data/Software/mydan/JOBX/private/lib
use strict;
use warnings;
use FindBin qw( $RealBin );
use Data::Dumper;
use POSIX;
use Util;
use Logs;

$| ++;

=head1 SYNOPSIS

    db => $mysql,

=cut

my %c = (
  job_api => 5,
  job_server_approval => 1,
  job_server_bury => 1,
  job_server_call => 1,
  job_server_clean => 1,
  job_server_crontab => 1,
  job_server_keepalive => 1,
  job_server_notify => 1,
  job_supervisor => 17,

  jobx_api => 5,
  jobx_server_bury => 1,
  jobx_server_call => 1,
  jobx_server_keepalive => 1,
  jobx_server_monitor => 1,
  jobx_supervisor => 14,

  agent_api => 5,
  agent_server_bury => 1,
  agent_server_call => 1,
  agent_server_check => 1,
  agent_server_inherit => 1,
  agent_server_keepalive => 1,
  agent_supervisor => 15,

  ci_api => 5,
  ci_server_build => 1,
  ci_server_bury => 1,
  ci_server_clean => 1,
  ci_server_findtags => 1,
  ci_server_keepalive => 1,
  ci_server_pkgrsync => 1,
  ci_supervisor => 16,

  connector_api => 10,
  connector_supervisor => 10,
);


return sub
{
    my %param = @_;

    my ( $myname, $db, $logs ) = ( Util::myname(), $param{db}, Logs->new( 'monitor' ) );

    while(1)
    {
        warn "do ...\n";
        my $t = time;

        my $time = POSIX::strftime( "%Y-%m-%d %H:%M:%S", localtime( $t ) );

        my @ps = `ps -eo cmd`;
        chomp @ps;

        my %task = ( job_worker_task => 0, jobx_worker_task => 0 );
        my %proc = map{ $_ => 0 }keys %c;

        map{
            if( defined $proc{$_} )
            {
                $proc{$_} ++;
            }elsif( $_ =~ /^(job[x]{0,1}_worker_task)_[a-zA-Z0-9]{12}$/ )
            {
                $task{$1} ++;
            }
        }@ps;

        eval{
            my $ins = "replace into monitor (`time`,`time_s`,`stat`,`host`,`type`,`key`,`val`)value('%s','%s','%s','%s','%s','%s','%s')";
            map{ $db->execute( sprintf $ins, $time, $t, $proc{$_} eq $c{$_} ? 'ok' : "err:$c{$_}", $myname, 'proc',$_, $proc{$_} ); }keys %proc;
            map{ $db->execute( sprintf $ins, $time, $t, $task{$_} > 100 ? 'danger' : $task{$_} > 10 ? 'warning' : 'healthy' , $myname, 'task',$_, $task{$_} ); }keys %task;
        };

        my $due = time + 60 - $t;
        sleep $due if $due > 0;
    }
}
